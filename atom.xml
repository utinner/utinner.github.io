<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>代码乐园</title>
  
  <subtitle>一个默默无闻的代码搬运工</subtitle>
  <link href="https://utinner.gitee.io/atom.xml" rel="self"/>
  
  <link href="https://utinner.gitee.io/"/>
  <updated>2023-03-15T06:50:50.377Z</updated>
  <id>https://utinner.gitee.io/</id>
  
  <author>
    <name>JinPing</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>小记</title>
    <link href="https://utinner.gitee.io/2023/03/15/%E5%B0%8F%E8%AE%B0/"/>
    <id>https://utinner.gitee.io/2023/03/15/%E5%B0%8F%E8%AE%B0/</id>
    <published>2023-03-15T06:49:10.000Z</published>
    <updated>2023-03-15T06:50:50.377Z</updated>
    
    <content type="html"><![CDATA[<h1 id="我是标题"><a href="#我是标题" class="headerlink" title="我是标题"></a>我是标题</h1>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;我是标题&quot;&gt;&lt;a href=&quot;#我是标题&quot; class=&quot;headerlink&quot; title=&quot;我是标题&quot;&gt;&lt;/a&gt;我是标题&lt;/h1&gt;</summary>
      
    
    
    
    <category term="生活小记" scheme="https://utinner.gitee.io/categories/%E7%94%9F%E6%B4%BB%E5%B0%8F%E8%AE%B0/"/>
    
    
    <category term="生活" scheme="https://utinner.gitee.io/tags/%E7%94%9F%E6%B4%BB/"/>
    
  </entry>
  
  <entry>
    <title>完形填空</title>
    <link href="https://utinner.gitee.io/2021/11/10/%E5%AE%8C%E5%BD%A2%E5%A1%AB%E7%A9%BA/"/>
    <id>https://utinner.gitee.io/2021/11/10/%E5%AE%8C%E5%BD%A2%E5%A1%AB%E7%A9%BA/</id>
    <published>2021-11-10T09:06:34.000Z</published>
    <updated>2023-03-15T09:27:23.536Z</updated>
    
    <content type="html"><![CDATA[<meta name="referrer" content="no-referrer"><span id="more"></span><h1 id="解题步骤"><a href="#解题步骤" class="headerlink" title="解题步骤"></a>解题步骤</h1><h2 id="1-句"><a href="#1-句" class="headerlink" title="1.句"></a>1.句</h2><p>关注空格所在句的搭配线索</p><h2 id="2-义"><a href="#2-义" class="headerlink" title="2.义"></a>2.义</h2><p>关注空格所在句的语义对应线索</p><h2 id="3-项"><a href="#3-项" class="headerlink" title="3.项"></a>3.项</h2><p>空格所对应的4个选项的逻辑关系：</p><ul><li>A约等于B，这两个选项要同时排除</li><li>A的措辞和B相近，倾向于在这两个之中</li><li>A和B对立项，蕴含着正确答案（against 和 for）</li><li>A&gt;B，倾向于选A(范围大的)</li><li>A明显不同于BCD，正确答案存在于BCD中</li></ul><h2 id="4-回"><a href="#4-回" class="headerlink" title="4.回"></a>4.回</h2><p>看上一句或者上文的主题句，根据句子之间的递进、转折、因果等关系，判断正确项。首段首句一般都是交代文章提纲和背景，下面的句子围绕主题来叙述</p><h2 id="5-跳"><a href="#5-跳" class="headerlink" title="5.跳"></a>5.跳</h2><p>有的时候线索在下一句，跳过当前句子去看下一句发现线索</p><h2 id="6-主题"><a href="#6-主题" class="headerlink" title="6.主题"></a>6.主题</h2><p>找主题词，抓住文章的主题词，凡是跟文章的主题词靠近的，一致的，就是正确答案</p><h2 id="7-复查"><a href="#7-复查" class="headerlink" title="7.复查"></a>7.复查</h2><p>整体考察是按照文章和篇章来的，所以要复查整个全文，进行通读审查</p><h2 id="动词考点"><a href="#动词考点" class="headerlink" title="动词考点"></a>动词考点</h2><ul><li>主谓对应：谓语动词要符合主语身份</li><li>动宾对应：踢足球，不能踢篮球</li><li>动状对应：在游泳馆只能swim，不能play baseball</li><li>主宾对应：二氧化碳的排放<strong>影响</strong>了环境</li></ul>]]></content>
    
    
    <summary type="html">&lt;meta name=&quot;referrer&quot; content=&quot;no-referrer&quot;&gt;</summary>
    
    
    
    <category term="考研英语" scheme="https://utinner.gitee.io/categories/%E8%80%83%E7%A0%94%E8%8B%B1%E8%AF%AD/"/>
    
    
    <category term="考研英语" scheme="https://utinner.gitee.io/tags/%E8%80%83%E7%A0%94%E8%8B%B1%E8%AF%AD/"/>
    
  </entry>
  
  <entry>
    <title>英语后缀</title>
    <link href="https://utinner.gitee.io/2021/11/09/%E8%8B%B1%E8%AF%AD%E5%90%8E%E7%BC%80/"/>
    <id>https://utinner.gitee.io/2021/11/09/%E8%8B%B1%E8%AF%AD%E5%90%8E%E7%BC%80/</id>
    <published>2021-11-09T05:57:52.000Z</published>
    <updated>2023-03-15T09:27:17.737Z</updated>
    
    <content type="html"><![CDATA[<meta name="referrer" content="no-referrer"><p>后缀决定词性</p><h1 id="一-名词后缀"><a href="#一-名词后缀" class="headerlink" title="一.名词后缀"></a>一.名词后缀</h1><h2 id="ability，-ibility"><a href="#ability，-ibility" class="headerlink" title="-ability，-ibility"></a>-ability，-ibility</h2><p>表示能力，性质 </p><table><thead><tr><th>单词</th><th>释义</th><th>延伸</th></tr></thead><tbody><tr><td>flexible</td><td>灵活的（可折叠的）</td><td>flex 折叠</td></tr><tr><td>flexibility</td><td>灵活性，灵活度</td><td></td></tr><tr><td>credible</td><td>可信的</td><td>cred 信誉</td></tr><tr><td>credibility</td><td>可信度</td><td></td></tr><tr><td>available</td><td>可用的，可得到的</td><td>avail 利用，使用</td></tr><tr><td>availability</td><td>可获得性</td><td></td></tr><tr><td>sustainable</td><td>可支撑的；可维持的</td><td>tain 拿<br>sustain 支撑，维持，遭受</td></tr><tr><td>sustainability</td><td>n.可维持性</td><td></td></tr></tbody></table><h2 id="age"><a href="#age" class="headerlink" title="-age"></a>-age</h2><p>表示某种状态</p><table><thead><tr><th>单词</th><th>释义</th><th>延伸</th></tr></thead><tbody><tr><td>shortage</td><td>短缺</td><td></td></tr><tr><td>postage</td><td>邮资，邮费</td><td>post 邮递，邮寄</td></tr><tr><td>package</td><td>打好的包裹，包装盒</td><td>pack 打包<br>unpack 拆包</td></tr><tr><td>marriage</td><td>婚姻</td><td>marry 结婚</td></tr><tr><td>luggage</td><td>行李</td><td>lug 拉杆</td></tr><tr><td>baggage</td><td>行李</td><td></td></tr></tbody></table><h2 id="al"><a href="#al" class="headerlink" title="-al"></a><u>-al</u></h2><p>可做名词后缀，也可做形容词词缀</p><table><thead><tr><th>单词</th><th>释义</th><th>延伸</th></tr></thead><tbody><tr><td>national</td><td>adj.国家的，民族的<br>n.国民</td><td>nation 国家，民族</td></tr><tr><td>mutinational</td><td>adj.跨国的<br>n.跨国公司</td><td></td></tr><tr><td>memorial</td><td>n.纪念物，纪念品</td><td>memory 记忆</td></tr><tr><td>professional</td><td>adj.职业的，专业的</td><td>fess 讲，说<br>profession 职业</td></tr><tr><td>refusal</td><td>n.拒绝</td><td></td></tr><tr><td>arrival</td><td>n.到达</td><td></td></tr></tbody></table><h2 id="an-ian-arian"><a href="#an-ian-arian" class="headerlink" title="-an,-ian,-arian"></a>-an,-ian,-arian</h2><p>与人有关 </p><table><thead><tr><th>单词</th><th>释义</th><th>延伸</th></tr></thead><tbody><tr><td>musician</td><td>音乐家</td><td></td></tr><tr><td>physician</td><td>n.医生</td><td>physics n.物理学<br>physiology n.生理学<br>physical adj.物理的,身体的，有形的，客观存在的<br>physicist n.物理学家</td></tr><tr><td>librarian</td><td>n.图书管理员</td><td>library 图书馆</td></tr><tr><td>politician</td><td>n.政界人物</td><td>polite 礼貌的<br>politics n.政治</td></tr><tr><td>Hungarian</td><td>n.匈牙利人</td><td></td></tr></tbody></table><h2 id="ance-ence"><a href="#ance-ence" class="headerlink" title="-ance,-ence"></a>-ance,-ence</h2><table><thead><tr><th>单词</th><th>释义</th><th>延伸</th></tr></thead><tbody><tr><td>appearance</td><td>出现</td><td></td></tr><tr><td>reference</td><td>参考</td><td></td></tr><tr><td>perseverance</td><td>坚韧不拔,执着</td><td></td></tr><tr><td>emergence</td><td>n.出现</td><td>emerg 紧急</td></tr></tbody></table><h2 id="ancy-ency"><a href="#ancy-ency" class="headerlink" title="-ancy,-ency"></a>-ancy,-ency</h2><table><thead><tr><th>单词</th><th>释义</th><th>延伸</th></tr></thead><tbody><tr><td>emergency</td><td>n.紧急事件</td><td></td></tr><tr><td>expectancy</td><td>n.期待</td><td></td></tr></tbody></table><h2 id="ant-ent"><a href="#ant-ent" class="headerlink" title="-ant,-ent"></a>-ant,-ent</h2><p>可以是名词后缀，可以是形容词后缀<br>与人有关 </p><table><thead><tr><th>单词</th><th>释义</th><th>延伸</th></tr></thead><tbody><tr><td>student</td><td>学生</td><td></td></tr><tr><td>applicant</td><td>申请人</td><td></td></tr><tr><td>respondent</td><td>被告</td><td></td></tr><tr><td>correspondent</td><td>n.通讯员，a.一致的</td><td>respond 回应</td></tr><tr><td>resident</td><td>居民</td><td></td></tr><tr><td>president</td><td>总统</td><td>preside vi.主持(会议、仪式等);担任(会议)主席</td></tr></tbody></table><h2 id="cy"><a href="#cy" class="headerlink" title="-cy"></a>-cy</h2><table><thead><tr><th>单词</th><th>释义</th><th>延伸</th></tr></thead><tbody><tr><td>privacy</td><td>隐私</td><td>private a.私有的</td></tr><tr><td>accuracy</td><td>精确</td><td>accurate a.精确的</td></tr></tbody></table><h2 id="dom"><a href="#dom" class="headerlink" title="-dom"></a>-dom</h2><ul><li>-dom 表示范围</li><li>dome n.圆屋顶</li><li>domestic adj.家庭的，国内的</li></ul><table><thead><tr><th>单词</th><th>释义</th><th>延伸</th></tr></thead><tbody><tr><td>kingdom</td><td>王国</td><td></td></tr><tr><td>freedom</td><td>自由</td><td></td></tr></tbody></table><h2 id="ee"><a href="#ee" class="headerlink" title="-ee"></a>-ee</h2><p>表示被…的人</p><table><thead><tr><th>单词</th><th>释义</th><th>延伸</th></tr></thead><tbody><tr><td>employee</td><td>雇员</td><td></td></tr><tr><td>interviewee</td><td>被采访、面试的人，受访者</td><td></td></tr><tr><td>referee</td><td>裁判</td><td></td></tr><tr><td>trainee</td><td>实习生，新兵</td><td></td></tr></tbody></table><h2 id="er-or-ar"><a href="#er-or-ar" class="headerlink" title="-er,-or,-ar"></a>-er,-or,-ar</h2><table><thead><tr><th>单词</th><th>释义</th><th>延伸</th></tr></thead><tbody><tr><td>scholar</td><td>学者</td><td></td></tr><tr><td>actor</td><td>演员</td><td></td></tr><tr><td>cooker</td><td>厨具</td><td>cook 厨师</td></tr><tr><td>folder</td><td>折叠物，文件夹</td><td>fold 折叠</td></tr><tr><td>icebreaker</td><td>破冰船</td><td></td></tr><tr><td>tractor</td><td>拖拉机</td><td></td></tr><tr><td>loudspeaker</td><td>扬声器，扩音器</td><td></td></tr><tr><td>typewriter</td><td>打字机</td><td>type写<br>typist 打字员</td></tr><tr><td>duplicator</td><td>复印机</td><td></td></tr><tr><td>drawer</td><td>抽屉，出票人</td><td></td></tr><tr><td>skyscraper</td><td>摩天大楼</td><td></td></tr><tr><td>cultivator</td><td>耕种机，播种机</td><td>cult n.崇拜，膜拜;adj.受特定群体欢迎的；作为偶像崇拜的<br>cultivate</td></tr></tbody></table><h2 id="ery"><a href="#ery" class="headerlink" title="-ery"></a>-ery</h2><table><thead><tr><th>单词</th><th>释义</th><th>延伸</th></tr></thead><tbody><tr><td>bravery</td><td>n.勇敢</td><td>brave 勇敢</td></tr><tr><td>slavery</td><td>n.奴隶制</td><td>slave 奴隶身份</td></tr></tbody></table><h2 id="ese"><a href="#ese" class="headerlink" title="-ese"></a>-ese</h2><p>表示人</p><table><thead><tr><th>单词</th><th>释义</th></tr></thead><tbody><tr><td>Chinese</td><td>中国人</td></tr></tbody></table><h2 id="ess"><a href="#ess" class="headerlink" title="-ess"></a>-ess</h2><p>表女性</p><table><thead><tr><th>单词</th><th>释义</th></tr></thead><tbody><tr><td>empress</td><td>女皇</td></tr><tr><td>waitess</td><td>女服务员</td></tr></tbody></table><h2 id="ful"><a href="#ful" class="headerlink" title="-ful"></a>-ful</h2><p>满满的一…质量</p><table><thead><tr><th>单词</th><th>释义</th></tr></thead><tbody><tr><td>handful</td><td>一把</td></tr><tr><td>spoonful</td><td>一勺</td></tr><tr><td>mouthful</td><td>一嘴</td></tr></tbody></table><h2 id="hood"><a href="#hood" class="headerlink" title="-hood"></a>-hood</h2><p>表示阶段和状态</p><table><thead><tr><th>单词</th><th>释义</th></tr></thead><tbody><tr><td>babyhood</td><td>婴儿期</td></tr><tr><td>childhood</td><td>童年期</td></tr><tr><td>adulthood</td><td>成年</td></tr><tr><td>neighberhood</td><td>邻里关系</td></tr></tbody></table><h2 id="ics"><a href="#ics" class="headerlink" title="-ics"></a>-ics</h2><p>表示学科</p><table><thead><tr><th>单词</th><th>释义</th></tr></thead><tbody><tr><td>electronics</td><td>电子学</td></tr><tr><td>linguistics</td><td>语言学</td></tr><tr><td>physics</td><td>物理学</td></tr></tbody></table><h2 id="ion-ition-ation"><a href="#ion-ition-ation" class="headerlink" title="-ion, -ition, -ation"></a>-ion, -ition, -ation</h2><table><thead><tr><th>单词</th><th>释义</th></tr></thead><tbody><tr><td>collection</td><td>收藏</td></tr><tr><td>observation</td><td>观察</td></tr><tr><td>competition</td><td>竞争</td></tr><tr><td>repetition</td><td>重复</td></tr></tbody></table><h2 id="ism"><a href="#ism" class="headerlink" title="-ism"></a>-ism</h2><p>表示理论、主义</p><table><thead><tr><th>单词</th><th>释义</th><th>延伸</th></tr></thead><tbody><tr><td>theism</td><td>有神论</td><td></td></tr><tr><td>atheism</td><td>无神论</td><td></td></tr><tr><td>capitalism</td><td>资本主义</td><td>capital n.首都，资本，资金</td></tr><tr><td>socialism</td><td>社会主义</td><td>social n.社会的</td></tr><tr><td>idealism</td><td>理想主义</td><td></td></tr><tr><td>realism</td><td>现实主义</td><td></td></tr></tbody></table><h2 id="ist"><a href="#ist" class="headerlink" title="-ist"></a>-ist</h2><p>…学家，表示人</p><table><thead><tr><th>单词</th><th>释义</th></tr></thead><tbody><tr><td>violinist</td><td>小提琴家</td></tr><tr><td>pianist</td><td>钢琴家</td></tr><tr><td>psychologist</td><td>心理学家</td></tr><tr><td>psychiatrist</td><td>精神疾病专家</td></tr><tr><td>vocalist</td><td>声乐学家</td></tr></tbody></table><h2 id="ity-ty"><a href="#ity-ty" class="headerlink" title="-ity, -ty"></a>-ity, -ty</h2><table><thead><tr><th>单词</th><th>释义</th><th>延伸</th></tr></thead><tbody><tr><td>cruelty</td><td>残忍</td><td>cruel 残忍的</td></tr><tr><td>purity</td><td>纯洁</td><td>pure 纯洁的</td></tr><tr><td>beauty</td><td>美丽</td><td>beautiful 漂亮的</td></tr><tr><td>clarity</td><td>清晰度</td><td>clear 清晰的</td></tr><tr><td>identity</td><td>身份</td><td></td></tr></tbody></table><h2 id="ment"><a href="#ment" class="headerlink" title="-ment"></a>-ment</h2><table><thead><tr><th>单词</th><th>释义</th></tr></thead><tbody><tr><td>movement</td><td>运动</td></tr><tr><td>retirement</td><td>退休</td></tr></tbody></table><h2 id="meter"><a href="#meter" class="headerlink" title="-meter"></a>-meter</h2><p>…表</p><table><thead><tr><th>单词</th><th>释义</th></tr></thead><tbody><tr><td>watermeter</td><td>水表</td></tr><tr><td>thermometer</td><td>温度表</td></tr></tbody></table><h2 id="ness"><a href="#ness" class="headerlink" title="-ness"></a>-ness</h2><table><thead><tr><th>单词</th><th>释义</th></tr></thead><tbody><tr><td>darkness</td><td>黑暗</td></tr><tr><td>happiness</td><td>幸福</td></tr></tbody></table><h2 id="ology"><a href="#ology" class="headerlink" title="-ology"></a>-ology</h2><table><thead><tr><th>单词</th><th>释义</th></tr></thead><tbody><tr><td>archeology</td><td>考古学</td></tr><tr><td>biology</td><td>生物学</td></tr><tr><td>psychology</td><td>心理学</td></tr><tr><td>physiology</td><td>生理学</td></tr><tr><td>futurology</td><td>未来主义学科</td></tr></tbody></table><h2 id="scope"><a href="#scope" class="headerlink" title="-scope"></a>-scope</h2><p>表示范围</p><h2 id="ship"><a href="#ship" class="headerlink" title="-ship"></a>-ship</h2><p>表示关系</p><table><thead><tr><th>单词</th><th>释义</th><th>延伸</th></tr></thead><tbody><tr><td>friendship</td><td>友谊</td><td></td></tr><tr><td>fellowship</td><td>交情</td><td>fellow 伙伴，同胞</td></tr><tr><td>scholarship</td><td>奖学金</td><td></td></tr></tbody></table><h2 id="sion-ssion"><a href="#sion-ssion" class="headerlink" title="-sion, -ssion"></a>-sion, -ssion</h2><table><thead><tr><th>单词</th><th>释义</th><th>延伸</th></tr></thead><tbody><tr><td>decision</td><td>决定</td><td></td></tr><tr><td>expansion</td><td>扩大</td><td>expand 扩大</td></tr><tr><td>recession</td><td>经济衰退，退后，撤回</td><td></td></tr><tr><td>excession</td><td>超出</td><td>exceed 超过</td></tr></tbody></table><h2 id="th"><a href="#th" class="headerlink" title="-th"></a>-th</h2><table><thead><tr><th>单词</th><th>释义</th><th>延伸</th></tr></thead><tbody><tr><td>growth</td><td>增长</td><td></td></tr><tr><td>width</td><td>宽度</td><td>wide 宽的</td></tr><tr><td>birth</td><td>出生，诞生</td><td>bear 熊，生育</td></tr></tbody></table><h2 id="tive"><a href="#tive" class="headerlink" title="-tive"></a>-tive</h2><p>可以表示人，可以表示物</p><table><thead><tr><th>单词</th><th>释义</th><th>延伸</th></tr></thead><tbody><tr><td>detective</td><td>侦探</td><td>detect 侦查</td></tr><tr><td>captive</td><td>俘虏;囚徒;战俘</td><td>capture 俘虏</td></tr><tr><td>representative</td><td>代表</td><td>represent v.代表</td></tr><tr><td>motive</td><td>动机</td><td>emotion 情感，情绪</td></tr><tr><td>incentive</td><td>激励，鼓励，刺激</td><td></td></tr></tbody></table><h2 id="ure"><a href="#ure" class="headerlink" title="-ure"></a>-ure</h2><table><thead><tr><th>单词</th><th>释义</th><th>延伸</th></tr></thead><tbody><tr><td>closure</td><td>关闭</td><td></td></tr><tr><td>exposure</td><td>面临，遭受，揭露</td><td>expose 暴露</td></tr><tr><td>pleasure</td><td>高兴</td><td>please 请</td></tr></tbody></table><h1 id="二-动词后缀"><a href="#二-动词后缀" class="headerlink" title="二.动词后缀"></a>二.动词后缀</h1><h2 id="en"><a href="#en" class="headerlink" title="-en"></a>-en</h2><p>使得，可做形容词和动词后缀</p><table><thead><tr><th>单词</th><th>释义</th><th>延伸</th></tr></thead><tbody><tr><td>widen</td><td>加宽</td><td></td></tr><tr><td>broaden</td><td>拓宽</td><td>expose 暴露</td></tr><tr><td>sharpen</td><td>使锋利</td><td>sharp 锋利的</td></tr><tr><td>shorten</td><td>缩短</td><td></td></tr><tr><td>heighten</td><td>加高</td><td></td></tr><tr><td>deepen</td><td>加深</td><td></td></tr><tr><td>fasten</td><td>vt.固定</td><td>fast  牢固的，牢靠的，快的。vi.斋戒，节食</td></tr><tr><td>lengthen</td><td>变长</td><td></td></tr><tr><td>strengthen</td><td>加强</td><td></td></tr></tbody></table><h2 id="ify"><a href="#ify" class="headerlink" title="-ify"></a>-ify</h2><table><thead><tr><th>单词</th><th>释义</th><th>延伸</th></tr></thead><tbody><tr><td>simplify</td><td>使简单化</td><td>simple 简单的</td></tr><tr><td>beautify</td><td>美化</td><td></td></tr><tr><td>clarify</td><td>使变清楚</td><td></td></tr><tr><td>identify</td><td>识别</td><td></td></tr><tr><td>class</td><td>分级，分类，分等级</td><td>class 阶层，等级</td></tr></tbody></table><h2 id="ize-ise"><a href="#ize-ise" class="headerlink" title="-ize,-ise"></a>-ize,-ise</h2><p>使得…化</p><table><thead><tr><th>单词</th><th>释义</th><th>延伸</th></tr></thead><tbody><tr><td>popularize</td><td>使流行，使普及</td><td>popular 流行的</td></tr><tr><td>modernize</td><td>使现代化</td><td>modern 现代的</td></tr><tr><td>industrialize</td><td>使工业化</td><td>industrial 工业的</td></tr><tr><td>realize</td><td>实现</td><td></td></tr></tbody></table><h1 id="三-形容词后缀"><a href="#三-形容词后缀" class="headerlink" title="三.形容词后缀"></a>三.形容词后缀</h1><h2 id="able-ible"><a href="#able-ible" class="headerlink" title="-able, -ible"></a>-able, -ible</h2><p>表示能够、可以</p><table><thead><tr><th>单词</th><th>释义</th><th>延伸</th></tr></thead><tbody><tr><td>questionable</td><td>可疑的</td><td></td></tr><tr><td>credible</td><td>可信的</td><td></td></tr><tr><td>suitable</td><td>适合的</td><td></td></tr></tbody></table><h2 id="al-1"><a href="#al-1" class="headerlink" title="-al"></a><u>-al</u></h2><p>可做名词后缀，也可做形容词词缀</p><table><thead><tr><th>单词</th><th>释义</th><th>延伸</th></tr></thead><tbody><tr><td>national</td><td>adj.国家的，民族的<br>n.国民</td><td>nation 国家，民族</td></tr><tr><td>mutinational</td><td>adj.跨国的<br>n.跨国公司</td><td></td></tr><tr><td>memorial</td><td>n.纪念物，纪念品</td><td>memory 记忆</td></tr><tr><td>professional</td><td>adj.职业的，专业的</td><td>fess 讲，说<br>profession 职业</td></tr><tr><td>conditional</td><td>a.有条件的</td><td></td></tr><tr><td>structural</td><td>a.结构性的</td><td></td></tr></tbody></table><h2 id="an-arian-ian"><a href="#an-arian-ian" class="headerlink" title="-an,-arian,-ian"></a>-an,-arian,-ian</h2><table><thead><tr><th>单词</th><th>释义</th><th>延伸</th></tr></thead><tbody><tr><td>suburban</td><td>郊区的</td><td>suburb 郊区</td></tr><tr><td>urban</td><td>adj.城市的</td><td></td></tr><tr><td>Canadian</td><td>加拿大的</td><td></td></tr></tbody></table><h2 id="ant-ent-1"><a href="#ant-ent-1" class="headerlink" title="-ant,-ent"></a>-ant,-ent</h2><p>可以是名词后缀，可以是形容词后缀</p><table><thead><tr><th>单词</th><th>释义</th><th>延伸</th></tr></thead><tbody><tr><td>different</td><td>不同的</td><td>differ 不同，分歧</td></tr><tr><td>pleasant</td><td>令人开心的</td><td>please 请，使开心</td></tr></tbody></table><h2 id="ary-ory"><a href="#ary-ory" class="headerlink" title="-ary,-ory"></a>-ary,-ory</h2><table><thead><tr><th>单词</th><th>释义</th><th>延伸</th></tr></thead><tbody><tr><td>revolutionary</td><td>革命的</td><td>revolution 革命</td></tr><tr><td>prorevolutionary</td><td>赞同革命的</td><td></td></tr><tr><td>advisory</td><td>建议性的</td><td>advise 建议</td></tr><tr><td>ordinary</td><td>普通的；平常的；一般的；平凡的</td><td></td></tr><tr><td>extraordinary</td><td>非同寻常的</td><td>extra 额外的</td></tr></tbody></table><h2 id="ate"><a href="#ate" class="headerlink" title="-ate"></a>-ate</h2><p>名词、形容词后缀</p><table><thead><tr><th>单词</th><th>释义</th><th>延伸</th></tr></thead><tbody><tr><td>considerate</td><td>考虑周到的，体贴的，体谅的</td><td>consider 考虑</td></tr><tr><td>fortunate</td><td>幸运的</td><td>fortune 命运，财富</td></tr><tr><td>unfortunate</td><td>不幸的</td><td></td></tr><tr><td>affectionate</td><td>充满爱的，充满深情的</td><td>affect 影响，打动，感动<br>affection 感情，钟爱，喜爱</td></tr><tr><td>motivate</td><td>激励，激发</td><td></td></tr></tbody></table><h2 id="en-1"><a href="#en-1" class="headerlink" title="-en"></a>-en</h2><p>动词、形容词后缀</p><table><thead><tr><th>单词</th><th>释义</th><th>延伸</th></tr></thead><tbody><tr><td>golden</td><td>金色的，美好的，特别的</td><td>gold 金</td></tr><tr><td>wooden</td><td>呆板的，木制的</td><td>wood 木材</td></tr><tr><td>woolen</td><td>羊毛的</td><td>wool 羊毛</td></tr></tbody></table><h2 id="ese-1"><a href="#ese-1" class="headerlink" title="-ese"></a>-ese</h2><table><thead><tr><th>单词</th><th>释义</th></tr></thead><tbody><tr><td>Chinese</td><td>中国的</td></tr></tbody></table><h2 id="free"><a href="#free" class="headerlink" title="-free"></a>-free</h2><p>不受限制的</p><table><thead><tr><th>单词</th><th>释义</th><th>延伸</th></tr></thead><tbody><tr><td>icefree</td><td>不结冰的</td><td></td></tr><tr><td>carefree</td><td>无忧无虑的</td><td></td></tr><tr><td>duty-free</td><td>免税的，免税商品</td><td>duty 职责，责任，关税</td></tr></tbody></table><h2 id="laden"><a href="#laden" class="headerlink" title="-laden"></a>-laden</h2><p>充满的</p><table><thead><tr><th>单词</th><th>释义</th><th>延伸</th></tr></thead><tbody><tr><td>careladen</td><td>忧心忡忡的</td><td></td></tr></tbody></table><h2 id="ful-1"><a href="#ful-1" class="headerlink" title="-ful"></a>-ful</h2><p>充满的</p><table><thead><tr><th>单词</th><th>释义</th><th>延伸</th></tr></thead><tbody><tr><td>careful</td><td>仔细的，小心的，谨慎的</td><td></td></tr><tr><td>lustful</td><td>好色的</td><td>lust 色欲，欲望</td></tr></tbody></table><h2 id="ic-ical"><a href="#ic-ical" class="headerlink" title="-ic,-ical"></a>-ic,-ical</h2><p>名词、形容词后缀</p><table><thead><tr><th>单词</th><th>释义</th><th>延伸</th></tr></thead><tbody><tr><td>domestic</td><td>本国的，家的</td><td></td></tr><tr><td>atomic</td><td>原子的</td><td></td></tr><tr><td>music</td><td>音乐</td><td></td></tr><tr><td>critic</td><td>批评家</td><td></td></tr><tr><td>political</td><td>政治的</td><td></td></tr></tbody></table><h2 id="ish"><a href="#ish" class="headerlink" title="-ish"></a>-ish</h2><p>有点…的</p><table><thead><tr><th>单词</th><th>释义</th><th>延伸</th></tr></thead><tbody><tr><td>childish</td><td>幼稚的</td><td></td></tr><tr><td>girlish</td><td>少女的</td><td></td></tr><tr><td>stylish</td><td>时尚的</td><td></td></tr></tbody></table><h2 id="ive"><a href="#ive" class="headerlink" title="-ive"></a>-ive</h2><table><thead><tr><th>单词</th><th>释义</th><th>延伸</th></tr></thead><tbody><tr><td>creative</td><td>有创造力的</td><td></td></tr><tr><td>excessive</td><td>过分的，过度的</td><td></td></tr><tr><td>supportive</td><td>支持的，同情的，给予帮助的</td><td></td></tr></tbody></table><h2 id="less"><a href="#less" class="headerlink" title="-less"></a>-less</h2><p>没有…的</p><table><thead><tr><th>单词</th><th>释义</th><th>延伸</th></tr></thead><tbody><tr><td>helpless</td><td>无助的</td><td></td></tr><tr><td>hopeless</td><td>绝望的</td><td></td></tr><tr><td>painless</td><td>无痛的</td><td></td></tr><tr><td>motionless</td><td>一动不动的，静止的</td><td></td></tr></tbody></table><h2 id="like"><a href="#like" class="headerlink" title="-like"></a>-like</h2><table><thead><tr><th>单词</th><th>释义</th><th>延伸</th></tr></thead><tbody><tr><td>childlike</td><td>孩子气的</td><td></td></tr><tr><td>ladylike</td><td>文静的;温文尔雅的;淑女似的</td><td></td></tr></tbody></table><h2 id="ly"><a href="#ly" class="headerlink" title="-ly"></a>-ly</h2><p>形容词+ly=副词<br>名词+ly=形容词</p><table><thead><tr><th>单词</th><th>释义</th></tr></thead><tbody><tr><td>manly</td><td>男人般的</td></tr><tr><td>miserly</td><td>吝啬的</td></tr><tr><td>friendly</td><td>友善的</td></tr><tr><td>daily</td><td>日常的,日报</td></tr><tr><td>scholarly</td><td>文质彬彬的，有学问的</td></tr></tbody></table><h2 id="ous-ious"><a href="#ous-ious" class="headerlink" title="-ous,-ious"></a>-ous,-ious</h2><table><thead><tr><th>单词</th><th>释义</th><th>延伸</th></tr></thead><tbody><tr><td>dangerous</td><td>危险的</td><td></td></tr><tr><td>poisonous</td><td>有毒的</td><td>poison 毒药</td></tr><tr><td>courageous</td><td>勇敢的</td><td>courage 勇气</td></tr><tr><td>luxurious</td><td>奢华的</td><td>luxury 奢侈，奢侈品</td></tr></tbody></table><h2 id="some"><a href="#some" class="headerlink" title="-some"></a>-some</h2><table><thead><tr><th>单词</th><th>释义</th><th>延伸</th></tr></thead><tbody><tr><td>tiresome</td><td>讨厌的，令人厌烦的</td><td>tire 疲惫的，使厌烦的</td></tr><tr><td>troublesome</td><td>adj.麻烦的;讨厌的;令人烦恼的;令人痛苦的</td><td></td></tr><tr><td>handsome</td><td>帅气的，慷慨的</td><td></td></tr></tbody></table><h2 id="ward"><a href="#ward" class="headerlink" title="-ward"></a>-ward</h2><p>朝着某个方向的<br>toward=to,介词</p><h2 id="y"><a href="#y" class="headerlink" title="-y"></a>-y</h2><table><thead><tr><th>单词</th><th>释义</th><th>延伸</th></tr></thead><tbody><tr><td>thirsty</td><td>口渴的</td><td>thirst 口渴</td></tr><tr><td>greedy</td><td>adj.贪婪的</td><td>greed 贪婪</td></tr></tbody></table><h1 id="四-副词后缀"><a href="#四-副词后缀" class="headerlink" title="四.副词后缀"></a>四.副词后缀</h1><h2 id="ly-1"><a href="#ly-1" class="headerlink" title="-ly"></a>-ly</h2><h2 id="ward-wards"><a href="#ward-wards" class="headerlink" title="-ward,-wards"></a>-ward,-wards</h2><h2 id="wise"><a href="#wise" class="headerlink" title="-wise"></a>-wise</h2><p>wise 明智的</p><p>做后缀，表示方式</p><table><thead><tr><th>单词</th><th>释义</th><th>延伸</th></tr></thead><tbody><tr><td>clockwise</td><td>顺时针方向的</td><td></td></tr><tr><td>crabwise</td><td>横向地</td><td>crab 螃蟹</td></tr><tr><td>counterclockwise</td><td>逆时针地</td><td></td></tr></tbody></table><p>表示方面地：</p><table><thead><tr><th>单词</th><th>释义</th><th>延伸</th></tr></thead><tbody><tr><td>otherwise</td><td>其他方面，否则</td><td></td></tr><tr><td>educationwise</td><td>在教育方面</td><td></td></tr></tbody></table>]]></content>
    
    
    <summary type="html">英语后缀</summary>
    
    
    
    <category term="考研英语" scheme="https://utinner.gitee.io/categories/%E8%80%83%E7%A0%94%E8%8B%B1%E8%AF%AD/"/>
    
    
    <category term="考研英语" scheme="https://utinner.gitee.io/tags/%E8%80%83%E7%A0%94%E8%8B%B1%E8%AF%AD/"/>
    
  </entry>
  
  <entry>
    <title>额外的词根</title>
    <link href="https://utinner.gitee.io/2021/11/08/%E9%A2%9D%E5%A4%96%E7%9A%84%E8%AF%8D%E6%A0%B9/"/>
    <id>https://utinner.gitee.io/2021/11/08/%E9%A2%9D%E5%A4%96%E7%9A%84%E8%AF%8D%E6%A0%B9/</id>
    <published>2021-11-08T06:48:59.000Z</published>
    <updated>2021-12-06T09:23:00.942Z</updated>
    
    <content type="html"><![CDATA[<meta name="referrer" content="no-referrer"><h2 id="auto"><a href="#auto" class="headerlink" title="auto-"></a>auto-</h2><p>自己的，自身的，自行的</p><table><thead><tr><th>单词</th><th>释义</th><th>延伸</th></tr></thead><tbody><tr><td>autonomy</td><td>n.自治</td><td></td></tr><tr><td>autonomous</td><td>adj.自治的</td><td></td></tr><tr><td>automobile</td><td>n.汽车=car</td><td>mobile 可移动的</td></tr><tr><td>autograph</td><td>n.亲笔签名</td><td>grapg 图表</td></tr><tr><td>autobiography</td><td>n.自传</td><td>biography 传记作品</td></tr><tr><td>autocrat</td><td>n.专制者，独裁者</td><td></td></tr><tr><td>autocracy</td><td>n.专制政体</td><td>democracy 民主政体</td></tr><tr><td>autoalarm</td><td>n.自动报警器</td><td></td></tr><tr><td>automate</td><td>使自动化</td><td></td></tr><tr><td>automatic</td><td>自动化的</td><td></td></tr><tr><td>autocriticism</td><td>自我批评，自我反省</td><td></td></tr></tbody></table><span id="more"></span><h2 id="bio"><a href="#bio" class="headerlink" title="bio-"></a>bio-</h2><p>生物，生命，生平</p><table><thead><tr><th>单词</th><th>释义</th></tr></thead><tbody><tr><td>biology</td><td>生物学</td></tr><tr><td>biography</td><td>传记</td></tr><tr><td>biosphere</td><td>生物圈</td></tr><tr><td>biochemistry</td><td>生物化学</td></tr><tr><td>chemistry</td><td>化学</td></tr><tr><td>chemist</td><td>专家</td></tr><tr><td>sphere</td><td>范围</td></tr></tbody></table><h2 id="centi-（cente-）"><a href="#centi-（cente-）" class="headerlink" title="centi-（cente-）"></a>centi-（cente-）</h2><p>百分之一，百</p><table><thead><tr><th>单词</th><th>释义</th><th>延伸</th></tr></thead><tbody><tr><td>cent</td><td>美分，分币</td><td></td></tr><tr><td>percentage</td><td>百分比</td><td></td></tr><tr><td>centigrade</td><td>摄氏度</td><td>fahrenheit 华氏度</td></tr><tr><td>gradual</td><td>逐渐的</td><td></td></tr><tr><td>graduate</td><td>毕业</td><td></td></tr><tr><td>centigram</td><td>厘克</td><td>gram 克</td></tr><tr><td>centimeter</td><td>厘米</td><td>meter 米，表</td></tr><tr><td>milimeter</td><td>毫米</td><td></td></tr><tr><td>centilitre</td><td>厘升</td><td>litre 升</td></tr><tr><td>mililitre</td><td>毫升</td><td></td></tr><tr><td>kilometer</td><td>公里</td><td></td></tr><tr><td>kilogram</td><td>公斤</td><td></td></tr><tr><td>century</td><td>世纪，百年</td><td></td></tr><tr><td>centenary</td><td>百年</td><td></td></tr><tr><td>centennial</td><td>百年的，百年纪念</td><td></td></tr><tr><td>centenarian</td><td>百岁老人，人瑞</td><td></td></tr><tr><td>centepede</td><td>蜈蚣</td><td></td></tr></tbody></table><h2 id="cor"><a href="#cor" class="headerlink" title="cor-"></a>cor-</h2><p>一起，共同</p><table><thead><tr><th>单词</th><th>释义</th><th>延伸</th></tr></thead><tbody><tr><td>correct</td><td>vt./adj.正确的</td><td></td></tr><tr><td>eract</td><td>vt./adj.竖起，使直立，竖起的，直立的</td><td></td></tr><tr><td>direct</td><td>adj.直接的；vt.指导</td><td></td></tr><tr><td>rectify</td><td>纠正，矫正</td><td></td></tr><tr><td>rectangle</td><td>矩形</td><td></td></tr><tr><td>tangle</td><td>纠纷，正值，打架</td><td></td></tr><tr><td>correlate</td><td>vt.相关</td><td>correlate A with B  A与B相关联</td></tr><tr><td>relate</td><td>使相关</td><td>be related to 与…相关</td></tr><tr><td>relative</td><td>adj.相对的；n.亲属</td><td></td></tr><tr><td>correspond</td><td>保持通信往来，保持一致</td><td>correspond with 与…保持一致</td></tr><tr><td>correspondence</td><td>处于一致的状态</td><td></td></tr><tr><td>correspondent</td><td>记者，通信员</td><td></td></tr><tr><td>corrupt</td><td>v.使腐败；adj.贪污的</td><td>rupt=break 打碎，使碎裂</td></tr><tr><td>corridor</td><td>走廊</td><td>rid 骑马，骑(交通工具)</td></tr></tbody></table><h2 id="cross"><a href="#cross" class="headerlink" title="cross-"></a>cross-</h2><ul><li>跨越，穿越</li><li>交叉</li></ul><table><thead><tr><th>单词</th><th>释义</th><th>延伸</th></tr></thead><tbody><tr><td>crosscountry</td><td>adj.横跨全国的，越野的</td><td></td></tr><tr><td>country</td><td>国家，乡下，农村</td><td></td></tr><tr><td>crosscheck</td><td>交叉核对</td><td></td></tr><tr><td>crossbred</td><td>杂交的</td><td></td></tr><tr><td>breed</td><td>繁殖</td><td></td></tr><tr><td>crosslegged</td><td>盘腿，翘腿</td><td>leg 腿</td></tr><tr><td>crossroads</td><td>交叉口，十字路口</td><td>at the crossroads 处于人生的十字路口</td></tr><tr><td>crosssection</td><td>横切面，有代表的一部分，典型的一部分，代表</td><td></td></tr></tbody></table><h2 id="equi"><a href="#equi" class="headerlink" title="equi-"></a>equi-</h2><p>等同，相等</p><table><thead><tr><th>单词</th><th>释义</th><th>延伸</th></tr></thead><tbody><tr><td>equator</td><td>赤道</td><td></td></tr><tr><td>equidistant</td><td>adj.等距离的</td><td></td></tr><tr><td>equiform</td><td>形状一样的</td><td>form 形状</td></tr><tr><td>adequate</td><td>足够的，令人满意的</td><td>-ate 形容词后缀</td></tr><tr><td>inadeguate</td><td>不足的</td><td></td></tr></tbody></table><h2 id="hydro"><a href="#hydro" class="headerlink" title="hydro-"></a>hydro-</h2><p>与水相关的（of water）</p><table><thead><tr><th>单词</th><th>释义</th><th>延伸</th></tr></thead><tbody><tr><td>hydroelectric</td><td>水力发电的</td><td></td></tr><tr><td>hydrant</td><td>消防栓</td><td>-ant(ent) 名词后缀</td></tr><tr><td>hydrogen</td><td>氢气</td><td>oxygen 氧气</td></tr><tr><td>hydrophobia</td><td>狂犬病</td><td>phobia 恐惧(症)</td></tr><tr><td>hydroscope</td><td>深水镜</td><td></td></tr><tr><td>telescope</td><td>望远镜</td><td></td></tr><tr><td>microscope</td><td>显微镜</td><td></td></tr><tr><td>hydrobiologist</td><td>水生物学家</td><td></td></tr><tr><td>hydroplane</td><td>水上飞机</td><td></td></tr></tbody></table><h2 id="in"><a href="#in" class="headerlink" title="in-"></a>in-</h2><table><thead><tr><th>单词</th><th>释义</th><th>延伸</th></tr></thead><tbody><tr><td>fame</td><td>名声，名誉</td><td></td></tr><tr><td>infamous</td><td>臭名卓著的</td><td></td></tr><tr><td>invaluable</td><td>无价的</td><td></td></tr><tr><td>invisible</td><td>无形的，看不见的</td><td></td></tr></tbody></table><h2 id="infra"><a href="#infra" class="headerlink" title="infra-"></a>infra-</h2><ul><li>在下面的-&gt;基础的</li></ul><table><thead><tr><th>单词</th><th>释义</th><th>延伸</th></tr></thead><tbody><tr><td>infradig</td><td>有失身份的，不体面的</td><td>dignity 尊严，体面</td></tr><tr><td>ingrastructure</td><td>基础设施</td><td></td></tr></tbody></table><ul><li>beyond 超过</li></ul><table><thead><tr><th>单词</th><th>释义</th></tr></thead><tbody><tr><td>infrared</td><td>红外线的</td></tr><tr><td>ultraviolet</td><td>紫外线的</td></tr></tbody></table><h2 id="mid"><a href="#mid" class="headerlink" title="mid-"></a>mid-</h2><ul><li>middle/midst 中间，中间的</li></ul><table><thead><tr><th>单词</th><th>释义</th><th>延伸</th></tr></thead><tbody><tr><td>midday</td><td>正午</td><td></td></tr><tr><td>midnight</td><td>午夜</td><td></td></tr><tr><td>midtern</td><td>期中的</td><td></td></tr><tr><td>midautumn</td><td>仲秋</td><td></td></tr><tr><td>mid-autumn</td><td>中秋的</td><td>the Moon Festival<br>the Mooncake Festival <br>the Zhongqiu Festival<br>中秋节</td></tr><tr><td>midsummer</td><td>仲夏</td><td></td></tr><tr><td>midwife</td><td>接生婆</td><td></td></tr><tr><td>mediate</td><td>vt.调节</td><td></td></tr><tr><td>the Mediterranean</td><td>地中海</td><td></td></tr></tbody></table><h2 id="proof"><a href="#proof" class="headerlink" title="proof-"></a>proof-</h2><p>proof n.证据  adj.防止…(的)   be proof against…</p><table><thead><tr><th>单词</th><th>释义</th><th>延伸</th></tr></thead><tbody><tr><td>proof</td><td>n.证据  adj.防止…(的)</td><td>be proof against…</td></tr><tr><td>waterproof</td><td>防水的</td><td></td></tr><tr><td>fireproof</td><td>防火的</td><td></td></tr><tr><td>soundproof</td><td>隔音的</td><td></td></tr><tr><td>airproof</td><td>密封的</td><td></td></tr></tbody></table><h2 id="self"><a href="#self" class="headerlink" title="self-"></a>self-</h2><p>自己，自我</p><table><thead><tr><th>单词</th><th>释义</th></tr></thead><tbody><tr><td>selfemployed</td><td>自由职业的</td></tr><tr><td>selftaught</td><td>自修的，自学的</td></tr><tr><td>selfconfident</td><td>自信的</td></tr><tr><td>selfesteem</td><td>自尊</td></tr></tbody></table><h2 id="semi"><a href="#semi" class="headerlink" title="semi-"></a>semi-</h2><p>半</p><table><thead><tr><th>单词</th><th>释义</th><th>延伸</th></tr></thead><tbody><tr><td>semiannual</td><td>adj.每半年的 n.半年刊</td><td>be proof against…</td></tr><tr><td>semicircle</td><td>半圆</td><td></td></tr><tr><td>semiconductor</td><td>半导体</td><td>conduct 传导</td></tr><tr><td>semiconcious</td><td>半清醒的</td><td>concious 觉察的，意识到的</td></tr><tr><td>semitropical</td><td>亚热带的</td><td></td></tr><tr><td>semiofficial</td><td>半官方的</td><td></td></tr><tr><td>semifinal</td><td>半决赛</td><td></td></tr></tbody></table><h2 id="step"><a href="#step" class="headerlink" title="step-"></a>step-</h2><p>迈步，步伐</p><table><thead><tr><th>单词</th><th>释义</th></tr></thead><tbody><tr><td>stepmother</td><td>继母</td></tr><tr><td>stepparents</td><td>继父母</td></tr><tr><td>stepbrother</td><td>隔山兄弟</td></tr><tr><td>stepchildren</td><td>养子女</td></tr><tr><td>sister-in-law</td><td>弟妹，嫂子</td></tr><tr><td>father-in-law</td><td>岳父，老丈人</td></tr><tr><td>mother-in-law</td><td>丈母娘</td></tr></tbody></table><h2 id="syn-sym"><a href="#syn-sym" class="headerlink" title="syn-(sym-)"></a>syn-(sym-)</h2><p>合成，单一，同一，相同</p><table><thead><tr><th>单词</th><th>释义</th><th>延伸</th></tr></thead><tbody><tr><td>synonym</td><td>同义词</td><td></td></tr><tr><td>sympathy</td><td>同情</td><td></td></tr><tr><td>pathy</td><td>心理</td><td></td></tr><tr><td>apathy</td><td>冷漠</td><td></td></tr><tr><td>telepathy</td><td>心灵感应</td><td></td></tr><tr><td>antipathy</td><td>反感</td><td></td></tr><tr><td>synthesis</td><td>合成</td><td>thesis 论文，论点</td></tr><tr><td>symptom</td><td>症状</td><td>tomb 坟墓</td></tr><tr><td>syndicate</td><td>辛迪加;企业联合组织;财团;私人联合会</td><td>托拉斯（英語：Trust）是商业信托的音譯，是指在一个行业（商品领域）中，透过生产企业间的收购、合并以及托管等等形式，由一家公司兼併、包容、控股大量同行业企业来达到企业一体化目的的垄断形式</td></tr><tr><td>symmetry</td><td>对称</td><td></td></tr><tr><td>metey</td><td>meter米</td><td></td></tr></tbody></table><h2 id="tele"><a href="#tele" class="headerlink" title="tele-"></a>tele-</h2><p>远距离的</p><table><thead><tr><th>单词</th><th>释义</th></tr></thead><tbody><tr><td>television</td><td>电视</td></tr><tr><td>telephone</td><td>电话</td></tr><tr><td>telegraph</td><td>电报</td></tr><tr><td>telescope</td><td>望远镜</td></tr><tr><td>telepathy</td><td>心电感应</td></tr><tr><td>telecom</td><td>电信</td></tr><tr><td>teleswitch</td><td>遥控器</td></tr></tbody></table><h2 id="therm-o"><a href="#therm-o" class="headerlink" title="therm(o)-"></a>therm(o)-</h2><p>与热相关的</p><table><thead><tr><th>单词</th><th>释义</th></tr></thead><tbody><tr><td>thermometer</td><td>温度计</td></tr><tr><td>thermostable</td><td>耐热的</td></tr><tr><td>stable</td><td>稳定的</td></tr><tr><td>thermostat</td><td>n.恒温器</td></tr><tr><td>thermos</td><td>热水瓶</td></tr></tbody></table><h2 id="tri"><a href="#tri" class="headerlink" title="tri-"></a>tri-</h2><ul><li>三：tri-</li><li>单一：mono-；uni-</li><li>二(双)：bi-</li></ul><table><thead><tr><th>单词</th><th>释义</th><th>延伸</th></tr></thead><tbody><tr><td>triangle</td><td>三角形</td><td>angel 天使</td></tr><tr><td>tricycle</td><td>人力三轮车=trike</td><td></td></tr><tr><td>triple</td><td>三倍的，三重的，三方的</td><td></td></tr><tr><td>tricolor</td><td>adj.三色的，n.三色旗</td><td></td></tr><tr><td>tricar</td><td>三轮汽车，电动三轮车</td><td></td></tr><tr><td>trilateral</td><td>三边的</td><td></td></tr><tr><td>trilogy</td><td>三部曲</td><td></td></tr><tr><td>trinity</td><td>三位一体，三合一</td><td></td></tr><tr><td>trilingual</td><td>三语的</td><td>lingual 语言的</td></tr><tr><td>Bilingual</td><td>双语的</td><td></td></tr></tbody></table>]]></content>
    
    
    <summary type="html">&lt;meta name=&quot;referrer&quot; content=&quot;no-referrer&quot;&gt;

&lt;h2 id=&quot;auto&quot;&gt;&lt;a href=&quot;#auto&quot; class=&quot;headerlink&quot; title=&quot;auto-&quot;&gt;&lt;/a&gt;auto-&lt;/h2&gt;&lt;p&gt;自己的，自身的，自行的&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;单词&lt;/th&gt;
&lt;th&gt;释义&lt;/th&gt;
&lt;th&gt;延伸&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;&lt;tr&gt;
&lt;td&gt;autonomy&lt;/td&gt;
&lt;td&gt;n.自治&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;autonomous&lt;/td&gt;
&lt;td&gt;adj.自治的&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;automobile&lt;/td&gt;
&lt;td&gt;n.汽车=car&lt;/td&gt;
&lt;td&gt;mobile 可移动的&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;autograph&lt;/td&gt;
&lt;td&gt;n.亲笔签名&lt;/td&gt;
&lt;td&gt;grapg 图表&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;autobiography&lt;/td&gt;
&lt;td&gt;n.自传&lt;/td&gt;
&lt;td&gt;biography 传记作品&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;autocrat&lt;/td&gt;
&lt;td&gt;n.专制者，独裁者&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;autocracy&lt;/td&gt;
&lt;td&gt;n.专制政体&lt;/td&gt;
&lt;td&gt;democracy 民主政体&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;autoalarm&lt;/td&gt;
&lt;td&gt;n.自动报警器&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;automate&lt;/td&gt;
&lt;td&gt;使自动化&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;automatic&lt;/td&gt;
&lt;td&gt;自动化的&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;autocriticism&lt;/td&gt;
&lt;td&gt;自我批评，自我反省&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;&lt;/table&gt;</summary>
    
    
    
    <category term="考研英语" scheme="https://utinner.gitee.io/categories/%E8%80%83%E7%A0%94%E8%8B%B1%E8%AF%AD/"/>
    
    
    <category term="考研英语" scheme="https://utinner.gitee.io/tags/%E8%80%83%E7%A0%94%E8%8B%B1%E8%AF%AD/"/>
    
  </entry>
  
  <entry>
    <title>大作文</title>
    <link href="https://utinner.gitee.io/2021/10/22/%E5%A4%A7%E4%BD%9C%E6%96%87/"/>
    <id>https://utinner.gitee.io/2021/10/22/%E5%A4%A7%E4%BD%9C%E6%96%87/</id>
    <published>2021-10-22T02:46:31.000Z</published>
    <updated>2021-12-06T09:23:00.903Z</updated>
    
    <content type="html"><![CDATA[<meta name="referrer" content="no-referrer"><h1 id="一-历年回顾"><a href="#一-历年回顾" class="headerlink" title="一.历年回顾"></a>一.历年回顾</h1><p>过去10年中，柱状图考了5次，饼状图3次，1年的线形图和表格<br>大纲：还涉及到图表作文的考察</p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>核心就是选显著变化的对象来进行中心思想的选择<br>时间安排：20-25分钟</p><span id="more"></span><h1 id="二-写作及要求"><a href="#二-写作及要求" class="headerlink" title="二.写作及要求"></a>二.写作及要求</h1><h2 id="2-1-审题"><a href="#2-1-审题" class="headerlink" title="2.1 审题"></a>2.1 审题</h2><p>题目要求：</p><ul><li>1.对数据的解读</li><li>2.给出自己的评论</li></ul><p>柱状图是最重要的，在分析过程中，要研究出主要变化的趋势，从积极乐观的角度去分析对国民有益的对象。</p><h2 id="2-2整体要求"><a href="#2-2整体要求" class="headerlink" title="2.2整体要求"></a>2.2整体要求</h2><p>阅卷老师对作文的要求有：</p><ul><li>1.内容；完整性和连贯性</li><li>2.语言：准确性和多样性</li><li>3.语篇：自然段逻辑清晰</li><li>4.卷面的整洁</li><li>5.书写工整</li></ul><h1 id="三-写作技巧"><a href="#三-写作技巧" class="headerlink" title="三.写作技巧"></a>三.写作技巧</h1><h2 id="3-1-字数及段落"><a href="#3-1-字数及段落" class="headerlink" title="3.1 字数及段落"></a>3.1 字数及段落</h2><p>三段，200词左右，不写标题！不写标题！不写标题！</p><h2 id="3-2-段落的句子安排"><a href="#3-2-段落的句子安排" class="headerlink" title="3.2 段落的句子安排"></a>3.2 段落的句子安排</h2><h3 id="第一段："><a href="#第一段：" class="headerlink" title="第一段："></a>第一段：</h3><p>一般写三个句子</p><ul><li>第一句：要具有概括性，对数据的宏观解读<blockquote><p>【bar chart（柱状图）清晰地揭示了xx和xx在xxx方面发生了显著的变化。】</p></blockquote></li><li>第二句：写非主要讨论的那一方的变化。结束之后用However等转折词对第三句进行过渡</li><li>第三句：写主要讨论的那一方的变化。</li></ul><h3 id="第二段："><a href="#第二段：" class="headerlink" title="第二段："></a>第二段：</h3><p>主要写出主要讨论的对象之所以成这种走向变化的原因，一般写四句</p><ul><li>第一句：xxx在xx方面发生这一变化（产生这种趋势）是有各方面原因的（然后延伸出3~4点进行表述）</li><li>第二~第四句从各个角度表达出产生这种趋势（trend、tendency）的原因</li></ul><p>要注意总分逻辑的对应性，可以适当举例子，但是不要暴露缺点</p><p>万能原因：<code>with the accelerating rate of technological innovation in the xxx industry</code></p><h3 id="第三段："><a href="#第三段：" class="headerlink" title="第三段："></a>第三段：</h3><p>（最好写1~2句）作者的主观感受都是在最后一段，涉及到了作者的立场和态度，所以最后一段要体现出我们的立场和态度。<br>两句：评价+结论（或建议）</p><h1 id="四-示例"><a href="#四-示例" class="headerlink" title="四.示例"></a>四.示例</h1><h2 id="4-1-题目"><a href="#4-1-题目" class="headerlink" title="4.1 题目"></a>4.1 题目</h2><img src="/2021/10/22/%E5%A4%A7%E4%BD%9C%E6%96%87/1.png" class title="题目"><h2 id="4-2-作答"><a href="#4-2-作答" class="headerlink" title="4.2 作答"></a>4.2 作答</h2><p>The bar chart above demonstrates clearly that significant changes have taken place with respect to the shares of HuaWei and Apple in the domestics smart phone market.In the light of the given information,we can notice that in a mere five years,the market percentage of Apple has decreased a lot,dropping by 5% from 2012 to 2017.At the same time,however,the share of the national brand HuaWei has witnessed a dramatic rise,jumping startling to 40% in the year of 2017.</p><p>It is not a difficult job to point out some <strong>influences</strong> accounting for these changes.To start,with the accelerating rate of technological <strong>innovation</strong> in the domestic mobile phone industry,more and more cutting-edge technology has been applied to home-made products,thus enhancing their cost performance and competition fundamentally.Furthermore,the fact cannot be ignored that this phenomenon is bound up with the <strong>transformation</strong> of Chinese consumers’ outlook on national brands.Lastly,we may notice,the operator’s ingenious marketing <strong>strategies</strong> and the product <strong>optimization</strong> based on our national conditons,produce a contributing effect as well.</p><p>Considering the arguments above,we can conclude with confidence that this trend is quite <strong>positive</strong> and therefore <strong>beneficial</strong>.And I firmly believe the tendency in question will keep going in the years to come.</p><p>以下文章中有部分错误标识出来了，注意区分</p><h3 id="第一段"><a href="#第一段" class="headerlink" title="第一段"></a>第一段</h3><h4 id="第一句"><a href="#第一句" class="headerlink" title="第一句"></a>第一句</h4><p>The bar chart above <u>demonstrate</u> clearly that significant changes <u>happened</u> with respect to the shares of HuaWei and Apple in the domestics smart phone market.<br>以上柱状图清晰地展示了关于华为和苹果在国内智能手机市场所占份额的显著变化。</p><h5 id="生词"><a href="#生词" class="headerlink" title="生词"></a>生词</h5><table><thead><tr><th>词组</th><th>含义</th></tr></thead><tbody><tr><td>with respect to</td><td>关于</td></tr><tr><td>shares</td><td>份额</td></tr><tr><td>demestic</td><td>国内的</td></tr></tbody></table><h5 id="纠错"><a href="#纠错" class="headerlink" title="纠错"></a>纠错</h5><table><thead><tr><th>错误</th><th>纠正</th></tr></thead><tbody><tr><td>demonstrate</td><td>【动词用法不当】不能用原型，因为是第三人称单数，所以要加s.<strong>demonstrates</strong></td></tr><tr><td>happened</td><td>【用词不当】表示的是偶然发生，在逻辑层面不能分析偶然发生的事件，可以替换为take place或者arise。用过去式也是错的，解读的东西是根据过去的数据解读出现在的变化，所以<strong>时态应该是现在完成时</strong>。应该为：<strong>have taken place / have arisen</strong>.</td></tr></tbody></table><h4 id="第二句"><a href="#第二句" class="headerlink" title="第二句"></a>第二句</h4><p>In the light of the given information,we can notice that in a mere five years,the market percentage of Apple <u>have</u> decreased a lot,dropping by 5% from 2012 to 2017.<br>根据给定的信息，我们可以注意到，在短短五年内，苹果的市场份额大幅下降，从2012年到2017年下降了5%。</p><blockquote><p>逗号之后加伴随状语，所以用动词ing（dropping）</p></blockquote><h5 id="生词-1"><a href="#生词-1" class="headerlink" title="生词"></a>生词</h5><table><thead><tr><th>词组</th><th>含义</th></tr></thead><tbody><tr><td>In the light of</td><td>根据，依据，按照</td></tr><tr><td>a mere</td><td>= merely 仅仅的</td></tr><tr><td>dropping by</td><td>下降了</td></tr></tbody></table><h5 id="纠错-1"><a href="#纠错-1" class="headerlink" title="纠错"></a>纠错</h5><table><thead><tr><th>错误</th><th>纠正</th></tr></thead><tbody><tr><td>have</td><td>【动词用法不当】应该改为<strong>has</strong>，因为主语是parcentage百分率</td></tr></tbody></table><h4 id="第三句"><a href="#第三句" class="headerlink" title="第三句"></a>第三句</h4><p>At the same time,however,the <u>shares</u> of the national brand HuaWei <u>witnessed</u> a dramatic rise,jumping startling to 40% in the year of 2017.<br>然而，与此同时，华为的民族品牌份额大幅上升，在2017年跃升至40%。</p><h5 id="生词-2"><a href="#生词-2" class="headerlink" title="生词"></a>生词</h5><table><thead><tr><th>词组</th><th>含义</th></tr></thead><tbody><tr><td>dramatic</td><td>= a lot 令人吃惊的</td></tr><tr><td>jumping</td><td>激增</td></tr></tbody></table><h5 id="纠错-2"><a href="#纠错-2" class="headerlink" title="纠错"></a>纠错</h5><table><thead><tr><th>错误</th><th>纠正</th></tr></thead><tbody><tr><td>shares</td><td>【名词用法不当】不能用复数，因为是单个品牌的份额，所以用单数share</td></tr><tr><td>witnessed</td><td>【时态问题】应该用现在完成时has witnessed</td></tr></tbody></table><h3 id="第二段"><a href="#第二段" class="headerlink" title="第二段"></a>第二段</h3><h4 id="第一句-1"><a href="#第一句-1" class="headerlink" title="第一句"></a>第一句</h4><p>It is <u>not</u> difficult job to point out some <strong>influences</strong> accounting for these changes.<br>指出以上产生以上变化的影响并不是件难事</p><h5 id="生词-3"><a href="#生词-3" class="headerlink" title="生词"></a>生词</h5><table><thead><tr><th>词组</th><th>含义</th></tr></thead><tbody><tr><td>accoun for</td><td>解释…的原因,解释，说明</td></tr><tr><td>no</td><td>= not any 表否定语气很强</td></tr></tbody></table><h5 id="纠错-3"><a href="#纠错-3" class="headerlink" title="纠错"></a>纠错</h5><table><thead><tr><th>错误</th><th>纠正</th></tr></thead><tbody><tr><td>not</td><td>not应该换成no，或者not后加a，因为job是可数名词</td></tr></tbody></table><h4 id="第二句-1"><a href="#第二句-1" class="headerlink" title="第二句"></a>第二句</h4><p>To start,with the accelerating rate of technological <strong>innovation</strong> in the domestic mobile phone industry,more and more cutting-edge <u>technologies</u> has been applied to home-made products,thus enhancing their cost performance and competition fundamentally.<br>首先，随着国内手机行业技术创新速度的加快，越来越多的尖端技术被应用于国产产品，从而从根本上提高了其性价比和竞争力。</p><h5 id="生词-4"><a href="#生词-4" class="headerlink" title="生词"></a>生词</h5><table><thead><tr><th>词组</th><th>含义</th></tr></thead><tbody><tr><td>accelerating</td><td>加速，加快</td></tr><tr><td>rate</td><td>比率，速度</td></tr><tr><td>technological</td><td>技术的</td></tr><tr><td>innovation</td><td>创新，革新</td></tr><tr><td>cutting-edge</td><td>尖端的，先进的</td></tr><tr><td>thus</td><td>因此，引导结果状语从句的</td></tr><tr><td>enhance</td><td>提高</td></tr><tr><td>innovation</td><td>创新，革新</td></tr><tr><td>cost performance</td><td>性价比</td></tr><tr><td>competition</td><td>竞争力</td></tr><tr><td>fundamentally</td><td>从根本上</td></tr></tbody></table><h5 id="纠错-4"><a href="#纠错-4" class="headerlink" title="纠错"></a>纠错</h5><table><thead><tr><th>错误</th><th>纠正</th></tr></thead><tbody><tr><td>technologies</td><td>通常是用原型，technology</td></tr></tbody></table><h4 id="第三句-1"><a href="#第三句-1" class="headerlink" title="第三句"></a>第三句</h4><p>Furthermore,the fact cannot be ignored that this phenomenon is bound up with the <strong>transformation</strong> of Chinese consumers’ outlook on national brands.（同位语从句，名词分裂）<br>此外，不可忽视的事实是，这一现象与中国消费者民族品牌观的转变有关。</p><h5 id="生词-5"><a href="#生词-5" class="headerlink" title="生词"></a>生词</h5><table><thead><tr><th>词组</th><th>含义</th></tr></thead><tbody><tr><td>Furthermore</td><td>adv.此外；而且；再者</td></tr><tr><td>A is bound up with B</td><td>A和B逻辑上密不可分，前果后因</td></tr><tr><td>bound</td><td>= bind的过去分词</td></tr><tr><td>outlook</td><td>观念</td></tr></tbody></table><h4 id="第四句"><a href="#第四句" class="headerlink" title="第四句"></a>第四句</h4><p>Lastly,we may notice,the operator’s ingenious marketing <strong>strategies</strong> and the product <strong>optimization</strong> based on our national conditons,<u>produces</u> a contributing effect as well.（插入结构和并列）<br>最后，我们注意到，运营人员巧妙的营销策略以及根据我国国情的产品优化，也产生了导致性影响。</p><blockquote><p>双逗原则，可有可无</p></blockquote><h5 id="生词-6"><a href="#生词-6" class="headerlink" title="生词"></a>生词</h5><table><thead><tr><th>词组</th><th>含义</th></tr></thead><tbody><tr><td>ingenious</td><td>adj.精巧的；新颖独特的；巧妙的；心灵手巧的；机敏的；善于创造发明的</td></tr><tr><td>strategy</td><td>策略</td></tr><tr><td>optimization</td><td>n.优化</td></tr><tr><td>optimum</td><td>最佳的；最适宜的；最佳结果；最好的条件</td></tr><tr><td>operator</td><td>运营人员</td></tr><tr><td>ingenious marketing strategies</td><td>巧妙的营销策略</td></tr><tr><td>contributing</td><td>导致性的</td></tr><tr><td>effect</td><td>影响</td></tr></tbody></table><h5 id="纠错-5"><a href="#纠错-5" class="headerlink" title="纠错"></a>纠错</h5><table><thead><tr><th>错误</th><th>纠正</th></tr></thead><tbody><tr><td>produces</td><td>and连接的两个因素，不应该用produces了，应该用<strong>produce</strong></td></tr></tbody></table><h3 id="第三段"><a href="#第三段" class="headerlink" title="第三段"></a>第三段</h3><h4 id="第一句-2"><a href="#第一句-2" class="headerlink" title="第一句"></a>第一句</h4><p>Considering the arguments above,we can conclude with confidence that this trend is quite <strong>positive</strong> and therefore <strong>beneficial</strong>.<br>综上所述，我们可以自信地得出结论，即以上这一趋势是积极乐观的，从而是有益处的。</p><h5 id="生词-7"><a href="#生词-7" class="headerlink" title="生词"></a>生词</h5><table><thead><tr><th>词组</th><th>含义</th></tr></thead><tbody><tr><td>Considering the arguments above</td><td>综上所述</td></tr><tr><td>arguments</td><td>争吵、观点、论据、论点</td></tr><tr><td>conclude that</td><td>得出…结论</td></tr><tr><td>with+n.</td><td>相当于副词，经常做方式状语</td></tr><tr><td>therefore</td><td>表示两者之间的因果关系</td></tr><tr><td>positive</td><td>积极乐观的</td></tr><tr><td>pessimistic</td><td>悲观的</td></tr></tbody></table><h4 id="第二句-2"><a href="#第二句-2" class="headerlink" title="第二句"></a>第二句</h4><p>And I firmly believe the tendency in question will keep going in the years to come.<br>我坚信这个所探讨的趋势将会在未来的岁月继续持续。</p><h5 id="生词-8"><a href="#生词-8" class="headerlink" title="生词"></a>生词</h5><table><thead><tr><th>词组</th><th>含义</th></tr></thead><tbody><tr><td>in question</td><td>所探讨的</td></tr><tr><td>in the years to come.</td><td>在未来的岁月</td></tr></tbody></table>]]></content>
    
    
    <summary type="html">&lt;meta name=&quot;referrer&quot; content=&quot;no-referrer&quot;&gt;

&lt;h1 id=&quot;一-历年回顾&quot;&gt;&lt;a href=&quot;#一-历年回顾&quot; class=&quot;headerlink&quot; title=&quot;一.历年回顾&quot;&gt;&lt;/a&gt;一.历年回顾&lt;/h1&gt;&lt;p&gt;过去10年中，柱状图考了5次，饼状图3次，1年的线形图和表格&lt;br&gt;大纲：还涉及到图表作文的考察&lt;/p&gt;
&lt;h2 id=&quot;总结&quot;&gt;&lt;a href=&quot;#总结&quot; class=&quot;headerlink&quot; title=&quot;总结&quot;&gt;&lt;/a&gt;总结&lt;/h2&gt;&lt;p&gt;核心就是选显著变化的对象来进行中心思想的选择&lt;br&gt;时间安排：20-25分钟&lt;/p&gt;</summary>
    
    
    
    <category term="考研英语" scheme="https://utinner.gitee.io/categories/%E8%80%83%E7%A0%94%E8%8B%B1%E8%AF%AD/"/>
    
    
    <category term="考研英语" scheme="https://utinner.gitee.io/tags/%E8%80%83%E7%A0%94%E8%8B%B1%E8%AF%AD/"/>
    
  </entry>
  
  <entry>
    <title>英语2翻译</title>
    <link href="https://utinner.gitee.io/2021/10/20/%E8%8B%B1%E8%AF%AD2%E7%BF%BB%E8%AF%91/"/>
    <id>https://utinner.gitee.io/2021/10/20/%E8%8B%B1%E8%AF%AD2%E7%BF%BB%E8%AF%91/</id>
    <published>2021-10-20T02:52:42.000Z</published>
    <updated>2021-12-06T09:23:00.919Z</updated>
    
    <content type="html"><![CDATA[<meta name="referrer" content="no-referrer"><h1 id="一-翻译的整体要点"><a href="#一-翻译的整体要点" class="headerlink" title="一.翻译的整体要点"></a>一.翻译的整体要点</h1><ul><li>1.切分长难句，准确的理解原文</li><li>2.按照汉语的习惯，调整语序，翻译成地道的汉语</li></ul><span id="more"></span><h1 id="二-评分细则"><a href="#二-评分细则" class="headerlink" title="二.评分细则"></a>二.评分细则</h1><table><thead><tr><th>档位</th><th>要求</th></tr></thead><tbody><tr><td>第四档（13~15分）</td><td>很好地完成了试题规定的任务，理解准确无误；表达通顺清楚；没有错译、漏译</td></tr><tr><td>第三档（9~12分）</td><td>基本完成了试题规定的任务，理解基本准确，表达比较通顺；没有重大错译、漏译</td></tr><tr><td>第二档（5~8分）</td><td>未能按照要求完成试题规定的任务。理解原文不够准确，表达欠通顺；有明显错译、漏译</td></tr><tr><td>第一档（0~4分）</td><td>未完成试题规定的任务。不能理解原文；表达不通顺，文字支离破碎</td></tr></tbody></table><h1 id="三-翻译的考点-采分点"><a href="#三-翻译的考点-采分点" class="headerlink" title="三.翻译的考点(采分点)"></a>三.翻译的考点(采分点)</h1><h2 id="1-词性转换"><a href="#1-词性转换" class="headerlink" title="1.词性转换"></a>1.词性转换</h2><p>英语中多用名词，汉语中多使用动词。需要转化词性</p><h2 id="2-习语及固定搭配"><a href="#2-习语及固定搭配" class="headerlink" title="2.习语及固定搭配"></a>2.习语及固定搭配</h2><p>放在语境中分析，从论点和论据的关系</p><h2 id="3-后置定语"><a href="#3-后置定语" class="headerlink" title="3.后置定语"></a>3.后置定语</h2><p>比较短的后置定语，直接放在被修饰的东西之前，比较长的后置定语，单独成句。</p><h2 id="4-状语的处理"><a href="#4-状语的处理" class="headerlink" title="4.状语的处理"></a>4.状语的处理</h2><p>12种状语，通常放在句子后面。状语的处理和状语从句的处理是一致的</p><h2 id="5-被动语态"><a href="#5-被动语态" class="headerlink" title="5.被动语态"></a>5.被动语态</h2><p>出现被动语态，发现句子不通顺，需要进行调整为主动语态</p><h2 id="6-省略的还原"><a href="#6-省略的还原" class="headerlink" title="6.省略的还原"></a>6.省略的还原</h2><p>省略的句子要还原成原来的部分</p><h2 id="7-特殊语序（倒装、强调、宾补前置）"><a href="#7-特殊语序（倒装、强调、宾补前置）" class="headerlink" title="7.特殊语序（倒装、强调、宾补前置）"></a>7.特殊语序（倒装、强调、宾补前置）</h2><p>英语中五大基本结构：主谓、主谓宾、主谓双宾、主谓宾+宾补、主系表结构，为了表达这些结构，通常进行一些倒装、强调等调整，遇到这些，语序需要调整回去进行翻译</p><h2 id="8-从句的处理"><a href="#8-从句的处理" class="headerlink" title="8. 从句的处理"></a>8. 从句的处理</h2><h1 id="四-技巧"><a href="#四-技巧" class="headerlink" title="四.技巧"></a>四.技巧</h1><h2 id="1-词义的选取（词性、搭配、语境、逻辑的框定）"><a href="#1-词义的选取（词性、搭配、语境、逻辑的框定）" class="headerlink" title="1.词义的选取（词性、搭配、语境、逻辑的框定）"></a>1.词义的选取（词性、搭配、语境、逻辑的框定）</h2><p>是基本要求，不是考点，但是翻译错了是要扣分的！</p><h3 id="一些生词"><a href="#一些生词" class="headerlink" title="一些生词"></a>一些生词</h3><table><thead><tr><th>单词</th><th>翻译</th></tr></thead><tbody><tr><td>volume</td><td>n.体积；容积；容量；量；额；音量；响度;书；册</td></tr><tr><td>airline</td><td>n.航空公司</td></tr><tr><td>roughly</td><td>adv.粗略地；大致；大约；差不多；粗暴地；粗鲁地；粗糙地；凹凸不平地</td></tr><tr><td>rough</td><td>adj.    粗糙的；不平滑的；高低不平的；不确切的；粗略的；大致的；粗暴的；粗野的；猛烈的<br>n.(高尔夫球场的)长草区；草稿；草图；暴徒；粗野的人<br>v.粗暴地对待;使粗糙;草拟<br>adv.粗鲁地；粗野地</td></tr><tr><td>emission</td><td>排放；(光、热、气等的)发出；射出；排放物；散发物</td></tr><tr><td>sheer</td><td>adj.纯粹的；用来强调事物的大小、程度或数量；完全的；十足的；陡峭的</td></tr><tr><td>intense</td><td>adj.强烈的；激烈的；很大的；严肃紧张的；有强烈感情(或意见、想法)的；尖锐的；热切的</td></tr><tr><td>intensity</td><td>n.强烈；紧张；剧烈；强度；烈度</td></tr><tr><td>extreme</td><td>n.极端；极度；极限；极端不同的感情(或境况、行为方式等)；完全相反的事物<br>adj.极端的；极度的；偏激的；极大的；异乎寻常的；严重的；严厉的；过分的</td></tr><tr><td>suicide</td><td>n.自杀；自杀性行为；自毁；自取灭亡的行为；自杀者</td></tr><tr><td>ruling</td><td>n.裁决；裁定；判决<br>adj.统治的；支配的；占统治地位的<br>v.控制；统治；支配；操纵；决定；裁定；判决<br>rule的现在分词</td></tr><tr><td>pack</td><td>v.收拾(行李)；装(箱)；包装；包裹；(在四周填入软料以)包装(易损物品)<br>n.(商品的)纸包，纸袋，纸盒；(一起供应的)全套东西；一捆，一包(尤指适于携带的东西)</td></tr><tr><td>be packed with</td><td>装满</td></tr><tr><td>tip</td><td>n.提示；尖端；小费；端；尖儿；(装在顶端的)小部件；指点；实用的提示<br>v.(使)倾斜；翻覆；倒出；倾倒；轻触；轻碰</td></tr><tr><td>slim</td><td>adj.苗条的；纤细的；单薄的；微薄的；不足的；少的；小的<br>vi.(靠节食等)变苗条，减肥<br>n.(非洲)艾滋病</td></tr></tbody></table><h2 id="2-词性的转换"><a href="#2-词性的转换" class="headerlink" title="2.词性的转换"></a>2.词性的转换</h2><h3 id="2-1-将名词转译为动词（最高频，仔细阅读，大胆突破）"><a href="#2-1-将名词转译为动词（最高频，仔细阅读，大胆突破）" class="headerlink" title="2.1 将名词转译为动词（最高频，仔细阅读，大胆突破）"></a>2.1 将名词转译为动词（最高频，仔细阅读，大胆突破）</h3><h4 id="2-1-1-例句"><a href="#2-1-1-例句" class="headerlink" title="2.1.1 例句"></a>2.1.1 例句</h4><p>Rockets have found application for the exploration of the universe.<br>火箭已经用于探索宇宙。</p><p>He is good eater and good sleeper.<br>他吃得好，睡得香</p><p>We should not be after only fame and position.<br>我们不应该一味追逐名利。</p><p>He went to the shop for a bottle of sauce.<br>他去商店买了一瓶酱油。</p><h4 id="2-1-2-一些生词"><a href="#2-1-2-一些生词" class="headerlink" title="2.1.2 一些生词"></a>2.1.2 一些生词</h4><table><thead><tr><th>单词</th><th>翻译</th></tr></thead><tbody><tr><td>raw</td><td>adj.未经加工的；生的；原始的；未烹制的；未煮的；自然状态的；未经处理的；未经分析的</td></tr><tr><td>rawness</td><td>生的；半生不熟；未成熟</td></tr><tr><td>materials</td><td>n.布料；材料；原料；(某一活动所需的)材料</td></tr><tr><td>fame</td><td>n.名声；声誉；名气<br>vt.使闻名；使出名；使有名望；&lt;古&gt;盛传</td></tr></tbody></table><h3 id="2-2-转译为名词"><a href="#2-2-转译为名词" class="headerlink" title="2.2 转译为名词"></a>2.2 转译为名词</h3><h4 id="2-2-1-例句"><a href="#2-2-1-例句" class="headerlink" title="2.2.1 例句"></a>2.2.1 例句</h4><p>His paintings are <u>characterized</u> by steady strokes and bright colors.<br>他的绘画特点是笔调沉稳、色彩明快。</p><p>Oxygen is very active <u>chemically</u>.<br>氧气的化学性质很活跃。</p><p>It was <u>officially</u> announced that Paris is invited to the meeting.(两个被动语态，要翻译成主动)<br>官方宣布，巴黎应邀出席会议。</p><h4 id="2-2-2-一些生词"><a href="#2-2-2-一些生词" class="headerlink" title="2.2.2 一些生词"></a>2.2.2 一些生词</h4><table><thead><tr><th>单词</th><th>翻译</th></tr></thead><tbody><tr><td>be characterized by</td><td>以…为特征</td></tr><tr><td>chemically</td><td>adv.（在）化学（性质）上；用化学方法；通过化学作用；从化学上来分析</td></tr><tr><td>officially</td><td>adv.正式地；官方地；公开地；依据法规等；据传；据公布</td></tr></tbody></table><h3 id="2-3-转译为形容词"><a href="#2-3-转译为形容词" class="headerlink" title="2.3 转译为形容词"></a>2.3 转译为形容词</h3><h4 id="2-3-1-例句"><a href="#2-3-1-例句" class="headerlink" title="2.3.1 例句"></a>2.3.1 例句</h4><p>I recognized the <u>absurdity</u> of dealing with them at last.<br>最后，我意识到与他们打交道很荒唐。</p><p><u>Traditionally</u>,there had always been good relations between them.<br>他们拥有传统的友好关系</p><h4 id="2-3-2-一些生词"><a href="#2-3-2-一些生词" class="headerlink" title="2.3.2 一些生词"></a>2.3.2 一些生词</h4><table><thead><tr><th>单词</th><th>翻译</th></tr></thead><tbody><tr><td>absurd</td><td>adj.荒谬的；荒唐的；怪诞不经的；荒诞的事物；悖理的东西</td></tr><tr><td>absurdity</td><td>n.不合理；荒谬；谬论；荒唐的事；荒唐；荒唐行为</td></tr><tr><td>career</td><td>n.生涯，职业，经历，事业</td></tr><tr><td>traditionally</td><td>adv.传统上</td></tr></tbody></table><h3 id="2-4-总结"><a href="#2-4-总结" class="headerlink" title="2.4 总结"></a>2.4 总结</h3><p>英语中多用名词，如果句子按照名词翻译的话不通顺，就需要调整一下，首先要看这个名词它是从形容词变过去的还是从动词变过去的，先将他还原成对应的形容词或者动词。（<strong>名词-&gt;动，形</strong>）<br>如果出现了介词，比较灵活，但是它只能转成动词。具体翻译成什么东西，需要结合语境。（<strong>介词-&gt;动</strong>）<br>如果有副词，如果是一个形容词加上ly变过来的，直接尝试去翻译成形容词，如果翻译成形容词还不通顺，就去尝试翻译成名词。（<strong>副词-&gt;形，名</strong>）</p><h2 id="3-词语的增译、省译（非考点，灵活处理）"><a href="#3-词语的增译、省译（非考点，灵活处理）" class="headerlink" title="3.词语的增译、省译（非考点，灵活处理）"></a>3.词语的增译、省译（非考点，灵活处理）</h2><p>完全是建立在保证这个句子的信息量完整之上，依据表达的需要进行词语的增译、省译，是一种翻译的需要，让句子更加通顺、完整。</p><h3 id="例句"><a href="#例句" class="headerlink" title="例句"></a>例句</h3><p>After the football match,he’s got an important meeting.<br>足球赛结束后，他还要<u>参加</u>一个重要的会议</p><p>It is quite possible that there is life out there in the universe.<br>地球之外的宇宙中很可能还有其他生命。</p><p>If winter comes,can spring be far behind?<br>冬天来了，春天还会远么？</p><h2 id="4-习语及固定搭配"><a href="#4-习语及固定搭配" class="headerlink" title="4.习语及固定搭配"></a>4.习语及固定搭配</h2><p>依赖平时的积累！<br>梳理上下文的逻辑来推断词语含义</p><h3 id="一些固定搭配"><a href="#一些固定搭配" class="headerlink" title="一些固定搭配"></a>一些固定搭配</h3><table><thead><tr><th>词组</th><th>翻译</th></tr></thead><tbody><tr><td>train of thought</td><td>思路，思绪，思维方式</td></tr><tr><td>on the ropes</td><td>岌岌可危，处于困境</td></tr><tr><td>by all accounts</td><td>大家都说，人们都认为</td></tr><tr><td>take a toll on sth</td><td>带来危害，为某事付出代价</td></tr><tr><td></td><td></td></tr></tbody></table><h3 id="一些生词-1"><a href="#一些生词-1" class="headerlink" title="一些生词"></a>一些生词</h3><table><thead><tr><th>单词</th><th>翻译</th></tr></thead><tbody><tr><td>particular</td><td>adj.专指的，特指的(与泛指相对)；不寻常的；格外的；特别的；讲究；挑剔<br>n.(正式记下的)细节；详情；详细资料；详细介绍材料</td></tr><tr><td>emigrate</td><td>vi.移民，移居国外</td></tr><tr><td>catake a surprising toll onreer</td><td>使人吃惊的是</td></tr></tbody></table><h2 id="5-后置定语（永恒的考点）"><a href="#5-后置定语（永恒的考点）" class="headerlink" title="5.后置定语（永恒的考点）"></a>5.后置定语（永恒的考点）</h2><p>包含了定语从句。</p><h3 id="5-1-五种定语从句"><a href="#5-1-五种定语从句" class="headerlink" title="5.1 五种定语从句"></a>5.1 五种定语从句</h3><ul><li>1.形容词短语做后置定语</li><li>2.现在分词短语</li><li>3.过去分词短语</li><li>4.动词不定式短语</li><li>5.介词短语</li></ul><h3 id="5-2-翻译要点"><a href="#5-2-翻译要点" class="headerlink" title="5.2 翻译要点"></a>5.2 翻译要点</h3><ul><li>简单的后置定语直接翻译在被修饰的名词之前</li><li>复杂的后置定语单独翻译</li></ul><h3 id="5-3-例句"><a href="#5-3-例句" class="headerlink" title="5.3 例句"></a>5.3 例句</h3><p>He believes that this very difficulty may have had the compensating advantage <u>of forcing him to think long and intently about every sentence,and thus enabling him to detect errors in reasoning and in his own observations</u>.<br>他认为正是这种（语言表达上的）困难<strong>反而</strong>使他拥有了一种优势，<u>即迫使他长时间地认真思考自己要说的每句话，从而能够发现自己推理和观察中的错误</u></p><h3 id="5-4-一些生词"><a href="#5-4-一些生词" class="headerlink" title="5.4 一些生词"></a>5.4 一些生词</h3><table><thead><tr><th>单词</th><th>翻译</th></tr></thead><tbody><tr><td>pure</td><td>adj.纯净的；纯粹的；纯的；干净的；不含有害物质的；完全的</td></tr><tr><td>certain</td><td>adj.肯定；确定；确实；确信；无疑；(不提及细节时用)某事，某人，某种</td></tr></tbody></table><h2 id="6-被动语态（考点）"><a href="#6-被动语态（考点）" class="headerlink" title="6.被动语态（考点）"></a>6.被动语态（考点）</h2><h3 id="6-1保留主语，直接把被动语态变为主动语态"><a href="#6-1保留主语，直接把被动语态变为主动语态" class="headerlink" title="6.1保留主语，直接把被动语态变为主动语态"></a>6.1保留主语，直接把被动语态变为主动语态</h3><p>Water <u>can be changed</u> from a liquid into a solid.<br>水可以由固体变为液体。</p><p>That young man <u>cannot be relied upon</u>.<br>那个年轻人不可靠。</p><p>Heat and light can be given off <u>by this chemical change</u>.<br>这种化学反应能够释放出光和热。</p><h3 id="6-2将动作的发出者移到前面去"><a href="#6-2将动作的发出者移到前面去" class="headerlink" title="6.2将动作的发出者移到前面去"></a>6.2将动作的发出者移到前面去</h3><p>She is given a pen by her father.<br>她的爸爸给了她一支钢笔。</p><h3 id="6-3加泛指代词做主语：有人、人们、有关部门等"><a href="#6-3加泛指代词做主语：有人、人们、有关部门等" class="headerlink" title="6.3加泛指代词做主语：有人、人们、有关部门等"></a>6.3加泛指代词做主语：有人、人们、有关部门等</h3><p><u>She was seen</u> to enter the building about the time the crime <u>was committed</u>.<br>有人看见他大约在案发时间进入了那座大楼</p><table><thead><tr><th>单词</th><th>翻译</th></tr></thead><tbody><tr><td>crime</td><td>n.罪行；罪；犯罪活动；不法行为；不道德的行为；罪过</td></tr></tbody></table><h3 id="6-4无主语翻译"><a href="#6-4无主语翻译" class="headerlink" title="6.4无主语翻译"></a>6.4无主语翻译</h3><p>Measures have been taken to prevent the epidemic from spreading quickly.<br>已经采取了相关措施防止瘟疫的快速蔓延。</p><table><thead><tr><th>单词</th><th>翻译</th></tr></thead><tbody><tr><td>put an end to</td><td>终止、结束、叫停</td></tr></tbody></table><h3 id="6-5是…的"><a href="#6-5是…的" class="headerlink" title="6.5是…的"></a>6.5是…的</h3><p>The decision to attack was not taken lightly.<br>这个决定不是轻易做出的。<br>printing was introduced into Europe from China.<br>印刷术是从中国引入欧洲的。</p><h3 id="6-6将“被”替换为其他的词"><a href="#6-6将“被”替换为其他的词" class="headerlink" title="6.6将“被”替换为其他的词"></a>6.6将“被”替换为其他的词</h3><p>Problems <u>should be resolved</u> in good time.<br>这些问题应该及时得到解决<br>These challenges <u>need to be addressed</u> by the government.<br>政府需要解决这些问题</p><h3 id="6-7总结"><a href="#6-7总结" class="headerlink" title="6.7总结"></a>6.7总结</h3><ul><li>1.保留主语，变被动为主动</li><li>2.有by的被动，将by后的内容翻译为主语</li><li>3.加泛指代词做主语：有人、人们、有关部门等</li><li>4.直接不要主语</li><li>5.翻译为“是…的”</li><li>6.将“被”替换为其他的词，得到、受到、由…来</li></ul><h2 id="7-省略的补全（重点）"><a href="#7-省略的补全（重点）" class="headerlink" title="7.省略的补全（重点）"></a>7.省略的补全（重点）</h2><p>A fool and his words <u>are soon parted</u>;a man of genius and his money.(省略了谓语动词)<br>愚者不守信，智者不恋财</p><p>Reading <u>makes</u> a full man;conference a ready man;and writing an exact man.<br>阅读使人充实，讨论使人机敏，写作使人严谨</p><p>Formerly,too,pictures <u>had given him</u> considerable(delight),and music very greate,<u>delight</u>.(省略了delight)<br>在以前，绘画和音乐都给他带来了巨大的快乐，</p><p>By all accounts he was a freethinking person,and a courageous one,and I find courage an essential quality for the understanding,let alone the performance,of his work.<br>人们都说，贝多芬是一个思想自由、充满勇气的人，我认为勇气是理解其作品的必要品质，更不必说演奏其作品了。 </p><table><thead><tr><th>单词</th><th>翻译</th></tr></thead><tbody><tr><td>conference</td><td>n.大型会议，商讨</td></tr><tr><td>fool</td><td>n.蠢人，愚人<br>v.欺骗，愚弄</td></tr><tr><td>genius</td><td>n.天才，天赋</td></tr><tr><td>considerable</td><td>adj.相当大的；相当多(或大、重要等)的</td></tr><tr><td>delight</td><td>n.    高兴；愉快；快乐；令人高兴的事；乐事；乐趣</td></tr><tr><td>formerly</td><td>以前；原名；往时</td></tr><tr><td>let alone</td><td>更不用说</td></tr><tr><td>essential</td><td>本质的，必不可少的，极其重要的；基本的；根本的</td></tr></tbody></table><h2 id="8-特殊语序"><a href="#8-特殊语序" class="headerlink" title="8.特殊语序"></a>8.特殊语序</h2><p>翻译题中重难点是宾补前置，其次是倒装，很少考强调。</p><h3 id="8-1-宾补前置"><a href="#8-1-宾补前置" class="headerlink" title="8.1 宾补前置"></a>8.1 宾补前置</h3><p>宾语补足语前置的原理是因为宾语太长了，先把宾补提前到前面去，让读者尽快抓取句子主干，知道这个句子是有个宾补的，然后再去看宾语，宾语后面还跟着很长的后置定语或者宾语从句。</p><p>For example,Tom has as its flagship project a mechanical clock that is designed to still be marking time thousands of years hence.<br>例如，Tom将一台机械钟视为旗舰项目，这台机械钟旨在计时几千年。<br>（先翻译主干，再翻译修饰机械钟的定语从句的部分，have A as B将A看作B,原文中将B提前了：has as B A）</p><p>On the other hand,he did not accept as well founded the charge <u>made by some of his critics that,while he was a good observer,he had no power of reasoning</u>.<br>另一方面，一些批评家指责他，尽管他善于观察，但他不具备推理能力，而他认为这种指责是没有根据的。<br>（that引导同位语从句，后面的部分是对charge的内容再次进行解释说明）</p><p>We have at least <u>drawn nearer the point</u> of admitting that birds should continue as a matter of intrinsic right,regardless of the presence or absence of economic advantage to us.<br>至少，我们已经逐渐开始承认，无论鸟类是否对人类有经济价值，它们天生有权活下去。</p><table><thead><tr><th>词组</th><th>翻译</th></tr></thead><tbody><tr><td>have A as B</td><td>将A看作B</td></tr><tr><td>flagship</td><td>旗舰</td></tr><tr><td>hence</td><td>因果，跟在时间的后面表示在这段时间之后</td></tr><tr><td>charge</td><td>n.(商品和服务所需的)要价，收费；指控；控告；指责；谴责</td></tr><tr><td>accept A as B</td><td>将A看作B</td></tr><tr><td>critic</td><td>n.批评家；评论家；评论员；批评者；挑剔的人</td></tr><tr><td>while</td><td>表示让步、转折</td></tr><tr><td>draw</td><td>v.画；(用铅笔、钢笔或粉笔)描绘；描画；拖(动)；拉(动)；牵引；拖(车)；吸引</td></tr><tr><td>draw sth. near</td><td>接近、靠近某物</td></tr><tr><td>intrinsic</td><td>adj.    固有的；内在的；本身的</td></tr><tr><td>admitting</td><td>v.承认(过错、罪行)；招认；招供；准许…进入(某处)</td></tr><tr><td>right</td><td>adj.    正当；妥当；正确的；真正的；真实的；适当的；正好的；恰当的；右边的<br>adv.    正好；恰好；直接地；一直；径直；完全地；立即；马上；毫不耽搁<br>n.    正当；公正；正义；正确；正当的要求；权利；版权；发行权；右边；右派<br>vt.    使回到正常位置；把…扶正；使…直立；改正；纠正；使恢复正常；向右<br>int.(表示同意或遵从)是的，好的；(引起注意，表示已作好准备或让别人做某事)嗨，喂；(要确保对方同意或明白时说)对不</td></tr><tr><td>regardless of</td><td>引导让步状语，无论，不管；不顾；不理会</td></tr><tr><td></td><td></td></tr></tbody></table><h3 id="8-2-倒装"><a href="#8-2-倒装" class="headerlink" title="8.2 倒装"></a>8.2 倒装</h3><p>Only放在句首，后面+状语（副词/介词短语）引起了句子的部分倒装，将动词的助动词拿到主语的前面来，而原来的实例动词还是放在原地。表示强调。</p><p>Only gradually was the by-product of the institution noted,and only more gradually still was this effect considered as a directive factor in the conduct of the institution.<br>人们只是逐渐地才注意到机构的这一副产品，而人们把作用视为机构运作的指导性因素的过程则更为缓慢。</p><table><thead><tr><th>词组</th><th>翻译</th></tr></thead><tbody><tr><td>institution</td><td>机构</td></tr><tr><td>gradually</td><td>adv.逐步地；逐渐地；渐进地</td></tr><tr><td>factor</td><td>因素，因子</td></tr><tr><td>directive</td><td>n.指示；命令<br>adj.    指示的；指导的</td></tr><tr><td>conduct</td><td>n.    行为；(人在某地或某种情况下的)举止；经营方式；管理方法；实施办法<br>v.实施；执行；引导；组织；安排；指挥(歌唱或音乐演奏)；带领；为(某人)导游</td></tr></tbody></table><h3 id="8-3-强调"><a href="#8-3-强调" class="headerlink" title="8.3 强调"></a>8.3 强调</h3><p>强调：It is … that/who<br>翻译成：正是这个人/事</p><h2 id="9-从句的翻译"><a href="#9-从句的翻译" class="headerlink" title="9.从句的翻译"></a>9.从句的翻译</h2><h3 id="9-1-名词性（主语）从句"><a href="#9-1-名词性（主语）从句" class="headerlink" title="9.1 名词性（主语）从句"></a>9.1 名词性（主语）从句</h3><p>主语从句很长的话，单独翻译，然后用代词指代就好了。</p><p>What he told me was only half-truth.<br>他所告诉我的只是一些半真半假的事情。</p><p><u>Whether the community’s work contributes muth to an overall accumulation of knowledge</u> is doubtful.<br>该领域的工作是否对知识的整体积累做出巨大的贡献，这一点令人质疑。</p><p>It doesn’t make much difference <u>whether he attends the meeting or not</u>.(<strong>it做形式主语,把whether引导的真正的主语挪到主语部分</strong>)<br>他是否参会没太大影响</p><p>It is surely a good thing <u>that the money and attention come to science rather than go elsewhere</u>.<br>金钱和人们的注意力投入到了科学领域而非其他领域，这当然是件好事。</p><h3 id="9-2-宾语从句"><a href="#9-2-宾语从句" class="headerlink" title="9.2 宾语从句"></a>9.2 宾语从句</h3><p>He would remind people <u>that it was devided not only by himself but by lots of others</u>.<br>他会提醒人们这件事不是由他一个人说了算，还有许多其他人一起决定。</p><p><strong>it做宾语,把真正的宾语替换掉it</strong><br>We consider it absolutely necessary that we should open up door to the outside world.<br>我们认为“打开国门，对外开放”是非常必要的。</p><h3 id="9-3-表语从句"><a href="#9-3-表语从句" class="headerlink" title="9.3 表语从句"></a>9.3 表语从句</h3><p><strong>表语从句的翻译方法和宾语从句相同，只不过表语从句的动词是系动词，而宾语从句中的动词是实例动词</strong></p><p>It seems <u>that it is going to snow</u>.<br>似乎马上就要下雨了</p><h3 id="9-4-同位语从句"><a href="#9-4-同位语从句" class="headerlink" title="9.4 同位语从句"></a>9.4 同位语从句</h3><p><strong>属于名词性从句，但是作用跟定语从句相似，是对前面的名词的解释说明，简单的要翻译在被解释说明的名词的前面去；复杂的用逗号隔开，分译</strong></p><p>I disagree with the opinion <u>that a women’s place is in the home</u>.<br>我不认同“女性应该待在家里”这一观点。</p><p>Time was when biologists somewhat overworked the evidence <u>that these creatures preserve the health of game by skilling the physically weak,or that they prey only on “worthless” species</u>.<br>有证据指出，这些（肉食性）动物通过猎杀体弱者维持了猎物种群的健康，或它们猎杀的只是一些“没有价值”的物种，而生物学家在过去有些滥用了这种证据。</p><table><thead><tr><th>词组</th><th>翻译</th></tr></thead><tbody><tr><td>time was when</td><td>曾几何时，曾经有这段时间</td></tr><tr><td>evidence</td><td>证据</td></tr><tr><td>overworked</td><td>过度工作</td></tr></tbody></table><h3 id="9-5-定语从句"><a href="#9-5-定语从句" class="headerlink" title="9.5 定语从句"></a>9.5 定语从句</h3><p><strong>对名词解释说明，翻译方法与同位语从句类似</strong></p><h3 id="9-6-状语从句"><a href="#9-6-状语从句" class="headerlink" title="9.6 状语从句"></a>9.6 状语从句</h3><p>状语从句本身比较简单、清晰。状语从句和状语是同样的处理方法，状语中包含状语从句。<br>状语包含12种，在英语中一般都会放在句末。<br>状语根据类别，翻译时放置的位置是不同的：</p><ul><li>时间、地点、原因、条件、让步、范围状语，在翻译的时候要放在句首；</li><li>方式、程度状语，在翻译的时候放在被修饰的名词或者形容词之前；</li><li>结果、伴随、比较状语，通常放在句末。</li><li>目的状语看情况</li></ul><h3 id="9-7-总结"><a href="#9-7-总结" class="headerlink" title="9.7 总结"></a>9.7 总结</h3><p>对于主从、宾从、表从：</p><ul><li>如果是简单从句，直接就地翻译</li><li>复杂从句，单独翻译，用逗号隔开，用“这”在主句中来代指。</li></ul><h1 id="五-长难句解析"><a href="#五-长难句解析" class="headerlink" title="五.长难句解析"></a>五.长难句解析</h1><p>Beethoven’s habit of increasing the volume with an extreme intensity and then abruptly following it with a sudden soft passage was only rarely used by composers before him. by composers before him.<br>贝多芬习惯用最大限度提高音量，然后突然转入一段轻柔的乐段，在他之前的作曲家几乎没有使用过这种创作习惯。</p><h4 id="1-Beethoven’s-habit-贝多芬的习惯"><a href="#1-Beethoven’s-habit-贝多芬的习惯" class="headerlink" title="1.Beethoven’s habit 贝多芬的习惯"></a>1.Beethoven’s habit 贝多芬的习惯</h4><p>从句首开始，到【habit】结束。结束的原因是因为后面出现了介词P【of】，引导了修饰成分。<br>这里是句子的主语，说明了事情发生的主体是什么。</p><h4 id="2-介词P：of-increasing-the-volume-提高音量"><a href="#2-介词P：of-increasing-the-volume-提高音量" class="headerlink" title="2.介词P：of increasing the volume 提高音量"></a>2.介词P：of increasing the volume 提高音量</h4><p>从介词P【of】开始，到【volume】结束。结束的原因是后面出现了介词P【with】，引导了一段修饰。<br>介词P【of】引导的内容，根据修饰的就近原则，判断其修饰对象为紧靠其左边的【that】，说明了习惯的内容是什么。</p><h4 id="3-介词：with-a-extreme-intensity-用最大强度"><a href="#3-介词：with-a-extreme-intensity-用最大强度" class="headerlink" title="3.介词：with a extreme intensity 用最大强度"></a>3.介词：with a extreme intensity 用最大强度</h4><p>从介词P【with】开始，到【intensity】结束。结束的原因是后面出现了连词and，后面跟了一段内容。<br>这里，介词P【with】引导的内容，根据修饰的就近原则，结合意思，判断其修饰对象是【increasing the volume】，说明了增加音量的方式是什么。</p><p>介词P【with】在表达方式这一概念时，可以转译为动词词性，译为【用…】。</p><h4 id="4-and-then-abruplly-following-it-然后突然跟上"><a href="#4-and-then-abruplly-following-it-然后突然跟上" class="headerlink" title="4.and then abruplly following it 然后突然跟上"></a>4.and then abruplly following it 然后突然跟上</h4><p>从连词【and】开始，到【it】结束，结束的原因是后面出现了介词P【with】，引导了一段修饰。<br>这里，连词【and】连接的内容，观察发现【following】和前面的【increasing】结构类似，再结合其意思，判断这个部分也是用于说明【Beethoven’s habit】是什么。</p><p>连词【and】起到连接的作用，可以省略不译。<br>【it】代指的是前面的【increasing the volume with an extreme intensity】，这里将其译为或者直译为【它】都不太符合中文的表述，因此在不影响理解的情况下，我们也可以省略不译。</p><h4 id="5-with-a-sudden-soft-passage-轻柔的乐段"><a href="#5-with-a-sudden-soft-passage-轻柔的乐段" class="headerlink" title="5.with a sudden soft passage 轻柔的乐段"></a>5.with a sudden soft passage 轻柔的乐段</h4><p>从介词P【with】开始，到【passage】结束。结束的原因是后面出现了谓语动词【was used】。谓语动词的出现标志着前段修饰或内容的结束。<br>这里，介词P【with】引导的内容，根据修饰的就近原则，结合意思，判断其修饰对象为【following it】，说明了怎么样【跟上提高音量】。</p><p>结合上一分句，这里译为【然后突然跟上轻柔的乐段】比直译【然后用轻柔的乐段跟上它】更符合中文的表述。</p><p>【passage】意为【一段】，这里结合句意提到的音乐背景，翻译为【乐段】。</p><h4 id="6-was-only-rarely-used-很少被使用"><a href="#6-was-only-rarely-used-很少被使用" class="headerlink" title="6.was only rarely used 很少被使用"></a>6.was only rarely used 很少被使用</h4><p>这里是整个句子的谓语部分。</p><h4 id="7-介词P：by-composers-before-hime-被他之前的作曲家"><a href="#7-介词P：by-composers-before-hime-被他之前的作曲家" class="headerlink" title="7.介词P：by composers before hime. 被他之前的作曲家"></a>7.介词P：by composers before hime. 被他之前的作曲家</h4><p>从介词P【by】开始，到句末结束。<br>这里，介词P【by】引导的内容，根据修饰的就近原则，判断其修饰对象为紧靠其左边的【was used】，说明了是被谁使用的。<br>注意，这里介词P【before】也符合NPC断句原则，但由于【composers before him】意思比较容易理解，鼓不作刻意拆分。</p><p>结合上一分句，发现是一个被动语态的运用。我们可以还原为主动语态进行翻译【他之前的作曲家很少使用这种方式】，这里，谓语动词前的内容过长，我们将其代称为【这种方式】。为了与前面的内容衔接更加自然，我们可以将【before him】前置，作为一状态，即【，在他之前，】。</p><h4 id="核心知识"><a href="#核心知识" class="headerlink" title="核心知识"></a>核心知识</h4><ul><li>1.看到介词P（of，with，by）要留意，其后面的内容往往起着修饰的作用。</li><li>2.看到连词（and）要留意，后面往往引导了下一段内容。</li><li>3.修饰的就近原则：后置的修饰通常往往用于修饰紧靠其左边的内容，但我们也需要结合意思判断其具体的修饰对象。</li><li>4.谓语动词的出现往往标志着前端修饰或内容的结束。</li></ul>]]></content>
    
    
    <summary type="html">&lt;meta name=&quot;referrer&quot; content=&quot;no-referrer&quot;&gt;

&lt;h1 id=&quot;一-翻译的整体要点&quot;&gt;&lt;a href=&quot;#一-翻译的整体要点&quot; class=&quot;headerlink&quot; title=&quot;一.翻译的整体要点&quot;&gt;&lt;/a&gt;一.翻译的整体要点&lt;/h1&gt;&lt;ul&gt;
&lt;li&gt;1.切分长难句，准确的理解原文&lt;/li&gt;
&lt;li&gt;2.按照汉语的习惯，调整语序，翻译成地道的汉语&lt;/li&gt;
&lt;/ul&gt;</summary>
    
    
    
    <category term="考研英语" scheme="https://utinner.gitee.io/categories/%E8%80%83%E7%A0%94%E8%8B%B1%E8%AF%AD/"/>
    
    
    <category term="考研英语" scheme="https://utinner.gitee.io/tags/%E8%80%83%E7%A0%94%E8%8B%B1%E8%AF%AD/"/>
    
  </entry>
  
  <entry>
    <title>2021新增词汇</title>
    <link href="https://utinner.gitee.io/2021/10/18/2021%E6%96%B0%E5%A2%9E%E8%AF%8D%E6%B1%87/"/>
    <id>https://utinner.gitee.io/2021/10/18/2021%E6%96%B0%E5%A2%9E%E8%AF%8D%E6%B1%87/</id>
    <published>2021-10-18T03:30:41.000Z</published>
    <updated>2021-12-06T09:23:00.644Z</updated>
    
    <content type="html"><![CDATA[<meta name="referrer" content="no-referrer"><h1 id="一-analytics-n-分析学"><a href="#一-analytics-n-分析学" class="headerlink" title="一.analytics n.分析学"></a>一.analytics n.分析学</h1><h2 id="1-基本词义"><a href="#1-基本词义" class="headerlink" title="1.基本词义"></a>1.基本词义</h2><p>n.分析学</p><ul><li>动词形式：analyze</li><li>名词形式：analysis</li></ul><span id="more"></span><p><strong>n.分析学</strong> </p><p>The company uses analytics to help identify where there may be bias in the hiring process.<br>该公司使用分析学来帮助确定招聘过程中可能存在的偏见</p><table><thead><tr><th>词组</th><th>释义</th></tr></thead><tbody><tr><td>identify</td><td>确定，识别</td></tr><tr><td>bias</td><td>偏见</td></tr><tr><td>process</td><td>过程</td></tr></tbody></table><h1 id="二-audit-n-分析学"><a href="#二-audit-n-分析学" class="headerlink" title="二.audit n.分析学"></a>二.audit n.分析学</h1><h2 id="1-基本词义-1"><a href="#1-基本词义-1" class="headerlink" title="1.基本词义"></a>1.基本词义</h2><p>n.审查，检查，审计<br>v.审计，旁听（大学课程）<br>【词根】audi- 听-&gt;旁听-&gt;审查</p><p><strong>n.审计</strong> </p><p>One accounting firm,EY,uses an AI system that helps review contracts during an audit.<br>安永会计事务所使用人工智能系统，在审计期间帮助审查合同。</p><table><thead><tr><th>词组</th><th>释义</th></tr></thead><tbody><tr><td>contract</td><td>n.合同 v.收缩</td></tr></tbody></table><h1 id="三-deliberation-n-细想"><a href="#三-deliberation-n-细想" class="headerlink" title="三.deliberation n.细想"></a>三.deliberation n.细想</h1><h2 id="1-基本词义-2"><a href="#1-基本词义-2" class="headerlink" title="1.基本词义"></a>1.基本词义</h2><p>n.细想，深思熟虑</p><h2 id="2-相关词汇"><a href="#2-相关词汇" class="headerlink" title="2.相关词汇"></a>2.相关词汇</h2><table><thead><tr><th>词组</th><th>释义</th></tr></thead><tbody><tr><td>labor</td><td>劳动</td></tr><tr><td>liberty</td><td>n.自由</td></tr><tr><td>deliberate</td><td>adj.蓄意的，故意的</td></tr></tbody></table><h1 id="四-enact-v-将…制定成法律，通过（法案）"><a href="#四-enact-v-将…制定成法律，通过（法案）" class="headerlink" title="四.enact v.将…制定成法律，通过（法案）"></a>四.enact v.将…制定成法律，通过（法案）</h1><h2 id="1-基本词义-3"><a href="#1-基本词义-3" class="headerlink" title="1.基本词义"></a>1.基本词义</h2><p>v.将…制定成法律，通过（法案）</p><p>That means more battles like the one now going on between the Justice Department and California,which enacted a tough net neutrality law in the wake of the FCC’s abdication.<br>这意味着随之而来的更多的斗争，就像司法部和加州之间正在进行的这场，加州在联邦通信委员会（FCC）失职后，颁布了一项强硬的网络中立法案。</p><table><thead><tr><th>词组</th><th>释义</th></tr></thead><tbody><tr><td>tough</td><td>adj.强硬的，无情的，健壮的，坚强的 n.粗暴的人，暴徒，恶棍 v.坚持，忍受，忍耐</td></tr><tr><td>Act</td><td>法案</td></tr><tr><td>justice</td><td>n.争议，公平，法官，司法</td></tr><tr><td>Justice Department</td><td>司法部</td></tr><tr><td>go on</td><td>进行</td></tr><tr><td>wake</td><td>叫醒</td></tr><tr><td>neutrality</td><td>中立的</td></tr><tr><td>dic-</td><td>【词根】说话</td></tr><tr><td>abdicate</td><td>退位，失职</td></tr></tbody></table><h1 id="五-immunity-n-免疫力"><a href="#五-immunity-n-免疫力" class="headerlink" title="五.immunity n.免疫力"></a>五.immunity n.免疫力</h1><h2 id="1-基本词义-4"><a href="#1-基本词义-4" class="headerlink" title="1.基本词义"></a>1.基本词义</h2><p>n.免疫力</p><table><thead><tr><th>词组</th><th>释义</th></tr></thead><tbody><tr><td>immun(e)</td><td>adj.免疫的</td></tr><tr><td>mu-</td><td>【词根】改变</td></tr><tr><td>mutate</td><td>v.变异；(使)突变；转变；转换</td></tr></tbody></table><h1 id="六-outperform-v-做的比…好，胜过"><a href="#六-outperform-v-做的比…好，胜过" class="headerlink" title="六.outperform v.做的比…好，胜过"></a>六.outperform v.做的比…好，胜过</h1><h2 id="1-基本词义-5"><a href="#1-基本词义-5" class="headerlink" title="1.基本词义"></a>1.基本词义</h2><p>v.做的比…好，胜过</p><p>One company in the Uk,Phrasee,claims their software can outperform humans by up to 10 percent when it comes to email open rates.<br>英国一家名为Phrasee的公司声称，他们的软件在（提升）邮件打开率方面比人类高出10%.</p><table><thead><tr><th>词组</th><th>释义</th></tr></thead><tbody><tr><td>claims</td><td>声称</td></tr></tbody></table><h1 id="七-portraiture-n-肖像，画像技法"><a href="#七-portraiture-n-肖像，画像技法" class="headerlink" title="七.portraiture n.肖像，画像技法"></a>七.portraiture n.肖像，画像技法</h1><h2 id="1-基本词义-6"><a href="#1-基本词义-6" class="headerlink" title="1.基本词义"></a>1.基本词义</h2><p>n.肖像，画像技法</p><table><thead><tr><th>词组</th><th>释义</th></tr></thead><tbody><tr><td>portray</td><td>v.描绘，描写</td></tr></tbody></table><h1 id="八-punctuality-n-准时"><a href="#八-punctuality-n-准时" class="headerlink" title="八.punctuality n.准时"></a>八.punctuality n.准时</h1><h2 id="1-基本词义-7"><a href="#1-基本词义-7" class="headerlink" title="1.基本词义"></a>1.基本词义</h2><p>n.准时</p><p>Buses jump lights almost as frequently as cyclists because the target is punctuality.<br>公交车几乎和骑自行车的人一样频繁闯红灯，因为公交车的目标就是准时。</p><table><thead><tr><th>词组</th><th>释义</th></tr></thead><tbody><tr><td>punch</td><td>v.打，打孔，用拳猛击</td></tr><tr><td>punctual</td><td>adj.按时的；准时的；守时的</td></tr></tbody></table><h1 id="九-sovereignty-n-主权"><a href="#九-sovereignty-n-主权" class="headerlink" title="九.sovereignty n.主权"></a>九.sovereignty n.主权</h1><h2 id="1-基本词义-8"><a href="#1-基本词义-8" class="headerlink" title="1.基本词义"></a>1.基本词义</h2><p>n.主权</p><p>A move back to self-sufficiency,the argument goes,would boost the farming industry,political sovereignty and even the nation’s health.<br>这种观点认为，恢复自给自足将促进农业，增强政治主权，甚至提升国民健康。</p><table><thead><tr><th>词组</th><th>释义</th></tr></thead><tbody><tr><td>sovereign</td><td>n.元首，君主</td></tr><tr><td>-eign</td><td>【词根】统治</td></tr><tr><td>foreign</td><td>a.外国的</td></tr><tr><td>move</td><td>行动，移动</td></tr><tr><td>self-sufficiency</td><td>a.自给自足的</td></tr><tr><td>sufficient</td><td>adj.充足的</td></tr><tr><td>boost</td><td>v.促进 n.提高</td></tr><tr><td>farming</td><td>农事，务农</td></tr><tr><td>industry</td><td>工业，行业</td></tr></tbody></table><h1 id="十-thorny-adj-棘手的"><a href="#十-thorny-adj-棘手的" class="headerlink" title="十.thorny adj.棘手的"></a>十.thorny adj.棘手的</h1><h2 id="1-基本词义-9"><a href="#1-基本词义-9" class="headerlink" title="1.基本词义"></a>1.基本词义</h2><p>adj.棘手的</p><p>The question of who should pay for reskilling is a thorny one.<br>谁应该为学习新技能买单是一个棘手的问题。</p><table><thead><tr><th>词组</th><th>释义</th></tr></thead><tbody><tr><td>thorn</td><td>n.荆棘，刺</td></tr><tr><td>hawthorn</td><td>山楂</td></tr><tr><td>reskilling</td><td>v.(为新工作)学习新技能；教(某人)新技能 <strong>reskill</strong>的现在分词</td></tr></tbody></table><h1 id="十一-vacancy-n-空位，空缺"><a href="#十一-vacancy-n-空位，空缺" class="headerlink" title="十一.vacancy n.空位，空缺"></a>十一.vacancy n.空位，空缺</h1><h2 id="1-基本词义-10"><a href="#1-基本词义-10" class="headerlink" title="1.基本词义"></a>1.基本词义</h2><p>n.空位，空缺</p><table><thead><tr><th>词组</th><th>释义</th></tr></thead><tbody><tr><td>vain</td><td>adj.徒劳的；枉然的；无结果的；自负的；自视过高的</td></tr><tr><td>vacant</td><td>adj.空缺的，未被占用的</td></tr><tr><td>vacuum</td><td>n.真空</td></tr><tr><td>vanish</td><td>v.消失</td></tr></tbody></table><h1 id="十二-vengeance-n-报仇，复仇"><a href="#十二-vengeance-n-报仇，复仇" class="headerlink" title="十二.vengeance n.报仇，复仇"></a>十二.vengeance n.报仇，复仇</h1><h2 id="1-基本词义-11"><a href="#1-基本词义-11" class="headerlink" title="1.基本词义"></a>1.基本词义</h2><p>n.报仇，复仇</p><p>The threat of nationalisation may have been seen off for now,but it will return with a vengeance if the justified anger of passengers is not addressed in short order.<br>目前国有化的威胁可能已经被消除，但如果乘客们该有的愤怒不能在短时间内得到解决，这种威胁将变本加厉地再现。 </p><table><thead><tr><th>词组</th><th>释义</th></tr></thead><tbody><tr><td>revenge</td><td>n.报复，复仇</td></tr><tr><td>threat</td><td>n.威胁；恐吓；凶兆；</td></tr><tr><td>nationalisation</td><td>国有化</td></tr><tr><td>with a vengeance</td><td>程度更深地</td></tr><tr><td>justified</td><td>adj.    正当的；(做某事)有正当理由的；事出有因；合乎情理</td></tr><tr><td>address</td><td>v.解决</td></tr><tr><td>passengers</td><td>乘客</td></tr></tbody></table><h1 id="十三-难句解析"><a href="#十三-难句解析" class="headerlink" title="十三.难句解析"></a>十三.难句解析</h1><table><thead><tr><th>句子</th><th>释义</th></tr></thead><tbody><tr><td>American assumptions and conventions</td><td>美国人的观念和习俗</td></tr><tr><td>would you mind closing the windows?</td><td>你介意去关上窗户吗？</td></tr><tr><td>He is no less than 12.</td><td>他已经12岁了</td></tr><tr><td>He is no more than 12.</td><td>他才12岁</td></tr><tr><td>He is not less than 12.</td><td>他至少12岁了。</td></tr><tr><td>He is not more than 12.</td><td>他最多12岁。</td></tr></tbody></table><h2 id="生词"><a href="#生词" class="headerlink" title="生词"></a>生词</h2><table><thead><tr><th>单词</th><th>释义</th></tr></thead><tbody><tr><td>assume</td><td>承担，假设，观点的提出</td></tr><tr><td>convention</td><td>会议，公约，习俗</td></tr><tr><td>sophisticated</td><td>adj.复杂的；精密的；先进的；老练的；见多识广的；见过世面的；复杂巧妙的；水平高的；在行的</td></tr><tr><td>senior</td><td>资深的</td></tr><tr><td>insufficient</td><td>adj.不充分的；不足的；不够重要的</td></tr><tr><td>remorse</td><td>n.悔恨；自责；懊悔；非常遗憾</td></tr><tr><td>utterance</td><td>n.用言语的表达；说话；话语；言论</td></tr><tr><td>drive a stick shift</td><td>s驾驶手动换挡汽车</td></tr><tr><td>just</td><td>adj.公正的</td></tr><tr><td>period</td><td>n.一段时间，时期</td></tr><tr><td>reinforce</td><td>vt.加剧，加强</td></tr></tbody></table>]]></content>
    
    
    <summary type="html">&lt;meta name=&quot;referrer&quot; content=&quot;no-referrer&quot;&gt;

&lt;h1 id=&quot;一-analytics-n-分析学&quot;&gt;&lt;a href=&quot;#一-analytics-n-分析学&quot; class=&quot;headerlink&quot; title=&quot;一.analytics n.分析学&quot;&gt;&lt;/a&gt;一.analytics n.分析学&lt;/h1&gt;&lt;h2 id=&quot;1-基本词义&quot;&gt;&lt;a href=&quot;#1-基本词义&quot; class=&quot;headerlink&quot; title=&quot;1.基本词义&quot;&gt;&lt;/a&gt;1.基本词义&lt;/h2&gt;&lt;p&gt;n.分析学&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;动词形式：analyze&lt;/li&gt;
&lt;li&gt;名词形式：analysis&lt;/li&gt;
&lt;/ul&gt;</summary>
    
    
    
    <category term="考研英语" scheme="https://utinner.gitee.io/categories/%E8%80%83%E7%A0%94%E8%8B%B1%E8%AF%AD/"/>
    
    
    <category term="考研英语" scheme="https://utinner.gitee.io/tags/%E8%80%83%E7%A0%94%E8%8B%B1%E8%AF%AD/"/>
    
  </entry>
  
  <entry>
    <title>unit_1</title>
    <link href="https://utinner.gitee.io/2021/10/15/unit-1/"/>
    <id>https://utinner.gitee.io/2021/10/15/unit-1/</id>
    <published>2021-10-15T07:48:56.000Z</published>
    <updated>2021-12-06T09:23:00.895Z</updated>
    
    <content type="html"><![CDATA[<meta name="referrer" content="no-referrer"><h1 id="一-work"><a href="#一-work" class="headerlink" title="一.work"></a>一.work</h1><h2 id="1-基本词义"><a href="#1-基本词义" class="headerlink" title="1.基本词义"></a>1.基本词义</h2><p>n. 工作（量）；职业；产品；<strong>著作</strong>，工作地点<br>v. （使）工作有效；<u>产生···作用</u></p><span id="more"></span><p><strong>工作</strong><br>work placement 实习工作 | work skills 技能</p><h2 id="2-相关词汇"><a href="#2-相关词汇" class="headerlink" title="2.相关词汇"></a>2.相关词汇</h2><h3 id="career-n-生涯，经历，职业"><a href="#career-n-生涯，经历，职业" class="headerlink" title="career n.生涯，经历，职业"></a>career n.生涯，经历，职业</h3><p>Asked about his choice of career,he says at high school he considered medical school before switching to electrical engineering.</p><p>被问起他的职业选择，他说高中时自己曾考虑去医学院，后来改修了电气工程。</p><table><thead><tr><th>词组</th><th>释义</th></tr></thead><tbody><tr><td>electrical</td><td>电力的</td></tr><tr><td>engineering</td><td>工程学，工程</td></tr><tr><td>Asked</td><td>省略，He was asked about…；被动语态，他被问到</td></tr><tr><td>medical</td><td>医疗</td></tr><tr><td>switch to</td><td>切换到</td></tr></tbody></table><h3 id="labour-n-劳动力-v-劳动，工作"><a href="#labour-n-劳动力-v-劳动，工作" class="headerlink" title="labour n.劳动力 v.劳动，工作"></a>labour n.劳动力 v.劳动，工作</h3><table><thead><tr><th>词组</th><th>释义</th></tr></thead><tbody><tr><td>labour cost</td><td>劳动力成本</td></tr><tr><td>cover the cost</td><td>支付成本</td></tr><tr><td>child labour</td><td>童工</td></tr></tbody></table><h3 id="work-against-竭力反对，阻碍"><a href="#work-against-竭力反对，阻碍" class="headerlink" title="work against 竭力反对，阻碍"></a>work against 竭力反对，阻碍</h3><h3 id="work-on-sth-从事于"><a href="#work-on-sth-从事于" class="headerlink" title="work on sth 从事于"></a>work on sth 从事于</h3><h3 id="work-out-成功地发展、计算出、找到（解决办法等）"><a href="#work-out-成功地发展、计算出、找到（解决办法等）" class="headerlink" title="work out 成功地发展、计算出、找到（解决办法等）"></a>work out 成功地发展、计算出、找到（解决办法等）</h3><h3 id="workout-锻炼"><a href="#workout-锻炼" class="headerlink" title="workout 锻炼"></a>workout 锻炼</h3><p>she does a 20 minutes workout every morning.</p><p>It turns out that the brain needs exercise in much the same way our muscles do,and the right mental <strong>workout</strong> can significantly improve our basic cognitive functions.</p><p>事实证明大脑跟肌肉一样都需要锻炼。适当的脑力锻炼能显著改善我们的基本认知功能</p><table><thead><tr><th>词组</th><th>释义</th></tr></thead><tbody><tr><td>It turns out</td><td>事实证明是，结果是</td></tr><tr><td>brain</td><td>大脑</td></tr><tr><td>muscles</td><td>肌肉</td></tr><tr><td>significantly</td><td>重要地、重大地、明显地、显著地</td></tr><tr><td>cognitive</td><td>认知的</td></tr><tr><td>recognize</td><td>v.认出</td></tr><tr><td>function</td><td>能力</td></tr></tbody></table><h3 id="workplace-工作场所"><a href="#workplace-工作场所" class="headerlink" title="workplace 工作场所"></a>workplace 工作场所</h3><h3 id="workaholic-工作狂"><a href="#workaholic-工作狂" class="headerlink" title="workaholic 工作狂"></a>workaholic 工作狂</h3><p>-aholic：…狂</p><h3 id="workstation-工作台"><a href="#workstation-工作台" class="headerlink" title="workstation 工作台"></a>workstation 工作台</h3><p>Tom senior anthropologist at the Center in Nick Mass,ensure that 90 percent <u>of the uniforms and workstations</u> fit recruits without alteration.</p><p>Tom是Nick Mass中心的资深人类学家，他确保百分之90的制服和工作台适合新兵，而不需要改动。</p><table><thead><tr><th>词组</th><th>释义</th></tr></thead><tbody><tr><td>anthropologist</td><td>人类学家</td></tr><tr><td>anthrop-</td><td>【词根】人</td></tr><tr><td>-ology</td><td>【词根】与学科相关</td></tr><tr><td>anthropology</td><td>人类学</td></tr><tr><td>senior</td><td>高级的，年龄大的，资深的</td></tr><tr><td>ensure</td><td>v.确保，确定</td></tr><tr><td>insure</td><td>v.投保</td></tr><tr><td>percent</td><td>百分比</td></tr><tr><td>uni-</td><td>【词根】统一</td></tr><tr><td>uniform</td><td>制服</td></tr><tr><td>fit</td><td>适合</td></tr><tr><td>recruits</td><td>v.招聘。n.新人</td></tr><tr><td>alteration</td><td>n.改变</td></tr><tr><td>alter</td><td>v.改变 = change</td></tr></tbody></table><p>of+名词=形容词的作用。介词结构的形式之一</p><h3 id="patchwork-拼凑物，混合物"><a href="#patchwork-拼凑物，混合物" class="headerlink" title="patchwork 拼凑物，混合物"></a>patchwork 拼凑物，混合物</h3><p>Tom’s <em>back and forth</em> on clean air is a pointed reminder of the limits to the <strong>patchwork</strong>,city-by-city approach that characterises efforts on air pollution across Europe,Britain very much included.</p><p>Tom在清洁空气上的摇摆不定的态度直接表明了这个不一致的方法（不同的城市采取不同的措施）的局限性；这种方法体现了欧洲各国（特别是英国）在治理空气污染方面的努力。</p><table><thead><tr><th>词组</th><th>释义</th></tr></thead><tbody><tr><td>back and forth</td><td>n.前前后后、后后前前的摇摆不定的态度</td></tr><tr><td>back</td><td>向后</td></tr><tr><td>forth</td><td>向前</td></tr><tr><td>remind</td><td>v.提醒</td></tr><tr><td>reminder</td><td>n.提醒，APP中的提醒事项</td></tr><tr><td>pointed</td><td>直接的</td></tr><tr><td>limit</td><td>局限</td></tr><tr><td>approach</td><td>v.接近。n.方法</td></tr><tr><td>characterises</td><td>以…为特点，名词变动词用</td></tr><tr><td>character</td><td>n.性格，特点</td></tr><tr><td>effort</td><td>n.努力</td></tr><tr><td>effort on sth</td><td>在某方面的努力</td></tr></tbody></table><h1 id="二-state"><a href="#二-state" class="headerlink" title="二.state"></a>二.state</h1><h2 id="1-基本词义-1"><a href="#1-基本词义-1" class="headerlink" title="1.基本词义"></a>1.基本词义</h2><p>n. 洲；国家；<u>政府；状态；情况</u><br>v. 声明，规定<br>adg. 洲的，国家的，国有的</p><h3 id="n-洲"><a href="#n-洲" class="headerlink" title="n.洲"></a>n.洲</h3><p>The bills are similar to a measure recently adopted in California,which last year became the first <strong>state</strong> to require gender quotas for private companies.<br>这些提案类似于最近被加利福尼亚州所采用的一项措施,去年加利福尼亚州成为第一个要求对私营公司实行性别配额的洲</p><table><thead><tr><th>词组</th><th>释义</th></tr></thead><tbody><tr><td>bills</td><td>比尔盖茨，账单，<em>提案</em></td></tr><tr><td>be similar to</td><td>与…相似</td></tr><tr><td>measure</td><td>措施，方法</td></tr><tr><td>recently</td><td>最近的</td></tr><tr><td>adopted</td><td>采纳，采用，收养</td></tr><tr><td>require</td><td>需要，要求</td></tr><tr><td>quotas</td><td>配额</td></tr></tbody></table><h3 id="n-国家"><a href="#n-国家" class="headerlink" title="n.国家"></a>n.国家</h3><ul><li>head of states 国家元首</li></ul><h3 id="n-政府"><a href="#n-政府" class="headerlink" title="n.政府"></a>n.政府</h3><ul><li>a new State Department Building 美国国务院大楼</li></ul><h3 id="n-状态"><a href="#n-状态" class="headerlink" title="n.状态"></a>n.状态</h3><p>one of these urges has to do with creating a <strong>state</strong> of peace in the midst of turbulence,a “still point of the turning world” to borrow a phrase from Tom.<br>其中一个迫切需求和在动荡中创造一种和平状态有关，借用Tom的话就是“一个旋转世界的静止点”。</p><table><thead><tr><th>词组</th><th>释义</th></tr></thead><tbody><tr><td>urges</td><td>n.冲动 v.督促，力劝</td></tr><tr><td>have to do with</td><td>与…有关</td></tr><tr><td>middle</td><td>中间</td></tr><tr><td>turbulence</td><td>动荡，颠簸</td></tr><tr><td>borrow a phrase from</td><td>借用…的话</td></tr></tbody></table><h3 id="adj-洲的"><a href="#adj-洲的" class="headerlink" title="adj.洲的"></a>adj.洲的</h3><p>federal,state and local government 联邦、洲和地方政府</p><p>federal 联邦的</p><h2 id="2-相关词汇-1"><a href="#2-相关词汇-1" class="headerlink" title="2.相关词汇"></a>2.相关词汇</h2><h3 id="表示方法的单词"><a href="#表示方法的单词" class="headerlink" title="表示方法的单词"></a>表示方法的单词</h3><ul><li>way</li><li>method</li><li>approach</li><li>measure</li></ul><h3 id="sector-n-部门"><a href="#sector-n-部门" class="headerlink" title="sector n.部门"></a>sector n.部门</h3><h3 id="fund-n-基金，专款"><a href="#fund-n-基金，专款" class="headerlink" title="fund n.基金，专款"></a>fund n.基金，专款</h3><h3 id="approve-v-批准，同意"><a href="#approve-v-批准，同意" class="headerlink" title="approve v.批准，同意"></a>approve v.批准，同意</h3><h3 id="stated-adj-规定的，声明的"><a href="#stated-adj-规定的，声明的" class="headerlink" title="stated adj.规定的，声明的"></a>stated adj.规定的，声明的</h3><h3 id="statement-n-声明，表述"><a href="#statement-n-声明，表述" class="headerlink" title="statement n.声明，表述"></a>statement n.声明，表述</h3><h3 id="overstate-v-过分夸大"><a href="#overstate-v-过分夸大" class="headerlink" title="overstate v.过分夸大"></a>overstate v.过分夸大</h3><h3 id="status-n-地位，身份，情形，状态，重要性"><a href="#status-n-地位，身份，情形，状态，重要性" class="headerlink" title="status n.地位，身份，情形，状态，重要性"></a>status n.地位，身份，情形，状态，重要性</h3><p>Other scientists perform the specialised work of peer review also for free,because it is a central element in the acquisition of <strong>status</strong> and the production of scientific knowledge.<br>其他科学家们也会免费进行专门的同行专家评审工作，因为这是获得学术地位和产出科学知识的核心要素 </p><table><thead><tr><th>词组</th><th>释义</th></tr></thead><tbody><tr><td>perform</td><td>v.表演，履行，执行，演出，工作，运转</td></tr><tr><td>do sth. for free</td><td>免费做…</td></tr><tr><td>n.-free</td><td>无…的</td></tr><tr><td>specialised</td><td>adj.专门的，专业的</td></tr><tr><td>specialize</td><td>v.专门研究</td></tr><tr><td>specialist</td><td>n.专家</td></tr><tr><td>peer</td><td>同辈人，同行</td></tr><tr><td>pair</td><td>一对，一双</td></tr><tr><td>review</td><td>评审，评论</td></tr><tr><td>central</td><td>adj.中心的</td></tr><tr><td>acquire</td><td>v.获得</td></tr><tr><td>acquisition</td><td>n.获得</td></tr></tbody></table><ul><li>immigration status 移民身份</li><li>financial status 财务状况</li></ul><h3 id="statute-n-成文法，法令，法规"><a href="#statute-n-成文法，法令，法规" class="headerlink" title="statute n.成文法，法令，法规"></a>statute n.成文法，法令，法规</h3><table><thead><tr><th>词组</th><th>释义</th></tr></thead><tbody><tr><td>conflicted with</td><td>与…冲突，矛盾</td></tr><tr><td>enforcement</td><td>n.执行</td></tr><tr><td>enforce</td><td>v.强制执行</td></tr><tr><td>prior</td><td>adj.优先的</td></tr><tr><td>priorities</td><td>n.优先权</td></tr><tr><td>even if</td><td>即使 = even though</td></tr><tr><td>even though</td><td>即使</td></tr><tr><td>as if</td><td>好像 = as though</td></tr><tr><td>as though</td><td>好像</td></tr><tr><td>comply with</td><td>遵守，服从 = <strong>conform to</strong> = <strong>obey</strong></td></tr><tr><td>comply with…to the letter</td><td>严格遵守</td></tr></tbody></table><h3 id="statue-n-雕像，塑像"><a href="#statue-n-雕像，塑像" class="headerlink" title="statue n.雕像，塑像"></a>statue n.雕像，塑像</h3><h3 id="estate-n-地产，庄园，住宅区，遗产"><a href="#estate-n-地产，庄园，住宅区，遗产" class="headerlink" title="estate n.地产，庄园，住宅区，遗产"></a>estate n.地产，庄园，住宅区，遗产</h3><h3 id="real-estate-房地产"><a href="#real-estate-房地产" class="headerlink" title="real estate 房地产"></a>real estate 房地产</h3><h3 id="statistical-adj-统计的，统计学的"><a href="#statistical-adj-统计的，统计学的" class="headerlink" title="statistical adj.统计的，统计学的"></a>statistical adj.统计的，统计学的</h3><p>Most journals are weak in <strong>statistical</strong> review,and this damages the quality of what they publish.<br>大多数期刊在统计数据审查方面都很薄弱，而这损害了其出版物的质量。</p><table><thead><tr><th>词组</th><th>释义</th></tr></thead><tbody><tr><td>journal</td><td>n.期刊，出版物，杂志</td></tr><tr><td>be weak in</td><td>在某方面弱</td></tr><tr><td>damage</td><td>v.损害</td></tr><tr><td>publish</td><td>出版，发行</td></tr><tr><td>the quality of</td><td>…的质量</td></tr><tr><td>what…</td><td>可以引导一个名词性的东西</td></tr></tbody></table><h3 id="statistic-n-统计数字，统计资料"><a href="#statistic-n-统计数字，统计资料" class="headerlink" title="statistic n.统计数字，统计资料"></a>statistic n.统计数字，统计资料</h3><h3 id="stationary-adj-静止不动的，固定的"><a href="#stationary-adj-静止不动的，固定的" class="headerlink" title="stationary adj.静止不动的，固定的"></a>stationary adj.静止不动的，固定的</h3>]]></content>
    
    
    <summary type="html">&lt;meta name=&quot;referrer&quot; content=&quot;no-referrer&quot;&gt;

&lt;h1 id=&quot;一-work&quot;&gt;&lt;a href=&quot;#一-work&quot; class=&quot;headerlink&quot; title=&quot;一.work&quot;&gt;&lt;/a&gt;一.work&lt;/h1&gt;&lt;h2 id=&quot;1-基本词义&quot;&gt;&lt;a href=&quot;#1-基本词义&quot; class=&quot;headerlink&quot; title=&quot;1.基本词义&quot;&gt;&lt;/a&gt;1.基本词义&lt;/h2&gt;&lt;p&gt;n. 工作（量）；职业；产品；&lt;strong&gt;著作&lt;/strong&gt;，工作地点&lt;br&gt;v. （使）工作有效；&lt;u&gt;产生···作用&lt;/u&gt;&lt;/p&gt;</summary>
    
    
    
    <category term="考研英语" scheme="https://utinner.gitee.io/categories/%E8%80%83%E7%A0%94%E8%8B%B1%E8%AF%AD/"/>
    
    
    <category term="考研英语" scheme="https://utinner.gitee.io/tags/%E8%80%83%E7%A0%94%E8%8B%B1%E8%AF%AD/"/>
    
  </entry>
  
  <entry>
    <title>定时任务</title>
    <link href="https://utinner.gitee.io/2021/09/17/%E5%AE%9A%E6%97%B6%E4%BB%BB%E5%8A%A1/"/>
    <id>https://utinner.gitee.io/2021/09/17/%E5%AE%9A%E6%97%B6%E4%BB%BB%E5%8A%A1/</id>
    <published>2021-09-17T06:03:19.000Z</published>
    <updated>2021-12-06T09:23:00.905Z</updated>
    
    <content type="html"><![CDATA[<meta name="referrer" content="no-referrer"><h1 id="一-定时任务解决方案"><a href="#一-定时任务解决方案" class="headerlink" title="一.定时任务解决方案"></a>一.定时任务解决方案</h1><h2 id="1-单机JVM"><a href="#1-单机JVM" class="headerlink" title="1.单机JVM"></a>1.单机JVM</h2><h3 id="1-1-Thread-Thread-sleep方法"><a href="#1-1-Thread-Thread-sleep方法" class="headerlink" title="1.1 Thread-Thread.sleep方法"></a>1.1 Thread-Thread.sleep方法</h3><figure class="highlight arduino"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="type">static</span> <span class="type">void</span> <span class="title">main</span><span class="params">(<span class="type">String</span>[] args)</span> </span>&#123;</span><br><span class="line">    Runnable runnable = () -&gt; &#123;</span><br><span class="line">        <span class="keyword">while</span> (<span class="literal">true</span>)&#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                Thread.<span class="built_in">sleep</span>(<span class="number">2000</span>);</span><br><span class="line">                System.out.<span class="built_in">println</span>(<span class="string">&quot;定时任务执行&quot;</span>);</span><br><span class="line">            &#125; <span class="built_in">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                e.<span class="built_in">printStackTrace</span>();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;;</span><br><span class="line">    Thread thread = <span class="keyword">new</span> <span class="built_in">Thread</span>(runnable);</span><br><span class="line">    thread.<span class="built_in">start</span>();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>其实定时任务就是死循环</p><span id="more"></span><h3 id="1-2-TimerTask-java-util"><a href="#1-2-TimerTask-java-util" class="headerlink" title="1.2 TimerTask(java.util)"></a>1.2 TimerTask(java.util)</h3><figure class="highlight axapta"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TimerTaskDemo</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">static</span> <span class="built_in">int</span> <span class="keyword">count</span> = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> main(String[] args) &#123;</span><br><span class="line"></span><br><span class="line">        TimerTask timerTask = <span class="keyword">new</span> TimerTask() &#123;</span><br><span class="line">            @Override</span><br><span class="line">            <span class="keyword">public</span> <span class="keyword">void</span> run() &#123;</span><br><span class="line">                <span class="keyword">count</span> = <span class="keyword">count</span> + <span class="number">1</span>;</span><br><span class="line">                System.out.println(<span class="string">&quot;定时任务执行&quot;</span> + <span class="keyword">count</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;;</span><br><span class="line">        Timer timer = <span class="keyword">new</span> Timer();</span><br><span class="line">        <span class="built_in">long</span> delay = <span class="number">0</span>;</span><br><span class="line">        <span class="built_in">long</span> period = <span class="number">1000</span>;</span><br><span class="line">        timer.scheduleAtFixedRate(timerTask,delay,period);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="1-3-线程池execute-ScheduledExecutorService"><a href="#1-3-线程池execute-ScheduledExecutorService" class="headerlink" title="1.3 线程池execute(ScheduledExecutorService)"></a>1.3 线程池execute(ScheduledExecutorService)</h3><figure class="highlight axapta"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ScheduledExecutorServiceDemo</span> &#123;</span><br><span class="line">    <span class="keyword">static</span> <span class="built_in">int</span> <span class="keyword">count</span> = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> main(String[] args) &#123;</span><br><span class="line">        Runnable runnable = () -&gt; &#123;</span><br><span class="line">            <span class="keyword">count</span>++;</span><br><span class="line">            System.out.println(<span class="string">&quot;定时任务执行&quot;</span> + <span class="keyword">count</span>);</span><br><span class="line">        &#125;;</span><br><span class="line">        ScheduledExecutorService scheduledExecutorService = <span class="keyword">new</span> ScheduledThreadPoolExecutor(<span class="number">5</span>);</span><br><span class="line">        <span class="comment">//第二个参数为首次执行的延迟时间，第三个参数为定时任务执行的间隔时间</span></span><br><span class="line">        scheduledExecutorService.scheduleAtFixedRate(runnable,<span class="number">1</span>,<span class="number">3</span>, TimeUnit.SECONDS);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="1-4-Springboot中的定时任务注解-Schedule"><a href="#1-4-Springboot中的定时任务注解-Schedule" class="headerlink" title="1.4 Springboot中的定时任务注解@Schedule"></a>1.4 Springboot中的定时任务注解@Schedule</h3><p>添加注解：</p><figure class="highlight less"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">@SpringBootApplication</span></span><br><span class="line"><span class="variable">@EnableScheduling</span></span><br><span class="line">public class TinnerDemoApplication &#123;</span><br><span class="line">    <span class="selector-tag">public</span> <span class="selector-tag">static</span> <span class="selector-tag">void</span> <span class="selector-tag">main</span>(String[] args) &#123;</span><br><span class="line">        <span class="selector-tag">SpringApplication</span><span class="selector-class">.run</span>(TinnerDemoApplication.class, args);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>定义job：</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">BootJob</span> &#123;</span><br><span class="line">    <span class="comment">//表示每两秒执行一次</span></span><br><span class="line">    <span class="meta">@Scheduled</span>(cron = <span class="string">&quot;0/2 * * * * ? &quot;</span>)</span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">void</span> <span class="title function_">cronJob</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="title class_">System</span>.<span class="property">out</span>.<span class="title function_">println</span>(<span class="keyword">new</span> <span class="title class_">Date</span>() + <span class="string">&quot; 执行中。。。。&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="1-5-使用quartz-第三方框架"><a href="#1-5-使用quartz-第三方框架" class="headerlink" title="1.5 使用quartz-第三方框架"></a>1.5 使用quartz-第三方框架</h3><p>定义job：</p><figure class="highlight aspectj"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyJob</span> <span class="keyword">implements</span> <span class="title">Job</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">void</span> <span class="title">execute</span><span class="params">(JobExecutionContext jobExecutionContext)</span> <span class="keyword">throws</span> JobExecutionException </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;定时执行quartz任务&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>测试：</p><figure class="highlight reasonml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">public <span class="keyword">class</span> TestQuartz &#123;</span><br><span class="line">    public static void main(String<span class="literal">[]</span> args) throws SchedulerException &#123;</span><br><span class="line">        <span class="comment">//创建调度器工厂</span></span><br><span class="line">        SchedulerFactory schedulerFactory = <span class="keyword">new</span> <span class="constructor">StdSchedulerFactory()</span>;</span><br><span class="line">        <span class="comment">//从工厂中获取调度器实例</span></span><br><span class="line">        Scheduler scheduler = schedulerFactory.get<span class="constructor">Scheduler()</span>;</span><br><span class="line">        <span class="comment">//创建jobDetail</span></span><br><span class="line">        JobDetail jb = <span class="module-access"><span class="module"><span class="identifier">JobBuilder</span>.</span></span><span class="keyword">new</span><span class="constructor">Job(MyJob.<span class="params">class</span>)</span></span><br><span class="line">                .<span class="keyword">with</span><span class="constructor">Description(<span class="string">&quot;this is a ran job&quot;</span>)</span> <span class="comment">//job的描述</span></span><br><span class="line">                .<span class="keyword">with</span><span class="constructor">Identity(<span class="string">&quot;ranJob&quot;</span>,<span class="string">&quot;ranGroup&quot;</span>)</span></span><br><span class="line">                .build<span class="literal">()</span>;</span><br><span class="line">        <span class="comment">//3秒后启动任务</span></span><br><span class="line">        long time = <span class="module-access"><span class="module"><span class="identifier">System</span>.</span></span>current<span class="constructor">TimeMillis()</span> + <span class="number">3</span>* <span class="number">1000L</span>;</span><br><span class="line">        <span class="comment">//创建trigger</span></span><br><span class="line">        Trigger t = <span class="module-access"><span class="module"><span class="identifier">TriggerBuilder</span>.</span></span><span class="keyword">new</span><span class="constructor">Trigger()</span></span><br><span class="line">                .start<span class="constructor">At(<span class="params">new</span> Date(<span class="params">time</span>)</span>)</span><br><span class="line">                .<span class="keyword">with</span><span class="constructor">Schedule(CronScheduleBuilder.<span class="params">cronSchedule</span>(<span class="string">&quot;0/2 * * * * ?&quot;</span>)</span>)</span><br><span class="line">                .build<span class="literal">()</span>;</span><br><span class="line">        scheduler.schedule<span class="constructor">Job(<span class="params">jb</span>, <span class="params">t</span>)</span>;</span><br><span class="line">        scheduler.start<span class="literal">()</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="2-传统分布式系统"><a href="#2-传统分布式系统" class="headerlink" title="2.传统分布式系统"></a>2.传统分布式系统</h2><h3 id="xxl-job"><a href="#xxl-job" class="headerlink" title="xxl-job"></a>xxl-job</h3>]]></content>
    
    
    <summary type="html">&lt;meta name=&quot;referrer&quot; content=&quot;no-referrer&quot;&gt;

&lt;h1 id=&quot;一-定时任务解决方案&quot;&gt;&lt;a href=&quot;#一-定时任务解决方案&quot; class=&quot;headerlink&quot; title=&quot;一.定时任务解决方案&quot;&gt;&lt;/a&gt;一.定时任务解决方案&lt;/h1&gt;&lt;h2 id=&quot;1-单机JVM&quot;&gt;&lt;a href=&quot;#1-单机JVM&quot; class=&quot;headerlink&quot; title=&quot;1.单机JVM&quot;&gt;&lt;/a&gt;1.单机JVM&lt;/h2&gt;&lt;h3 id=&quot;1-1-Thread-Thread-sleep方法&quot;&gt;&lt;a href=&quot;#1-1-Thread-Thread-sleep方法&quot; class=&quot;headerlink&quot; title=&quot;1.1 Thread-Thread.sleep方法&quot;&gt;&lt;/a&gt;1.1 Thread-Thread.sleep方法&lt;/h3&gt;&lt;figure class=&quot;highlight arduino&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;type&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;type&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(&lt;span class=&quot;type&quot;&gt;String&lt;/span&gt;[] args)&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    Runnable runnable = () -&amp;gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;while&lt;/span&gt; (&lt;span class=&quot;literal&quot;&gt;true&lt;/span&gt;)&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &lt;span class=&quot;keyword&quot;&gt;try&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                Thread.&lt;span class=&quot;built_in&quot;&gt;sleep&lt;/span&gt;(&lt;span class=&quot;number&quot;&gt;2000&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                System.out.&lt;span class=&quot;built_in&quot;&gt;println&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;&amp;quot;定时任务执行&amp;quot;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &amp;#125; &lt;span class=&quot;built_in&quot;&gt;catch&lt;/span&gt; (InterruptedException e) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                e.&lt;span class=&quot;built_in&quot;&gt;printStackTrace&lt;/span&gt;();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    Thread thread = &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;built_in&quot;&gt;Thread&lt;/span&gt;(runnable);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    thread.&lt;span class=&quot;built_in&quot;&gt;start&lt;/span&gt;();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;其实定时任务就是死循环&lt;/p&gt;</summary>
    
    
    
    <category term="Java" scheme="https://utinner.gitee.io/categories/Java/"/>
    
    
    <category term="定时任务" scheme="https://utinner.gitee.io/tags/%E5%AE%9A%E6%97%B6%E4%BB%BB%E5%8A%A1/"/>
    
  </entry>
  
  <entry>
    <title>Java非阻塞IO和异步IO</title>
    <link href="https://utinner.gitee.io/2021/07/22/Java%E9%9D%9E%E9%98%BB%E5%A1%9EIO%E5%92%8C%E5%BC%82%E6%AD%A5IO/"/>
    <id>https://utinner.gitee.io/2021/07/22/Java%E9%9D%9E%E9%98%BB%E5%A1%9EIO%E5%92%8C%E5%BC%82%E6%AD%A5IO/</id>
    <published>2021-07-22T06:28:17.000Z</published>
    <updated>2021-12-06T09:23:00.734Z</updated>
    
    <content type="html"><![CDATA[<meta name="referrer" content="no-referrer"><h1 id="一-阻塞模式-IO"><a href="#一-阻塞模式-IO" class="headerlink" title="一. 阻塞模式 IO"></a>一. 阻塞模式 IO</h1><p>使用 Java NIO 包组成一个简单的客户端-服务端网络通讯所需要的 <code>ServerSocketChannel</code>、<code>SocketChannel</code> 和 <code>Buffer</code> 这里整合一下它们，给出一个完整的可运行的例子：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Server</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line"></span><br><span class="line">        <span class="type">ServerSocketChannel</span> <span class="variable">serverSocketChannel</span> <span class="operator">=</span> ServerSocketChannel.open();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 监听 8080 端口进来的 TCP 链接</span></span><br><span class="line">        serverSocketChannel.socket().bind(<span class="keyword">new</span> <span class="title class_">InetSocketAddress</span>(<span class="number">8080</span>));</span><br><span class="line"></span><br><span class="line">        <span class="keyword">while</span> (<span class="literal">true</span>) &#123;</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 这里会阻塞，直到有一个请求的连接进来</span></span><br><span class="line">            <span class="type">SocketChannel</span> <span class="variable">socketChannel</span> <span class="operator">=</span> serverSocketChannel.accept();</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 开启一个新的线程来处理这个请求，然后在 while 循环中继续监听 8080 端口</span></span><br><span class="line">            <span class="type">SocketHandler</span> <span class="variable">handler</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">SocketHandler</span>(socketChannel);</span><br><span class="line">            <span class="keyword">new</span> <span class="title class_">Thread</span>(handler).start();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><span id="more"></span><p>这里看一下新的线程需要做什么，SocketHandler：</p><figure class="highlight arduino"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SocketHandler</span> implements Runnable &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> SocketChannel socketChannel;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">SocketHandler</span><span class="params">(SocketChannel socketChannel)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.socketChannel = socketChannel;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @<span class="function">Override</span></span><br><span class="line"><span class="function">    <span class="keyword">public</span> <span class="type">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        ByteBuffer buffer = ByteBuffer.<span class="built_in">allocate</span>(<span class="number">1024</span>);</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">// 将请求数据读入 Buffer 中</span></span><br><span class="line">            <span class="type">int</span> num;</span><br><span class="line">            <span class="keyword">while</span> ((num = socketChannel.<span class="built_in">read</span>(buffer)) &gt; <span class="number">0</span>) &#123;</span><br><span class="line">                <span class="comment">// 读取 Buffer 内容之前先 flip 一下</span></span><br><span class="line">                buffer.<span class="built_in">flip</span>();</span><br><span class="line"></span><br><span class="line">                <span class="comment">// 提取 Buffer 中的数据</span></span><br><span class="line">                <span class="type">byte</span>[] bytes = <span class="keyword">new</span> <span class="type">byte</span>[num];</span><br><span class="line">                buffer.<span class="built_in">get</span>(bytes);</span><br><span class="line"></span><br><span class="line">                <span class="type">String</span> re = <span class="keyword">new</span> <span class="built_in">String</span>(bytes, <span class="string">&quot;UTF-8&quot;</span>);</span><br><span class="line">                System.out.<span class="built_in">println</span>(<span class="string">&quot;收到请求：&quot;</span> + re);</span><br><span class="line"></span><br><span class="line">                <span class="comment">// 回应客户端</span></span><br><span class="line">                ByteBuffer writeBuffer = ByteBuffer.<span class="built_in">wrap</span>((<span class="string">&quot;我已经收到你的请求，你的请求内容是：&quot;</span> + re).<span class="built_in">getBytes</span>());</span><br><span class="line">                socketChannel.<span class="built_in">write</span>(writeBuffer);</span><br><span class="line"></span><br><span class="line">                buffer.<span class="built_in">clear</span>();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="built_in">catch</span> (IOException e) &#123;</span><br><span class="line">            IOUtils.<span class="built_in">closeQuietly</span>(socketChannel);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>最后，贴一下客户端 SocketChannel 的使用，客户端比较简单：</p><figure class="highlight arduino"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SocketChannelTest</span> &#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="type">static</span> <span class="type">void</span> <span class="title">main</span><span class="params">(<span class="type">String</span>[] args)</span> throws IOException </span>&#123;</span><br><span class="line">        SocketChannel socketChannel = SocketChannel.<span class="built_in">open</span>();</span><br><span class="line">        socketChannel.<span class="built_in">connect</span>(<span class="keyword">new</span> <span class="built_in">InetSocketAddress</span>(<span class="string">&quot;localhost&quot;</span>, <span class="number">8080</span>));</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 发送请求</span></span><br><span class="line">        ByteBuffer buffer = ByteBuffer.<span class="built_in">wrap</span>(<span class="string">&quot;1234567890&quot;</span>.<span class="built_in">getBytes</span>());</span><br><span class="line">        socketChannel.<span class="built_in">write</span>(buffer);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 读取响应</span></span><br><span class="line">        ByteBuffer readBuffer = ByteBuffer.<span class="built_in">allocate</span>(<span class="number">1024</span>);</span><br><span class="line">        <span class="type">int</span> num;</span><br><span class="line">        <span class="keyword">if</span> ((num = socketChannel.<span class="built_in">read</span>(readBuffer)) &gt; <span class="number">0</span>) &#123;</span><br><span class="line">            readBuffer.<span class="built_in">flip</span>();</span><br><span class="line"></span><br><span class="line">            <span class="type">byte</span>[] re = <span class="keyword">new</span> <span class="type">byte</span>[num];</span><br><span class="line">            readBuffer.<span class="built_in">get</span>(re);</span><br><span class="line"></span><br><span class="line">            <span class="type">String</span> result = <span class="keyword">new</span> <span class="built_in">String</span>(re, <span class="string">&quot;UTF-8&quot;</span>);</span><br><span class="line">            System.out.<span class="built_in">println</span>(<span class="string">&quot;返回值: &quot;</span> + result);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>上面介绍的阻塞模式的代码应该很好理解：来一个新的连接，我们就新开一个线程来处理这个连接，之后的操作全部由那个线程来完成。</p><p>那么，这个模式下的性能瓶颈在哪里呢？</p><ul><li>首先，每次来一个连接都开一个新的线程这肯定是不合适的。当活跃连接数在几十几百的时候当然是可以这样做的，但如果活跃连接数是几万几十万的时候，这么多线程明显就不行了。每个线程都需要一部分内存，内存会被迅速消耗，同时，线程切换的开销非常大。</li><li>其次，阻塞操作在这里也是一个问题。首先，accept() 是一个阻塞操作，当 accept() 返回的时候，代表有一个连接可以使用了，我们这里是马上就新建线程来处理这个 SocketChannel 了，但是，但是这里不代表对方就将数据传输过来了。所以，SocketChannel#read 方法将阻塞，等待数据，明显这个等待是不值得的。同理，write 方法也需要等待通道可写才能执行写入操作，这边的阻塞等待也是不值得的。</li></ul><h1 id="二-非阻塞-IO"><a href="#二-非阻塞-IO" class="headerlink" title="二. 非阻塞 IO"></a>二. 非阻塞 IO</h1><p>说完了阻塞模式的使用及其缺点以后，我们这里就可以介绍非阻塞 IO 了。</p><p>非阻塞 IO 的核心在于使用一个 <code>Selector</code> 来管理多个通道，可以是 <code>SocketChannel</code>，也可以是 <code>ServerSocketChannel</code>，将各个通道注册到 <code>Selector</code> 上，指定监听的事件。</p><p>之后可以只用一个线程来轮询这个 Selector，看看上面是否有通道是准备好的，当通道准备好可读或可写，然后才去开始真正的读写，这样速度就很快了。我们就完全没有必要给每个通道都起一个线程。</p><p>NIO 中 Selector 是对底层操作系统实现的一个抽象，管理通道状态其实都是底层系统实现的，这里简单介绍下在不同系统下的实现。</p><ul><li><p>select：上世纪 80 年代就实现了，它支持注册 FD_SETSIZE(1024) 个 socket，在那个年代肯定是够用的，不过现在嘛，肯定是不行了。</p></li><li><p>poll：1997 年，出现了 poll 作为 select 的替代者，最大的区别就是，poll 不再限制 socket 数量。</p></li></ul><p>select 和 poll 都有一个共同的问题，那就是<strong>它们都只会告诉你有几个通道准备好了，但是不会告诉你具体是哪几个通道</strong>。所以，一旦知道有通道准备好以后，自己还是需要进行一次扫描，显然这个不太好，通道少的时候还行，一旦通道的数量是几十万个以上的时候，扫描一次的时间都很可观了，时间复杂度 O(n)。所以，后来才催生了以下实现。</p><ul><li>epoll：2002 年随 Linux 内核 2.5.44 发布，epoll 能直接返回具体的准备好的通道，时间复杂度 O(1)。</li></ul><p>除了 Linux 中的 epoll，2000 年 FreeBSD 出现了<strong>Kqueue</strong>，还有就是，Solaris 中有 <strong>/dev/poll</strong>。</p><blockquote><p>前面说了那么多实现，但是没有出现 Windows，Windows 平台的非阻塞 IO 使用 select，我们也不必觉得 Windows 很落后，在 Windows 中 IOCP 提供的异步 IO 是比较强大的。</p></blockquote><p>我们回到 Selector，毕竟 JVM 就是这么一个屏蔽底层实现的平台，我们面向 Selector 编程就可以了。</p><p>来一个可运行的实例代码：</p><figure class="highlight reasonml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line">public <span class="keyword">class</span> SelectorServer &#123;</span><br><span class="line"></span><br><span class="line">    public static void main(String<span class="literal">[]</span> args) throws IOException &#123;</span><br><span class="line">        Selector selector = <span class="module-access"><span class="module"><span class="identifier">Selector</span>.</span></span><span class="keyword">open</span><span class="literal">()</span>;</span><br><span class="line"></span><br><span class="line">        ServerSocketChannel server = <span class="module-access"><span class="module"><span class="identifier">ServerSocketChannel</span>.</span></span><span class="keyword">open</span><span class="literal">()</span>;</span><br><span class="line">        server.socket<span class="literal">()</span>.bind(<span class="keyword">new</span> <span class="constructor">InetSocketAddress(8080)</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 将其注册到 Selector 中，监听 OP_ACCEPT 事件</span></span><br><span class="line">        server.configure<span class="constructor">Blocking(<span class="params">false</span>)</span>;</span><br><span class="line">        server.register(selector, SelectionKey.OP_ACCEPT);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">while</span> (<span class="literal">true</span>) &#123;</span><br><span class="line">            <span class="built_in">int</span> readyChannels = selector.select<span class="literal">()</span>;</span><br><span class="line">            <span class="keyword">if</span> (readyChannels<span class="operator"> == </span><span class="number">0</span>) &#123;</span><br><span class="line">                continue;</span><br><span class="line">            &#125;</span><br><span class="line">            Set&lt;SelectionKey&gt; readyKeys = selector.selected<span class="constructor">Keys()</span>;</span><br><span class="line">            <span class="comment">// 遍历</span></span><br><span class="line">            Iterator&lt;SelectionKey&gt; iterator = readyKeys.iterator<span class="literal">()</span>;</span><br><span class="line">            <span class="keyword">while</span> (iterator.has<span class="constructor">Next()</span>) &#123;</span><br><span class="line">                SelectionKey key = iterator.next<span class="literal">()</span>;</span><br><span class="line">                iterator.remove<span class="literal">()</span>;</span><br><span class="line"></span><br><span class="line">                <span class="keyword">if</span> (key.is<span class="constructor">Acceptable()</span>) &#123;</span><br><span class="line">                    <span class="comment">// 有已经接受的新的到服务端的连接</span></span><br><span class="line">                    SocketChannel socketChannel = server.accept<span class="literal">()</span>;</span><br><span class="line"></span><br><span class="line">                    <span class="comment">// 有新的连接并不代表这个通道就有数据，</span></span><br><span class="line">                    <span class="comment">// 这里将这个新的 SocketChannel 注册到 Selector，监听 OP_READ 事件，等待数据</span></span><br><span class="line">                    socketChannel.configure<span class="constructor">Blocking(<span class="params">false</span>)</span>;</span><br><span class="line">                    socketChannel.register(selector, SelectionKey.OP_READ);</span><br><span class="line">                &#125; <span class="keyword">else</span> <span class="keyword">if</span> (key.is<span class="constructor">Readable()</span>) &#123;</span><br><span class="line">                    <span class="comment">// 有数据可读</span></span><br><span class="line">                    <span class="comment">// 上面一个 if 分支中注册了监听 OP_READ 事件的 SocketChannel</span></span><br><span class="line">                    SocketChannel socketChannel = (SocketChannel) key.channel<span class="literal">()</span>;</span><br><span class="line">                    ByteBuffer readBuffer = <span class="module-access"><span class="module"><span class="identifier">ByteBuffer</span>.</span></span>allocate(<span class="number">1024</span>);</span><br><span class="line">                    <span class="built_in">int</span> num = socketChannel.read(readBuffer);</span><br><span class="line">                    <span class="keyword">if</span> (num &gt; <span class="number">0</span>) &#123;</span><br><span class="line">                        <span class="comment">// 处理进来的数据...</span></span><br><span class="line">                        <span class="module-access"><span class="module"><span class="identifier">System</span>.</span></span>out.println(<span class="string">&quot;收到数据：&quot;</span> + <span class="keyword">new</span> <span class="constructor">String(<span class="params">readBuffer</span>.<span class="params">array</span>()</span>).trim<span class="literal">()</span>);</span><br><span class="line">                        ByteBuffer buffer = <span class="module-access"><span class="module"><span class="identifier">ByteBuffer</span>.</span></span>wrap(<span class="string">&quot;返回给客户端的数据...&quot;</span>.get<span class="constructor">Bytes()</span>);</span><br><span class="line">                        socketChannel.write(buffer);</span><br><span class="line">                    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (num<span class="operator"> == </span>-<span class="number">1</span>) &#123;</span><br><span class="line">                        <span class="comment">// -1 代表连接已经关闭</span></span><br><span class="line">                        socketChannel.close<span class="literal">()</span>;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="三-NIO"><a href="#三-NIO" class="headerlink" title="三. NIO"></a>三. NIO</h1><p>More New IO，或称 NIO.2，随 JDK 1.7 发布，包括了引入异步 IO 接口和 Paths 等文件访问接口。</p><p>异步这个词，我想对于绝大多数开发者来说都很熟悉，很多场景下我们都会使用异步。</p><p>通常，我们会有一个线程池用于执行异步任务，提交任务的线程将任务提交到线程池就可以立马返回，不必等到任务真正完成。如果想要知道任务的执行结果，通常是通过传递一个回调函数的方式，任务结束后去调用这个函数。</p><p>同样的原理，Java 中的异步 IO 也是一样的，都是由一个线程池来负责执行任务，然后使用回调或自己去查询结果。</p><p>大部分开发者都知道为什么要这么设计了，这里再啰嗦一下。<strong>异步 IO 主要是为了控制线程数量，减少过多的线程带来的内存消耗和 CPU 在线程调度上的开销</strong>。</p><p>在 Unix/Linux 等系统中，JDK 使用了并发包中的线程池来管理任务，具体可以查看 AsynchronousChannelGroup 的源码。</p><p>在 Windows 操作系统中，提供了一个叫做 <a href="https://docs.microsoft.com/zh-cn/windows/win32/fileio/i-o-completion-ports?redirectedfrom=MSDN">I/O Completion Ports</a> 的方案，通常简称为 IOCP，操作系统负责管理线程池，其性能非常优异，所以<strong>在 Windows 中 JDK 直接采用了 IOCP 的支持</strong>，使用系统支持，把更多的操作信息暴露给操作系统，也使得操作系统能够对我们的 IO 进行一定程度的优化。</p><blockquote><p>在 Linux 中其实也是有异步 IO 系统实现的，但是限制比较多，性能也一般，所以 JDK 采用了自建线程池的方式。</p></blockquote><p>本文还是以实用为主，想要了解更多信息请自行查找其他资料，下面对 Java 异步 IO 进行实践性的介绍。</p><p>总共有三个类需要我们关注，分别是 <code>AsynchronousSocketChannel</code>，<code>AsynchronousServerSocketChannel</code> 和 <code>AsynchronousFileChannel</code>。</p><p><strong>Java 异步 IO 提供了两种使用方式，分别是返回 Future 实例和使用回调函数。</strong></p><h2 id="3-1-返回-Future-实例"><a href="#3-1-返回-Future-实例" class="headerlink" title="3.1 返回 Future 实例"></a>3.1 返回 Future 实例</h2><p>返回 java.util.concurrent.Future 实例的方式我们应该很熟悉，JDK 线程池就是这么使用的。Future 接口的几个方法语义在这里也是通用的，这里先做简单介绍。</p><ul><li>future.isDone();<br>判断操作是否已经完成，包括了正常完成、异常抛出、取消</li><li>future.cancel(true);<br>取消操作，方式是中断。参数 true 说的是，即使这个任务正在执行，也会进行中断。</li><li>future.isCancelled();<br>是否被取消，只有在任务正常结束之前被取消，这个方法才会返回 true</li><li>future.get();<br>这是我们的老朋友，获取执行结果，阻塞。</li><li>future.get(10, TimeUnit.SECONDS);<br>如果上面的 get() 方法的阻塞你不满意，那就设置个超时时间。</li></ul><h2 id="3-2-提供-CompletionHandler-回调函数"><a href="#3-2-提供-CompletionHandler-回调函数" class="headerlink" title="3.2 提供 CompletionHandler 回调函数"></a>3.2 提供 CompletionHandler 回调函数</h2><p>java.nio.channels.CompletionHandler 接口定义：</p><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="symbol">CompletionHandler</span>&lt;<span class="symbol">V</span>,<span class="symbol">A</span>&gt; &#123;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">void</span> completed(V result, A attachment);</span><br><span class="line"></span><br><span class="line">    <span class="built_in">void</span> failed(Throwable exc, A attachment);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>注意，参数上有个 attachment，虽然不常用，我们可以在各个支持的方法中传递这个参数值</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="title class_">AsynchronousServerSocketChannel</span> listener = <span class="title class_">AsynchronousServerSocketChannel</span>.<span class="title function_">open</span>().<span class="title function_">bind</span>(<span class="literal">null</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// accept 方法的第一个参数可以传递 attachment</span></span><br><span class="line">listener.<span class="title function_">accept</span>(attachment, <span class="keyword">new</span> <span class="title class_">CompletionHandler</span>&lt;<span class="title class_">AsynchronousSocketChannel</span>, <span class="title class_">Object</span>&gt;() &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">void</span> <span class="title function_">completed</span>(<span class="params"></span></span><br><span class="line"><span class="params">      AsynchronousSocketChannel client, <span class="built_in">Object</span> attachment</span>) &#123;</span><br><span class="line">          <span class="comment">// </span></span><br><span class="line">      &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">void</span> <span class="title function_">failed</span>(<span class="params">Throwable exc, <span class="built_in">Object</span> attachment</span>) &#123;</span><br><span class="line">          <span class="comment">// </span></span><br><span class="line">      &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h2 id="3-3-AsynchronousFileChannel"><a href="#3-3-AsynchronousFileChannel" class="headerlink" title="3.3 AsynchronousFileChannel"></a>3.3 AsynchronousFileChannel</h2><p>首先，我们就来关注异步的文件 IO，前面我们说了，文件 IO 在所有的操作系统中都不支持非阻塞模式，但是我们可以对文件 IO 采用异步的方式来提高性能。</p><p>下面，我会介绍 AsynchronousFileChannel 里面的一些重要的接口，都很简单。<br>实例化：</p><figure class="highlight reasonml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">AsynchronousFileChannel channel = <span class="module-access"><span class="module"><span class="identifier">AsynchronousFileChannel</span>.</span></span><span class="keyword">open</span>(<span class="module-access"><span class="module"><span class="identifier">Paths</span>.</span></span>get(<span class="string">&quot;/Users/hongjie/test.txt&quot;</span>));</span><br></pre></td></tr></table></figure><p>一旦实例化完成，我们就可以着手准备将数据读入到 Buffer 中：</p><figure class="highlight mipsasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">ByteBuffer </span><span class="keyword">buffer </span>= <span class="keyword">ByteBuffer.allocate(1024);</span></span><br><span class="line"><span class="keyword"></span>Future&lt;Integer&gt; result = channel.read(<span class="keyword">buffer, </span><span class="number">0</span>);</span><br></pre></td></tr></table></figure><blockquote><p>异步文件通道的读操作和写操作都需要提供一个文件的开始位置，文件开始位置为 0</p></blockquote><p>除了使用返回 Future 实例的方式，也可以采用回调函数进行操作，接口如下：</p><figure class="highlight aspectj"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> &lt;A&gt; <span class="function"><span class="keyword">void</span> <span class="title">read</span><span class="params">(ByteBuffer dst,</span></span></span><br><span class="line"><span class="params"><span class="function">                              <span class="keyword">long</span> position,</span></span></span><br><span class="line"><span class="params"><span class="function">                              A attachment,</span></span></span><br><span class="line"><span class="params"><span class="function">                              CompletionHandler&lt;Integer,? <span class="keyword">super</span> A&gt; <span class="keyword">handler</span>)</span></span>;</span><br></pre></td></tr></table></figure><p>顺便也贴一下写操作的两个版本的接口：</p><figure class="highlight aspectj"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> Future&lt;Integer&gt; write(ByteBuffer src, <span class="keyword">long</span> position);</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> &lt;A&gt; <span class="function"><span class="keyword">void</span> <span class="title">write</span><span class="params">(ByteBuffer src,</span></span></span><br><span class="line"><span class="params"><span class="function">                               <span class="keyword">long</span> position,</span></span></span><br><span class="line"><span class="params"><span class="function">                               A attachment,</span></span></span><br><span class="line"><span class="params"><span class="function">                               CompletionHandler&lt;Integer,? <span class="keyword">super</span> A&gt; <span class="keyword">handler</span>)</span></span>;</span><br></pre></td></tr></table></figure><p>我们可以看到，AIO 的读写主要也还是与 Buffer 打交道，这个与 NIO 是一脉相承的。</p><p>另外，还提供了用于将内存中的数据刷入到磁盘的方法：</p><figure class="highlight aspectj"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="function"><span class="keyword">void</span> <span class="title">force</span><span class="params">(<span class="keyword">boolean</span> metaData)</span> <span class="keyword">throws</span> IOException</span>;</span><br></pre></td></tr></table></figure><blockquote><p>因为我们对文件的写操作，操作系统并不会直接针对文件操作，系统会缓存，然后周期性地刷入到磁盘。如果希望将数据及时写入到磁盘中，以免断电引发部分数据丢失，可以调用此方法。参数如果设置为 true，意味着同时也将文件属性信息更新到磁盘。</p></blockquote><p>还有，还提供了对文件的锁定功能，我们可以锁定文件的部分数据，这样可以进行排他性的操作。</p><figure class="highlight arduino"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> abstract Future&lt;FileLock&gt; <span class="title">lock</span><span class="params">(<span class="type">long</span> position, <span class="type">long</span> size, <span class="type">boolean</span> shared)</span></span>;</span><br></pre></td></tr></table></figure><blockquote><p>position 是要锁定内容的开始位置，size 指示了要锁定的区域大小，shared 指示需要的是共享锁还是排他锁</p></blockquote><p>当然，也可以使用回调函数的版本：</p><figure class="highlight aspectj"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> &lt;A&gt; <span class="function"><span class="keyword">void</span> <span class="title">lock</span><span class="params">(<span class="keyword">long</span> position,</span></span></span><br><span class="line"><span class="params"><span class="function">                              <span class="keyword">long</span> size,</span></span></span><br><span class="line"><span class="params"><span class="function">                              <span class="keyword">boolean</span> shared,</span></span></span><br><span class="line"><span class="params"><span class="function">                              A attachment,</span></span></span><br><span class="line"><span class="params"><span class="function">                              CompletionHandler&lt;FileLock,? <span class="keyword">super</span> A&gt; <span class="keyword">handler</span>)</span></span>;</span><br></pre></td></tr></table></figure><p>文件锁定功能上还提供了 tryLock 方法，此方法会快速返回结果：</p><figure class="highlight reasonml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">public abstract FileLock <span class="keyword">try</span><span class="constructor">Lock(<span class="params">long</span> <span class="params">position</span>, <span class="params">long</span> <span class="params">size</span>, <span class="params">boolean</span> <span class="params">shared</span>)</span></span><br><span class="line">    throws IOException;</span><br></pre></td></tr></table></figure><blockquote><p>这个方法很简单，就是尝试去获取锁，如果该区域已被其他线程或其他应用锁住，那么立刻返回 null，否则返回  FileLock 对象。</p></blockquote><p>AsynchronousFileChannel 操作大体上也就以上介绍的这些接口。</p><h2 id="3-4-AsynchronousServerSocketChannel"><a href="#3-4-AsynchronousServerSocketChannel" class="headerlink" title="3.4 AsynchronousServerSocketChannel"></a>3.4 AsynchronousServerSocketChannel</h2><p>这个类对应的是非阻塞 IO 的 ServerSocketChannel</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.tinner.aio;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.net.InetSocketAddress;</span><br><span class="line"><span class="keyword">import</span> java.net.SocketAddress;</span><br><span class="line"><span class="keyword">import</span> java.nio.ByteBuffer;</span><br><span class="line"><span class="keyword">import</span> java.nio.channels.AsynchronousServerSocketChannel;</span><br><span class="line"><span class="keyword">import</span> java.nio.channels.AsynchronousSocketChannel;</span><br><span class="line"><span class="keyword">import</span> java.nio.channels.CompletionHandler;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Server</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line"></span><br><span class="line">          <span class="comment">// 实例化，并监听端口</span></span><br><span class="line">        <span class="type">AsynchronousServerSocketChannel</span> <span class="variable">server</span> <span class="operator">=</span></span><br><span class="line">                AsynchronousServerSocketChannel.open().bind(<span class="keyword">new</span> <span class="title class_">InetSocketAddress</span>(<span class="number">8080</span>));</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 自己定义一个 Attachment 类，用于传递一些信息</span></span><br><span class="line">        <span class="type">Attachment</span> <span class="variable">att</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Attachment</span>();</span><br><span class="line">        att.setServer(server);</span><br><span class="line"></span><br><span class="line">        server.accept(att, <span class="keyword">new</span> <span class="title class_">CompletionHandler</span>&lt;AsynchronousSocketChannel, Attachment&gt;() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">completed</span><span class="params">(AsynchronousSocketChannel client, Attachment att)</span> &#123;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    <span class="type">SocketAddress</span> <span class="variable">clientAddr</span> <span class="operator">=</span> client.getRemoteAddress();</span><br><span class="line">                    System.out.println(<span class="string">&quot;收到新的连接：&quot;</span> + clientAddr);</span><br><span class="line"></span><br><span class="line">                    <span class="comment">// 收到新的连接后，server 应该重新调用 accept 方法等待新的连接进来</span></span><br><span class="line">                    att.getServer().accept(att, <span class="built_in">this</span>);</span><br><span class="line"></span><br><span class="line">                    <span class="type">Attachment</span> <span class="variable">newAtt</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Attachment</span>();</span><br><span class="line">                    newAtt.setServer(server);</span><br><span class="line">                    newAtt.setClient(client);</span><br><span class="line">                    newAtt.setReadMode(<span class="literal">true</span>);</span><br><span class="line">                    newAtt.setBuffer(ByteBuffer.allocate(<span class="number">2048</span>));</span><br><span class="line"></span><br><span class="line">                    <span class="comment">// 这里也可以继续使用匿名实现类，不过代码不好看，所以这里专门定义一个类</span></span><br><span class="line">                    client.read(newAtt.getBuffer(), newAtt, <span class="keyword">new</span> <span class="title class_">ChannelHandler</span>());</span><br><span class="line">                &#125; <span class="keyword">catch</span> (IOException ex) &#123;</span><br><span class="line">                    ex.printStackTrace();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">failed</span><span class="params">(Throwable t, Attachment att)</span> &#123;</span><br><span class="line">                System.out.println(<span class="string">&quot;accept failed&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">        <span class="comment">// 为了防止 main 线程退出</span></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            Thread.currentThread().join();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>看一下 ChannelHandler 类：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.tinner.aio;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.nio.ByteBuffer;</span><br><span class="line"><span class="keyword">import</span> java.nio.channels.CompletionHandler;</span><br><span class="line"><span class="keyword">import</span> java.nio.charset.Charset;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ChannelHandler</span> <span class="keyword">implements</span> <span class="title class_">CompletionHandler</span>&lt;Integer, Attachment&gt; &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">completed</span><span class="params">(Integer result, Attachment att)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (att.isReadMode()) &#123;</span><br><span class="line">            <span class="comment">// 读取来自客户端的数据</span></span><br><span class="line">            <span class="type">ByteBuffer</span> <span class="variable">buffer</span> <span class="operator">=</span> att.getBuffer();</span><br><span class="line">            buffer.flip();</span><br><span class="line">            <span class="type">byte</span> bytes[] = <span class="keyword">new</span> <span class="title class_">byte</span>[buffer.limit()];</span><br><span class="line">            buffer.get(bytes);</span><br><span class="line">            <span class="type">String</span> <span class="variable">msg</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">String</span>(buffer.array()).toString().trim();</span><br><span class="line">            System.out.println(<span class="string">&quot;收到来自客户端的数据: &quot;</span> + msg);</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 响应客户端请求，返回数据</span></span><br><span class="line">            buffer.clear();</span><br><span class="line">            buffer.put(<span class="string">&quot;Response from server!&quot;</span>.getBytes(Charset.forName(<span class="string">&quot;UTF-8&quot;</span>)));</span><br><span class="line">            att.setReadMode(<span class="literal">false</span>);</span><br><span class="line">            buffer.flip();</span><br><span class="line">            <span class="comment">// 写数据到客户端也是异步</span></span><br><span class="line">            att.getClient().write(buffer, att, <span class="built_in">this</span>);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="comment">// 到这里，说明往客户端写数据也结束了，有以下两种选择:</span></span><br><span class="line">            <span class="comment">// 1. 继续等待客户端发送新的数据过来</span></span><br><span class="line"><span class="comment">//            att.setReadMode(true);</span></span><br><span class="line"><span class="comment">//            att.getBuffer().clear();</span></span><br><span class="line"><span class="comment">//            att.getClient().read(att.getBuffer(), att, this);</span></span><br><span class="line">            <span class="comment">// 2. 既然服务端已经返回数据给客户端，断开这次的连接</span></span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                att.getClient().close();</span><br><span class="line">            &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">failed</span><span class="params">(Throwable t, Attachment att)</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;连接断开&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>顺便再贴一下自定义的 Attachment 类：</p><figure class="highlight axapta"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Attachment</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> AsynchronousServerSocketChannel <span class="keyword">server</span>;</span><br><span class="line">    <span class="keyword">private</span> AsynchronousSocketChannel <span class="keyword">client</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="built_in">boolean</span> isReadMode;</span><br><span class="line">    <span class="keyword">private</span> ByteBuffer buffer;</span><br><span class="line">    <span class="comment">// getter &amp; setter</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这样，一个简单的服务端就写好了，接下来可以接收客户端请求了。上面我们用的都是回调函数的方式。</p><h2 id="3-5-AsynchronousSocketChannel"><a href="#3-5-AsynchronousSocketChannel" class="headerlink" title="3.5 AsynchronousSocketChannel"></a>3.5 AsynchronousSocketChannel</h2><p>AsynchronousSocketChannel和非阻塞 IO 基本类似。</p><p>这边做个简单演示</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.tinner.aio;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.net.InetSocketAddress;</span><br><span class="line"><span class="keyword">import</span> java.nio.ByteBuffer;</span><br><span class="line"><span class="keyword">import</span> java.nio.channels.AsynchronousSocketChannel;</span><br><span class="line"><span class="keyword">import</span> java.nio.charset.Charset;</span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.ExecutionException;</span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.Future;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Client</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="type">AsynchronousSocketChannel</span> <span class="variable">client</span> <span class="operator">=</span> AsynchronousSocketChannel.open();</span><br><span class="line">          <span class="comment">// 来个 Future 形式的</span></span><br><span class="line">        Future&lt;?&gt; future = client.connect(<span class="keyword">new</span> <span class="title class_">InetSocketAddress</span>(<span class="number">8080</span>));</span><br><span class="line">        <span class="comment">// 阻塞一下，等待连接成功</span></span><br><span class="line">        future.get();</span><br><span class="line"></span><br><span class="line">        <span class="type">Attachment</span> <span class="variable">att</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Attachment</span>();</span><br><span class="line">        att.setClient(client);</span><br><span class="line">        att.setReadMode(<span class="literal">false</span>);</span><br><span class="line">        att.setBuffer(ByteBuffer.allocate(<span class="number">2048</span>));</span><br><span class="line">        <span class="type">byte</span>[] data = <span class="string">&quot;I am obot!&quot;</span>.getBytes();</span><br><span class="line">        att.getBuffer().put(data);</span><br><span class="line">        att.getBuffer().flip();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 异步发送数据到服务端</span></span><br><span class="line">        client.write(att.getBuffer(), att, <span class="keyword">new</span> <span class="title class_">ClientChannelHandler</span>());</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 这里休息一下再退出，给出足够的时间处理数据</span></span><br><span class="line">        Thread.sleep(<span class="number">2000</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>往里面看下 ClientChannelHandler 类：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.tinner.aio;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.nio.ByteBuffer;</span><br><span class="line"><span class="keyword">import</span> java.nio.channels.CompletionHandler;</span><br><span class="line"><span class="keyword">import</span> java.nio.charset.Charset;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ClientChannelHandler</span> <span class="keyword">implements</span> <span class="title class_">CompletionHandler</span>&lt;Integer, Attachment&gt; &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">completed</span><span class="params">(Integer result, Attachment att)</span> &#123;</span><br><span class="line">        <span class="type">ByteBuffer</span> <span class="variable">buffer</span> <span class="operator">=</span> att.getBuffer();</span><br><span class="line">        <span class="keyword">if</span> (att.isReadMode()) &#123;</span><br><span class="line">            <span class="comment">// 读取来自服务端的数据</span></span><br><span class="line">            buffer.flip();</span><br><span class="line">            <span class="type">byte</span>[] bytes = <span class="keyword">new</span> <span class="title class_">byte</span>[buffer.limit()];</span><br><span class="line">            buffer.get(bytes);</span><br><span class="line">            <span class="type">String</span> <span class="variable">msg</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">String</span>(bytes, Charset.forName(<span class="string">&quot;UTF-8&quot;</span>));</span><br><span class="line">            System.out.println(<span class="string">&quot;收到来自服务端的响应数据: &quot;</span> + msg);</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 接下来，有以下两种选择:</span></span><br><span class="line">            <span class="comment">// 1. 向服务端发送新的数据</span></span><br><span class="line"><span class="comment">//            att.setReadMode(false);</span></span><br><span class="line"><span class="comment">//            buffer.clear();</span></span><br><span class="line"><span class="comment">//            String newMsg = &quot;new message from client&quot;;</span></span><br><span class="line"><span class="comment">//            byte[] data = newMsg.getBytes(Charset.forName(&quot;UTF-8&quot;));</span></span><br><span class="line"><span class="comment">//            buffer.put(data);</span></span><br><span class="line"><span class="comment">//            buffer.flip();</span></span><br><span class="line"><span class="comment">//            att.getClient().write(buffer, att, this);</span></span><br><span class="line">            <span class="comment">// 2. 关闭连接</span></span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                att.getClient().close();</span><br><span class="line">            &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="comment">// 写操作完成后，会进到这里</span></span><br><span class="line">            att.setReadMode(<span class="literal">true</span>);</span><br><span class="line">            buffer.clear();</span><br><span class="line">            att.getClient().read(buffer, att, <span class="built_in">this</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">failed</span><span class="params">(Throwable t, Attachment att)</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;服务器无响应&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>以上代码都是可以运行调试的，如果读者碰到问题，请在评论区留言。</p><h2 id="3-6-Asynchronous-Channel-Groups"><a href="#3-6-Asynchronous-Channel-Groups" class="headerlink" title="3.6 Asynchronous Channel Groups"></a>3.6 Asynchronous Channel Groups</h2><p>为了知识的完整性，有必要对 group 进行介绍，其实也就是介绍 AsynchronousChannelGroup 这个类。之前我们说过，异步 IO 一定存在一个线程池，这个线程池负责接收任务、处理 IO 事件、回调等。这个线程池就在 group 内部，group 一旦关闭，那么相应的线程池就会关闭。</p><p>AsynchronousServerSocketChannels 和 AsynchronousSocketChannels 是属于 group 的，当我们调用 AsynchronousServerSocketChannel 或 AsynchronousSocketChannel 的 open() 方法的时候，相应的 channel 就属于默认的 group，这个 group 由 JVM 自动构造并管理。</p><p>如果我们想要配置这个默认的 group，可以在 JVM 启动参数中指定以下系统变量：</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 此系统变量用于设置 ThreadFactory，它应该是 java.util.concurrent.ThreadFactory 实现类的全限定类名。一旦我们指定了这个 ThreadFactory 以后，group 中的线程就会使用该类产生。</span></span><br><span class="line">java<span class="selector-class">.nio</span><span class="selector-class">.channels</span><span class="selector-class">.DefaultThreadPool</span><span class="selector-class">.threadFactory</span></span><br><span class="line"><span class="comment">// 用于设置线程池的初始大小。</span></span><br><span class="line">java<span class="selector-class">.nio</span><span class="selector-class">.channels</span><span class="selector-class">.DefaultThreadPool</span>.initialSize</span><br></pre></td></tr></table></figure><p>可能你会想要使用自己定义的 group，这样可以对其中的线程进行更多的控制，使用以下几个方法即可：</p><ul><li>AsynchronousChannelGroup.withCachedThreadPool(ExecutorService executor, int initialSize)</li><li>AsynchronousChannelGroup.withFixedThreadPool(int nThreads, ThreadFactory threadFactory)</li><li>AsynchronousChannelGroup.withThreadPool(ExecutorService executor)</li></ul><p>熟悉线程池的读者对这些方法应该很好理解，它们都是 AsynchronousChannelGroup 中的静态方法。</p><p>至于 group 的使用就很简单了，代码一看就懂：</p><figure class="highlight reasonml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">AsynchronousChannelGroup group = AsynchronousChannelGroup</span><br><span class="line">        .<span class="keyword">with</span><span class="constructor">FixedThreadPool(10, Executors.<span class="params">defaultThreadFactory</span>()</span>);</span><br><span class="line">AsynchronousServerSocketChannel server = <span class="module-access"><span class="module"><span class="identifier">AsynchronousServerSocketChannel</span>.</span></span><span class="keyword">open</span>(group);</span><br><span class="line">AsynchronousSocketChannel client = <span class="module-access"><span class="module"><span class="identifier">AsynchronousSocketChannel</span>.</span></span><span class="keyword">open</span>(group);</span><br></pre></td></tr></table></figure><p><strong>AsynchronousFileChannels 不属于 group</strong>。但是它们也是关联到一个线程池的，如果不指定，会使用系统默认的线程池，如果想要使用指定的线程池，可以在实例化的时候使用以下方法：</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="title class_">AsynchronousFileChannel</span> <span class="title function_">open</span>(<span class="params">Path file,</span></span><br><span class="line"><span class="params">                                           <span class="built_in">Set</span>&lt;? <span class="keyword">extends</span> OpenOption&gt; options,</span></span><br><span class="line"><span class="params">                                           ExecutorService executor,</span></span><br><span class="line"><span class="params">                                           FileAttribute&lt;?&gt;... attrs</span>) &#123;</span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>到这里，异步 IO 就算介绍完成了。</p>]]></content>
    
    
    <summary type="html">&lt;meta name=&quot;referrer&quot; content=&quot;no-referrer&quot;&gt;

&lt;h1 id=&quot;一-阻塞模式-IO&quot;&gt;&lt;a href=&quot;#一-阻塞模式-IO&quot; class=&quot;headerlink&quot; title=&quot;一. 阻塞模式 IO&quot;&gt;&lt;/a&gt;一. 阻塞模式 IO&lt;/h1&gt;&lt;p&gt;使用 Java NIO 包组成一个简单的客户端-服务端网络通讯所需要的 &lt;code&gt;ServerSocketChannel&lt;/code&gt;、&lt;code&gt;SocketChannel&lt;/code&gt; 和 &lt;code&gt;Buffer&lt;/code&gt; 这里整合一下它们，给出一个完整的可运行的例子：&lt;/p&gt;
&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;title class_&quot;&gt;Server&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;title function_&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(String[] args)&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;throws&lt;/span&gt; IOException &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;type&quot;&gt;ServerSocketChannel&lt;/span&gt; &lt;span class=&quot;variable&quot;&gt;serverSocketChannel&lt;/span&gt; &lt;span class=&quot;operator&quot;&gt;=&lt;/span&gt; ServerSocketChannel.open();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;comment&quot;&gt;// 监听 8080 端口进来的 TCP 链接&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        serverSocketChannel.socket().bind(&lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;title class_&quot;&gt;InetSocketAddress&lt;/span&gt;(&lt;span class=&quot;number&quot;&gt;8080&lt;/span&gt;));&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;while&lt;/span&gt; (&lt;span class=&quot;literal&quot;&gt;true&lt;/span&gt;) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &lt;span class=&quot;comment&quot;&gt;// 这里会阻塞，直到有一个请求的连接进来&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &lt;span class=&quot;type&quot;&gt;SocketChannel&lt;/span&gt; &lt;span class=&quot;variable&quot;&gt;socketChannel&lt;/span&gt; &lt;span class=&quot;operator&quot;&gt;=&lt;/span&gt; serverSocketChannel.accept();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &lt;span class=&quot;comment&quot;&gt;// 开启一个新的线程来处理这个请求，然后在 while 循环中继续监听 8080 端口&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &lt;span class=&quot;type&quot;&gt;SocketHandler&lt;/span&gt; &lt;span class=&quot;variable&quot;&gt;handler&lt;/span&gt; &lt;span class=&quot;operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;title class_&quot;&gt;SocketHandler&lt;/span&gt;(socketChannel);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;title class_&quot;&gt;Thread&lt;/span&gt;(handler).start();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;</summary>
    
    
    
    <category term="Java" scheme="https://utinner.gitee.io/categories/Java/"/>
    
    
    <category term="Java" scheme="https://utinner.gitee.io/tags/Java/"/>
    
    <category term="IO" scheme="https://utinner.gitee.io/tags/IO/"/>
    
  </entry>
  
  <entry>
    <title>HTTPS原理</title>
    <link href="https://utinner.gitee.io/2021/07/20/HTTPS%E5%8E%9F%E7%90%86/"/>
    <id>https://utinner.gitee.io/2021/07/20/HTTPS%E5%8E%9F%E7%90%86/</id>
    <published>2021-07-20T09:43:45.000Z</published>
    <updated>2021-12-06T09:23:00.722Z</updated>
    
    <content type="html"><![CDATA[<meta name="referrer" content="no-referrer">HTTP请求都是明文传输的，所谓的明文指的是没有经过加密的信息，如果HTTP请求被黑客拦截，并且里面含有银行卡密码等敏感数据的话，会非常危险。为了解决这个问题，Netscape 公司制定了HTTPS协议，HTTPS可以将数据加密传输，也就是传输的是密文，即便黑客在传输过程中拦截到数据也无法破译，这就保证了网络通信的安全。<h1 id="一-密码学基础"><a href="#一-密码学基础" class="headerlink" title="一.密码学基础"></a>一.密码学基础</h1><h2 id="明文"><a href="#明文" class="headerlink" title="明文"></a>明文</h2><p>明文指的是未被加密过的原始数据</p><h2 id="密文"><a href="#密文" class="headerlink" title="密文"></a>密文</h2><p>明文被某种加密算法加密之后，会变成密文，从而确保原始数据的安全。密文也可以被解密，得到原始的明文。</p><h2 id="密钥"><a href="#密钥" class="headerlink" title="密钥"></a>密钥</h2><p>密钥是一种参数，它是在明文转换为密文或将密文转换为明文的算法中输入的参数。密钥分为<code>对称密钥</code>与<code>非对称密钥</code>，分别应用在对称加密和非对称加密上。</p><h2 id="对称加密"><a href="#对称加密" class="headerlink" title="对称加密"></a>对称加密</h2><p>对称加密又叫做私钥加密，即信息的发送方和接收方使用同一个密钥去加密和解密数据。对称加密的特点是算法公开、加密和解密速度快，适合于对大数据量进行加密，常见的对称加密算法有DES、3DES、TDEA、Blowfish、RC5和IDEA。</p><ul><li>加密：明文+加密算法+私钥—&gt;密文</li><li>解密：密文+解密算法+私钥—&gt;明文<span id="more"></span>其加密过程中的私钥与解密过程中用到的私钥是同一个密钥，这也是称加密之所以称之为“对称”的原因。由于对称加密的算法是公开的，所以一旦私钥被泄露，那么密文就很容易被破解，所以对称加密的缺点是密钥安全管理困难。</li></ul><h2 id="非对称加密"><a href="#非对称加密" class="headerlink" title="非对称加密"></a>非对称加密</h2><p>非对称加密也叫做公钥加密。非对称加密与对称加密相比，其安全性更好。对称加密的通信双方使用相同的密钥，如果一方的密钥遭泄露，那么整个通信就会被破解。而非对称加密使用一对密钥，即<code>公钥</code>和<code>私钥</code>，且二者成对出现。</p><p>私钥被自己保存，不能对外泄露。<br>公钥指的是公共的密钥，任何人都可以获得该密钥。<br>用公钥或私钥中的任何一个进行加密，用另一个进行解密。<br><strong>公钥和私钥是一一对应的</strong><br>被公钥加密过的密文只能被私钥解密，过程如下：</p><ul><li>明文 + 加密算法 + 公钥 —&gt; 密文， 密文 + 解密算法 + 私钥 —&gt; 明文</li></ul><p>被私钥加密过的密文只能被公钥解密，过程如下：</p><ul><li>明文 + 加密算法 + 私钥 —&gt; 密文， 密文 + 解密算法 + 公钥 —&gt; 明文</li></ul><p>由于加密和解密使用了两个不同的密钥，这就是非对称加密“非对称”的原因。<br>非对称加密的缺点是加密和解密花费时间长、速度慢，只适合对少量数据进行加密。<br>在非对称加密中使用的主要算法有：RSA、Elgamal、Rabin、D-H、ECC（椭圆曲线加密算法）等。</p><h1 id="二-HTTPS通信过程"><a href="#二-HTTPS通信过程" class="headerlink" title="二.HTTPS通信过程"></a>二.HTTPS通信过程</h1><p><strong>HTTPS协议 = HTTP协议 + SSL/TLS协议</strong>，在HTTPS数据传输的过程中，需要用SSL/TLS对数据进行加密和解密，需要用HTTP对加密后的数据进行传输，由此可以看出HTTPS是由HTTP和SSL/TLS一起合作完成的。</p><p>SSL的全称是Secure Sockets Layer，即安全套接层协议，是为网络通信提供安全及数据完整性的一种安全协议。SSL协议在1994年被Netscape发明，后来各个浏览器均支持SSL，其最新的版本是3.0</p><p>TLS的全称是Transport Layer Security，即安全传输层协议，最新版本的TLS（Transport Layer Security，传输层安全协议）是IETF（Internet Engineering Task Force，Internet工程任务组）制定的一种新的协议，它建立在SSL 3.0协议规范之上，是SSL 3.0的后续版本。在TLS与SSL3.0之间存在着显著的差别，主要是它们所支持的加密算法不同，所以TLS与SSL3.0不能互操作。虽然TLS与SSL3.0在加密算法上不同，但是在我们理解HTTPS的过程中，我们可以把SSL和TLS看做是同一个协议。</p><p>HTTPS为了兼顾安全与效率，<strong>同时使用了对称加密和非对称加密</strong>。数据是被对称加密传输的，对称加密过程需要客户端的一个密钥，为了确保能把该密钥安全传输到服务器端，采用非对称加密对该密钥进行加密传输，总的来说，<strong>对数据进行对称加密，对称加密所要使用的密钥通过非对称加密传输。</strong></p><img src="/2021/07/20/HTTPS%E5%8E%9F%E7%90%86/1.png" class title="8个步骤"><p>HTTPS在传输的过程中会涉及到三个密钥：</p><ul><li>服务器端的公钥和私钥，用来进行非对称加密</li><li>客户端生成的随机密钥，用来进行对称加密</li></ul><p>一个HTTPS请求实际上包含了两次HTTP传输，可以细分为8步：</p><ol><li>客户端向服务器发起HTTPS请求，连接到服务器的443端口</li><li>服务器端有一个密钥对，即公钥和私钥，是用来进行非对称加密使用的，服务器端保存着私钥，不能将其泄露，公钥可以发送给任何人。</li><li>服务器将自己的公钥发送给客户端。</li><li>客户端收到服务器端的证书之后，会对证书进行检查，验证其合法性，如果发现发现证书有问题，那么HTTPS传输就无法继续。严格的说，这里应该是验证服务器发送的数字证书的合法性。如果公钥合格，那么客户端会生成一个随机值，这个随机值就是用于进行对称加密的密钥，我们将该密钥称之为<code>client key</code>，即客户端密钥。然后<strong>用服务器的公钥对客户端密钥进行非对称加密</strong>，这样客户端密钥就变成密文了，至此，HTTPS中的第一次HTTP请求结束。</li><li>客户端会发起HTTPS中的第二个HTTP请求，将加密之后的客户端密钥发送给服务器。</li><li>服务器接收到客户端发来的密文之后，会用自己的私钥对其进行非对称解密，解密之后的明文就是客户端密钥，然后用客户端密钥对数据进行对称加密，这样数据就变成了密文。</li><li>然后服务器将加密后的密文发送给客户端。</li><li>客户端收到服务器发送来的密文，用客户端密钥对其进行对称解密，得到服务器发送的数据。这样HTTPS中的第二个HTTP请求结束，整个HTTPS传输完成。</li></ol><h1 id="三-CA"><a href="#三-CA" class="headerlink" title="三.CA"></a>三.CA</h1><p>CA是Certification Authority的缩写，它代表世界上那些权威的证书颁发机构。</p><h2 id="1-CA需要做什么"><a href="#1-CA需要做什么" class="headerlink" title="1.CA需要做什么"></a>1.CA需要做什么</h2><p>CA 要验证这个域名真的是你的：通常就是通过 DNS 记录或者就是你在指定 URI 下放置一个特殊文件，让 CA 可以在外网环境下访问到它。<br>CA 是一个非常关键的角色，因为它签出来的任何证书都是被信任的，所以这要求每个 CA 都不能乱来。</p><p>Let’s Encrypt 机构提供了免费的证书，那有什么区别呢？<br>Let’s Encrypt 它只验证了这个域名是你的，然后就可以给你免费签发证书，这个证书的有效期是 3 个月，到期要自己去更新。因为它只验证了你的域名，所以这类证书又称为 DV 证书（Domain Validation）。</p><p>而一些收费的 CA 可以签发 OV 证书（Organization Validation）或 EV 证书（Extended Validation），他们不仅会验证这个域名真的是你的，还会人工验证你的公司是否符合他们的各项签发标准，所以收费也比较贵。通常这些证书的有效期是 1 年。</p><p>对于浏览器来说，通常会根据你的证书是 DV 还是 OV，来呈现不同的样式，所以有一种花钱的证书更香的感觉。</p><p>但是从技术上来说，它们都是提供一样的保护级别的，在最新的 Chrome 上，它没有区别对待，一律显示一个锁。</p><h2 id="2-证书申请"><a href="#2-证书申请" class="headerlink" title="2.证书申请"></a>2.证书申请</h2><p>首先我们要生成一个 CSR，它的全称是 Certificate Signing Request，这个文件包含了你要申请的证书的各种信息，这和在某个 CA 的后台填写一个申请表单是一个意思，只是这样可以规范所有 CA 遵守一致的规则。<br>这里我们需要使用一个叫 openssl 的软件，执行下面的命令：</p><figure class="highlight haxe"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">openssl req -<span class="keyword">new</span> <span class="type"></span>-<span class="keyword">new</span><span class="type">key</span> rsa:<span class="type">2048 -nodes -keyout jinping</span>.xyz.key -out jinping.xyz.csr</span><br></pre></td></tr></table></figure><img src="/2021/07/20/HTTPS%E5%8E%9F%E7%90%86/2.png" class title="openssl"><p>进入交互界面后，需要你填写国家、城市、公司名字、部门名字、申请的域名、邮箱地址。有些 CA 支持中文，大部分不支持，这里建议都是用英文字符。</p><p>然后我们就会得到两个文本文件：</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">jinping<span class="selector-class">.xyz</span><span class="selector-class">.csr</span>  </span><br><span class="line">jinping<span class="selector-class">.xyz</span>.key</span><br></pre></td></tr></table></figure><p>其中一个是 CSR 文件，用来发给 CA 申请证书的，另一个是私钥。私钥需要好好保存，等证书申请完成以后要用。<br>从域名的角度，证书分为单域名、通配符域名、多域名证书。以单域名 jinping.xyz 为例子，通配符和多域名也很好理解，在填写域名的时候按照格式填就可以了。<br>生成出来的 jinping.xyz.csr 文件，它的内容是这样的</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">-----<span class="keyword">BEGIN</span> CERTIFICATE REQUEST-----</span><br><span class="line">MIIC+TCCAeECAQAwgYkxCzAJBgNVBAYTAmNuMRAwDgYDVQQIDAdiZWlqaW5nMQ4w</span><br><span class="line">DAYDVQQHDAVjaGluYTEQMA4GA1UECgwHeW9uZ2h1aTEQMA4GA1UECwwHc2VjdGlv</span><br><span class="line">bjEQMA4GA1UEAwwHamlucGluZzEiMCAGCSqGSIb3DQEJARYTamlucGluZzA5ODJA</span><br><span class="line">MTYzLmNvbTCCASIwDQYJKoZIhvcNAQEBBQADggEPADCCAQoCggEBANC5kvprdmFm</span><br><span class="line">gk+W0Fw1Co+kj2h97jj5ibZtoytUyq3nlHEXdrXMqnsz1sR4mBa3J8qbQZ2FkEB4</span><br><span class="line">ShU7gynTS+zlI7Vq7tU29TC1vZGhNUo3TlhSj412VXxjImlCvh+gAhQbHkkFsMlv</span><br><span class="line">n3YNphdlI/Du36jYcecJ1J4CznY6RYdPstbqBeltVuREFZL6gr34n8WDRlU333pI</span><br><span class="line">jONMnwFa8JVmQO<span class="regexp">/6TOvJn7xfc9HMdq7Uvz7RLk0mOdCY8NfW5603/</span>IoFxQ5YaLGh</span><br><span class="line">ULb9v0omprxGiTm+keC0m6LB3Y0JFZdkOwyGkznEsLJ+vZ7NA11YGKKb4zmLjNg1</span><br><span class="line">pQp1aavWxBECAwEAAaAqMBEGCSqGSIb3DQEJAjEEDAJ5aDAVBgkqhkiG9w0BCQcx</span><br><span class="line">CAwGMDUwNDAxMA0GCSqGSIb3DQEBCwUAA4IBAQBvL6QvPB+weRBudlPTEYv4GEY3</span><br><span class="line">I5JxhdxAB57wWzDmn96xRuChlPMyRHd6XiMXM2nnv02GCNDyPP6Zx6C80rQFbNvz</span><br><span class="line">qa9298wGhFX2jRFXVW/Z1zsdn1sXk2B3Pa7dW0FEgAN+uc+CbV2HALdtRvAiFxvc</span><br><span class="line">enWm9aMShhk2rpl0NPZ1Xa5bY0zM+Ew3Qq/W0zCuJVLuV+<span class="number">7</span>Rf8CRP1RNZD7FoEST</span><br><span class="line">miKvBTE0fG0WAjdPmXznAfbraP/cljdMk+Ccn9tQ+SgCfa5aedXPAFxgs1KW1LJ3</span><br><span class="line">vi6X5Jvoz0BhABNPz3xVYGqOV82/UR+MP5PVZvbXO6lWLghmXj2twSwH4pXy</span><br><span class="line">-----<span class="keyword">END</span> CERTIFICATE REQUEST-----</span><br></pre></td></tr></table></figure><p>进入 <a href="https://decoder.link/result">https://decoder.link/result</a> 进行 decode，可以得到：</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">Certificate</span> Request:</span><br><span class="line">    <span class="attribute">Data</span>:</span><br><span class="line">        <span class="attribute">Version</span>: <span class="number">1</span> (<span class="number">0</span>x0)</span><br><span class="line">        <span class="attribute">Subject</span>: C = cn, ST = beijing, L = china, O = yonghui, OU = section, CN = jinping, emailAddress = jinping0982@<span class="number">163</span>.com</span><br><span class="line">        <span class="attribute">Subject</span> Public Key Info:</span><br><span class="line">            <span class="attribute">Public</span> Key Algorithm: rsaEncryption</span><br><span class="line">                <span class="attribute">Public</span>-Key: (<span class="number">2048</span> bit)</span><br><span class="line">                <span class="attribute">Modulus</span>:</span><br><span class="line">                    <span class="attribute">00</span>:d0:b9:<span class="number">92</span>:fa:<span class="number">6</span>b:<span class="number">76</span>:<span class="number">61</span>:<span class="number">66</span>:<span class="number">82</span>:<span class="number">4</span>f:<span class="number">96</span>:d0:<span class="number">5</span>c:<span class="number">35</span>:</span><br><span class="line">                    <span class="attribute">0a</span>:<span class="number">8</span>f:a4:<span class="number">8</span>f:<span class="number">68</span>:<span class="number">7</span>d:ee:<span class="number">38</span>:f9:<span class="number">89</span>:b6:<span class="number">6</span>d:a3:<span class="number">2</span>b:<span class="number">54</span>:</span><br><span class="line">                    <span class="attribute">ca</span>:ad:e7:<span class="number">94</span>:<span class="number">71</span>:<span class="number">17</span>:<span class="number">76</span>:b5:cc:aa:<span class="number">7</span>b:<span class="number">33</span>:d6:c4:<span class="number">78</span>:</span><br><span class="line">                    <span class="attribute">98</span>:<span class="number">16</span>:b7:<span class="number">27</span>:ca:<span class="number">9</span>b:<span class="number">41</span>:<span class="number">9</span>d:<span class="number">85</span>:<span class="number">90</span>:<span class="number">40</span>:<span class="number">78</span>:<span class="number">4</span>a:<span class="number">15</span>:<span class="number">3</span>b:</span><br><span class="line">                    <span class="attribute">83</span>:<span class="number">29</span>:d3:<span class="number">4</span>b:ec:e5:<span class="number">23</span>:b5:<span class="number">6</span>a:ee:d5:<span class="number">36</span>:f5:<span class="number">30</span>:b5:</span><br><span class="line">                    <span class="attribute">bd</span>:<span class="number">91</span>:a1:<span class="number">35</span>:<span class="number">4</span>a:<span class="number">37</span>:<span class="number">4</span>e:<span class="number">58</span>:<span class="number">52</span>:<span class="number">8</span>f:<span class="number">8</span>d:<span class="number">76</span>:<span class="number">55</span>:<span class="number">7</span>c:<span class="number">63</span>:</span><br><span class="line">                    <span class="attribute">22</span>:<span class="number">69</span>:<span class="number">42</span>:be:<span class="number">1</span>f:a0:<span class="number">02</span>:<span class="number">14</span>:<span class="number">1</span>b:<span class="number">1</span>e:<span class="number">49</span>:<span class="number">05</span>:b0:c9:<span class="number">6</span>f:</span><br><span class="line">                    <span class="attribute">9f</span>:<span class="number">76</span>:<span class="number">0</span>d:a6:<span class="number">17</span>:<span class="number">65</span>:<span class="number">23</span>:f0:ee:df:a8:d8:<span class="number">71</span>:e7:<span class="number">09</span>:</span><br><span class="line">                    <span class="attribute">d4</span>:<span class="number">9</span>e:<span class="number">02</span>:ce:<span class="number">76</span>:<span class="number">3</span>a:<span class="number">45</span>:<span class="number">87</span>:<span class="number">4</span>f:b2:d6:ea:<span class="number">05</span>:e9:<span class="number">6</span>d:</span><br><span class="line">                    <span class="attribute">56</span>:e4:<span class="number">44</span>:<span class="number">15</span>:<span class="number">92</span>:fa:<span class="number">82</span>:bd:f8:<span class="number">9</span>f:c5:<span class="number">83</span>:<span class="number">46</span>:<span class="number">55</span>:<span class="number">37</span>:</span><br><span class="line">                    <span class="attribute">df</span>:<span class="number">7</span>a:<span class="number">48</span>:<span class="number">8</span>c:e3:<span class="number">4</span>c:<span class="number">9</span>f:<span class="number">01</span>:<span class="number">5</span>a:f0:<span class="number">95</span>:<span class="number">66</span>:<span class="number">40</span>:ef:fa:</span><br><span class="line">                    <span class="attribute">4c</span>:eb:c9:<span class="number">9</span>f:bc:<span class="number">5</span>f:<span class="number">73</span>:d1:cc:<span class="number">76</span>:ae:d4:bf:<span class="number">3</span>e:d1:</span><br><span class="line">                    <span class="attribute">2e</span>:<span class="number">4</span>d:<span class="number">26</span>:<span class="number">39</span>:d0:<span class="number">98</span>:f0:d7:d6:e7:ad:<span class="number">37</span>:fc:<span class="number">8</span>a:<span class="number">05</span>:</span><br><span class="line">                    <span class="attribute">c5</span>:<span class="number">0</span>e:<span class="number">58</span>:<span class="number">68</span>:b1:a1:<span class="number">50</span>:b6:fd:bf:<span class="number">4</span>a:<span class="number">26</span>:a6:bc:<span class="number">46</span>:</span><br><span class="line">                    <span class="attribute">89</span>:<span class="number">39</span>:be:<span class="number">91</span>:e0:b4:<span class="number">9</span>b:a2:c1:dd:<span class="number">8</span>d:<span class="number">09</span>:<span class="number">15</span>:<span class="number">97</span>:<span class="number">64</span>:</span><br><span class="line">                    <span class="attribute">3b</span>:<span class="number">0</span>c:<span class="number">86</span>:<span class="number">93</span>:<span class="number">39</span>:c4:b0:b2:<span class="number">7</span>e:bd:<span class="number">9</span>e:cd:<span class="number">03</span>:<span class="number">5</span>d:<span class="number">58</span>:</span><br><span class="line">                    <span class="attribute">18</span>:a2:<span class="number">9</span>b:e3:<span class="number">39</span>:<span class="number">8</span>b:<span class="number">8</span>c:d8:<span class="number">35</span>:a5:<span class="number">0</span>a:<span class="number">75</span>:<span class="number">69</span>:ab:d6:</span><br><span class="line">                    <span class="attribute">c4</span>:<span class="number">11</span></span><br><span class="line">                <span class="attribute">Exponent</span>: <span class="number">65537</span> (<span class="number">0</span>x10001)</span><br><span class="line">        <span class="attribute">Attributes</span>:</span><br><span class="line">            <span class="attribute">unstructuredName</span>         :yh</span><br><span class="line">            <span class="attribute">challengePassword</span>        :<span class="number">050401</span></span><br><span class="line">    <span class="attribute">Signature</span> Algorithm: sha256WithRSAEncryption</span><br><span class="line">         <span class="attribute">6f</span>:<span class="number">2</span>f:a4:<span class="number">2</span>f:<span class="number">3</span>c:<span class="number">1</span>f:b0:<span class="number">79</span>:<span class="number">10</span>:<span class="number">6</span>e:<span class="number">76</span>:<span class="number">53</span>:d3:<span class="number">11</span>:<span class="number">8</span>b:f8:<span class="number">18</span>:<span class="number">46</span>:</span><br><span class="line">         <span class="attribute">37</span>:<span class="number">23</span>:<span class="number">92</span>:<span class="number">71</span>:<span class="number">85</span>:dc:<span class="number">40</span>:<span class="number">07</span>:<span class="number">9</span>e:f0:<span class="number">5</span>b:<span class="number">30</span>:e6:<span class="number">9</span>f:de:b1:<span class="number">46</span>:e0:</span><br><span class="line">         <span class="attribute">a1</span>:<span class="number">94</span>:f3:<span class="number">32</span>:<span class="number">44</span>:<span class="number">77</span>:<span class="number">7</span>a:<span class="number">5</span>e:<span class="number">23</span>:<span class="number">17</span>:<span class="number">33</span>:<span class="number">69</span>:e7:bf:<span class="number">4</span>d:<span class="number">86</span>:<span class="number">08</span>:d0:</span><br><span class="line">         <span class="attribute">f2</span>:<span class="number">3</span>c:fe:<span class="number">99</span>:c7:a0:bc:d2:b4:<span class="number">05</span>:<span class="number">6</span>c:db:f3:a9:af:<span class="number">76</span>:f7:cc:</span><br><span class="line">         <span class="attribute">06</span>:<span class="number">84</span>:<span class="number">55</span>:f6:<span class="number">8</span>d:<span class="number">11</span>:<span class="number">57</span>:<span class="number">55</span>:<span class="number">6</span>f:d9:d7:<span class="number">3</span>b:<span class="number">1</span>d:<span class="number">9</span>f:<span class="number">5</span>b:<span class="number">17</span>:<span class="number">93</span>:<span class="number">60</span>:</span><br><span class="line">         <span class="attribute">77</span>:<span class="number">3</span>d:ae:dd:<span class="number">5</span>b:<span class="number">41</span>:<span class="number">44</span>:<span class="number">80</span>:<span class="number">03</span>:<span class="number">7</span>e:b9:cf:<span class="number">82</span>:<span class="number">6</span>d:<span class="number">5</span>d:<span class="number">87</span>:<span class="number">00</span>:b7:</span><br><span class="line">         <span class="attribute">6d</span>:<span class="number">46</span>:f0:<span class="number">22</span>:<span class="number">17</span>:<span class="number">1</span>b:dc:<span class="number">7</span>a:<span class="number">75</span>:a6:f5:a3:<span class="number">12</span>:<span class="number">86</span>:<span class="number">19</span>:<span class="number">36</span>:ae:<span class="number">99</span>:</span><br><span class="line">         <span class="attribute">74</span>:<span class="number">34</span>:f6:<span class="number">75</span>:<span class="number">5</span>d:ae:<span class="number">5</span>b:<span class="number">63</span>:<span class="number">4</span>c:cc:f8:<span class="number">4</span>c:<span class="number">37</span>:<span class="number">42</span>:af:d6:d3:<span class="number">30</span>:</span><br><span class="line">         <span class="attribute">ae</span>:<span class="number">25</span>:<span class="number">52</span>:ee:<span class="number">57</span>:ee:d1:<span class="number">7</span>f:c0:<span class="number">91</span>:<span class="number">3</span>f:<span class="number">54</span>:<span class="number">4</span>d:<span class="number">64</span>:<span class="number">3</span>e:c5:a0:<span class="number">44</span>:</span><br><span class="line">         <span class="attribute">93</span>:<span class="number">9</span>a:<span class="number">22</span>:af:<span class="number">05</span>:<span class="number">31</span>:<span class="number">34</span>:<span class="number">7</span>c:<span class="number">6</span>d:<span class="number">16</span>:<span class="number">02</span>:<span class="number">37</span>:<span class="number">4</span>f:<span class="number">99</span>:<span class="number">7</span>c:e7:<span class="number">01</span>:f6:</span><br><span class="line">         <span class="attribute">eb</span>:<span class="number">68</span>:ff:dc:<span class="number">96</span>:<span class="number">37</span>:<span class="number">4</span>c:<span class="number">93</span>:e0:<span class="number">9</span>c:<span class="number">9</span>f:db:<span class="number">50</span>:f9:<span class="number">28</span>:<span class="number">02</span>:<span class="number">7</span>d:ae:</span><br><span class="line">         <span class="attribute">5a</span>:<span class="number">79</span>:d5:cf:<span class="number">00</span>:<span class="number">5</span>c:<span class="number">60</span>:b3:<span class="number">52</span>:<span class="number">96</span>:d4:b2:<span class="number">77</span>:be:<span class="number">2</span>e:<span class="number">97</span>:e4:<span class="number">9</span>b:</span><br><span class="line">         <span class="attribute">e8</span>:cf:<span class="number">40</span>:<span class="number">61</span>:<span class="number">00</span>:<span class="number">13</span>:<span class="number">4</span>f:cf:<span class="number">7</span>c:<span class="number">55</span>:<span class="number">60</span>:<span class="number">6</span>a:<span class="number">8</span>e:<span class="number">57</span>:cd:bf:<span class="number">51</span>:<span class="number">1</span>f:</span><br><span class="line">         <span class="attribute">8c</span>:<span class="number">3</span>f:<span class="number">93</span>:d5:<span class="number">66</span>:f6:d7:<span class="number">3</span>b:a9:<span class="number">56</span>:<span class="number">2</span>e:<span class="number">08</span>:<span class="number">66</span>:<span class="number">5</span>e:<span class="number">3</span>d:ad:c1:<span class="number">2</span>c:</span><br><span class="line">         <span class="attribute">07</span>:e2:<span class="number">95</span>:f2</span><br></pre></td></tr></table></figure><p>主要包含三部分：</p><ul><li>第一部分：Subject 中是我填写的域名的基本信息，这里面，我们只需要关注 CN 字段就行：jinping。CN 是 Common Name 的缩写。</li><li>第二部分：Subject Public Key Info 是公钥部分，这里指定了服务器使用的加密算法是 RSA，公钥长度是 2048 位。</li><li>第三部分：签名，使用了 <code>sha256WithRSAEncryption</code> 算法。也就是说首先将上面的所有信息进行 sha256 散列得到 hash 值，然后使用 RSA 算法对 hash 值进行加密，而加密的秘钥就是之前生成的私钥。</li></ul><blockquote><p>为什么这里要加第三部分的签名？其实就是为了防止你的 CSR 文件在发给 CA 的过程中被中间人拦截，然后修改了里面的信息再发给 CA。<br>CA 的校验过程是：利用里面的公钥将签名进行解密得到里面的散列值，然后 CA 也会利用 CSR 里面的信息计算一遍散列值，如果两者相等，那么说明证书没有被中间人修改过，反之就是被修改过</p></blockquote><h2 id="3-证书组成"><a href="#3-证书组成" class="headerlink" title="3.证书组成"></a>3.证书组成</h2><p>CA 收到我们的 CSR 文件以后，CA 会进行审核，前面说过了，审核这个域名是不是你的，如果需要，还有人工审核公司信息。审核通过后，它就会发给我们证书文件了，每家 CA 出来的文件名可能略有不同，但是表达的信息是一样的。</p><p>主要有以下几个文件：</p><p>域名证书：jinping.xyz.pem 或叫 cert.pem<br>证书链：fullchain.pem<br>这些文件可能是 .pem 也可能是 .crt 后缀，但都是文本文件，可以直接打开查看它们的信息：</p><p>域名证书的文件内容通常是这样的：</p><figure class="highlight jboss-cli"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="params">-----BEGIN</span> CERTIFICATE<span class="params">-----</span></span><br><span class="line">MIIFTzCCBDegAwIBAgISAy4b8ie6L/ACCJt/V7x/OR0iMA0GCSqGSIb3DQEBCwUA</span><br><span class="line">MEoxCzAJBgNVBAYTAlVTMRYwFAYDVQQKEw1MZXQncyBFbmNyeXB0MSMwIQYDVQQD</span><br><span class="line"><span class="string">......</span></span><br><span class="line">Ecbqh4AoB33mZhp9ptJb1N1RSlZREI0FlbX0kUd6VowKUPhH8Iex6jxQpJHwRkpq</span><br><span class="line">YJaWKrUxGWuJurOcN7b3HXn6yw==</span><br><span class="line"><span class="params">-----END</span> CERTIFICATE<span class="params">-----</span></span><br></pre></td></tr></table></figure><p>证书链文件通常是这样的：(证书链文件的第一部分，和证书文件的内容是一模一样的。)</p><figure class="highlight asciidoc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">-----BEGIN CERTIFICATE-----</span><br><span class="line">MIIFTzCCBDegAwIBAgISAy4b8ie6L/ACCJt/V7x/OR0iMA0GCSqGSIb3DQEBCwUA</span><br><span class="line">MEoxCzAJBgNVBAYTAlVTMRYwFAYDVQQKEw1MZXQncyBFbmNyeXB0MSMwIQYDVQQD</span><br><span class="line"><span class="code">.......</span></span><br><span class="line"><span class="code">Ecbqh4AoB33mZhp9ptJb1N1RSlZREI0FlbX0kUd6VowKUPhH8Iex6jxQpJHwRkpq</span></span><br><span class="line"><span class="code">YJaWKrUxGWuJurOcN7b3HXn6yw==</span></span><br><span class="line"><span class="code">-----END CERTIFICATE-----</span></span><br><span class="line"><span class="code">-----BEGIN CERTIFICATE-----</span></span><br><span class="line"><span class="code">MIIEkjCCA3qgAwIBAgIQCgFBQgAAAVOFc2oLheynCDANBgkqhkiG9w0BAQsFADA/</span></span><br><span class="line"><span class="code">MSQwIgYDVQQKExtEaWdpdGFsIFNpZ25hdHVyZSBUcnVzdCBDby4xFzAVBgNVBAMT</span></span><br><span class="line"><span class="code">.......</span></span><br><span class="line">PfZ<span class="code">+G6Z6h7mjem0Y+</span>iWlkYcV4PIWL1iwBi8saCbGS5jN2p8M<span class="code">+X+</span>Q7UNKEkROb3N6</span><br><span class="line">KOqkqm57TH2H3eDJAkSnh6/DNFu0Qg==</span><br><span class="line">-----END CERTIFICATE-----</span><br></pre></td></tr></table></figure><blockquote><p>如果 CA 还给你发了 chain.pem 文件，其实它的内容肯定就是证书链文件内容裁减掉第一部分的证书内容而已。</p></blockquote><p>我们需要的其实就是一个证书链。CA 给我们颁发的证书，其实就是一个证书链文件</p><h2 id="4-文件内容"><a href="#4-文件内容" class="headerlink" title="4.文件内容"></a>4.文件内容</h2><p>decode后的结果：</p><figure class="highlight elixir"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br></pre></td><td class="code"><pre><span class="line"><span class="symbol">Certificate:</span></span><br><span class="line">    <span class="symbol">Data:</span></span><br><span class="line">        <span class="symbol">Version:</span> <span class="number">3</span> (<span class="number">0x2</span>)</span><br><span class="line">        <span class="title class_">Serial</span> <span class="symbol">Number:</span></span><br><span class="line">            <span class="number">02</span><span class="symbol">:ac</span><span class="symbol">:</span><span class="number">5</span><span class="symbol">c:</span><span class="number">26</span><span class="symbol">:</span><span class="number">6</span><span class="symbol">a:</span><span class="number">0</span><span class="symbol">b:</span><span class="number">40</span><span class="symbol">:</span><span class="number">9</span><span class="symbol">b:</span><span class="number">8</span><span class="symbol">f:</span><span class="number">0</span><span class="symbol">b:</span><span class="number">79</span><span class="symbol">:f2</span><span class="symbol">:ae</span><span class="symbol">:</span><span class="number">46</span><span class="symbol">:</span><span class="number">25</span><span class="symbol">:</span><span class="number">77</span></span><br><span class="line">    <span class="title class_">Signature</span> <span class="symbol">Algorithm:</span> sha1WithRSAEncryption</span><br><span class="line">        //证书颁发机构</span><br><span class="line">        <span class="symbol">Issuer:</span> C = <span class="title class_">US</span>, O = <span class="title class_">DigiCert</span> <span class="title class_">Inc</span>, <span class="title class_">OU</span> = www.digicert.com, <span class="title class_">CN</span> = <span class="title class_">DigiCert</span> <span class="title class_">High</span> <span class="title class_">Assurance</span> <span class="title class_">EV</span> <span class="title class_">Root</span> <span class="title class_">CA</span></span><br><span class="line">        //证书有效期</span><br><span class="line">        <span class="title class_">Validity</span></span><br><span class="line">            <span class="title class_">Not</span> <span class="symbol">Before:</span> <span class="title class_">Nov</span> <span class="number">10</span> <span class="number">00</span><span class="symbol">:</span><span class="number">00</span><span class="symbol">:</span><span class="number">00</span> <span class="number">2006</span> <span class="title class_">GMT</span></span><br><span class="line">            <span class="title class_">Not</span> <span class="title class_">After</span> : <span class="title class_">Nov</span> <span class="number">10</span> <span class="number">00</span><span class="symbol">:</span><span class="number">00</span><span class="symbol">:</span><span class="number">00</span> <span class="number">2031</span> <span class="title class_">GMT</span></span><br><span class="line">        // 证书申请信息</span><br><span class="line">        <span class="symbol">Subject:</span> C = <span class="title class_">US</span>, O = <span class="title class_">DigiCert</span> <span class="title class_">Inc</span>, <span class="title class_">OU</span> = www.digicert.com, <span class="title class_">CN</span> = <span class="title class_">DigiCert</span> <span class="title class_">High</span> <span class="title class_">Assurance</span> <span class="title class_">EV</span> <span class="title class_">Root</span> <span class="title class_">CA</span></span><br><span class="line">        // 公钥</span><br><span class="line">        <span class="title class_">Subject</span> <span class="title class_">Public</span> <span class="title class_">Key</span> <span class="symbol">Info:</span></span><br><span class="line">            <span class="title class_">Public</span> <span class="title class_">Key</span> <span class="symbol">Algorithm:</span> rsaEncryption</span><br><span class="line">                <span class="title class_">Public</span>-<span class="symbol">Key:</span> (<span class="number">2048</span> bit)</span><br><span class="line">                <span class="symbol">Modulus:</span></span><br><span class="line">                    <span class="number">00</span><span class="symbol">:c6</span><span class="symbol">:cc</span><span class="symbol">:e5</span><span class="symbol">:</span><span class="number">73</span><span class="symbol">:e6</span><span class="symbol">:fb</span><span class="symbol">:d4</span><span class="symbol">:bb</span><span class="symbol">:e5</span><span class="symbol">:</span><span class="number">2</span><span class="symbol">d:</span><span class="number">2</span><span class="symbol">d:</span><span class="number">32</span><span class="symbol">:a6</span><span class="symbol">:df</span>:</span><br><span class="line">                    <span class="symbol">e5:</span><span class="number">81</span><span class="symbol">:</span><span class="number">3</span><span class="symbol">f:</span><span class="symbol">c9:</span><span class="symbol">cd:</span><span class="number">25</span><span class="symbol">:</span><span class="number">49</span><span class="symbol">:b6</span><span class="symbol">:</span><span class="number">71</span><span class="symbol">:</span><span class="number">2</span><span class="symbol">a:</span><span class="symbol">c3:</span><span class="symbol">d5:</span><span class="number">94</span><span class="symbol">:</span><span class="number">34</span><span class="symbol">:</span><span class="number">67</span>:</span><br><span class="line">                    <span class="symbol">a2:</span><span class="number">0</span><span class="symbol">a:</span><span class="number">1</span><span class="symbol">c:</span><span class="symbol">b0:</span><span class="number">5</span><span class="symbol">f:</span><span class="number">69</span><span class="symbol">:a6</span><span class="symbol">:</span><span class="number">40</span><span class="symbol">:b1</span><span class="symbol">:c4</span><span class="symbol">:b7</span><span class="symbol">:b2</span><span class="symbol">:</span><span class="number">8</span><span class="symbol">f:</span><span class="symbol">d0:</span><span class="number">98</span>:</span><br><span class="line">                    <span class="symbol">a4:</span><span class="symbol">a9:</span><span class="number">41</span><span class="symbol">:</span><span class="number">59</span><span class="symbol">:</span><span class="number">3</span><span class="symbol">a:</span><span class="symbol">d3:</span><span class="symbol">dc:</span><span class="number">94</span><span class="symbol">:d6</span><span class="symbol">:</span><span class="number">3</span><span class="symbol">c:</span><span class="symbol">db:</span><span class="number">74</span><span class="symbol">:</span><span class="number">38</span><span class="symbol">:a4</span><span class="symbol">:</span><span class="number">4</span><span class="symbol">a:</span></span><br><span class="line">                    <span class="symbol">cc:</span><span class="number">4</span><span class="symbol">d:</span><span class="number">25</span><span class="symbol">:</span><span class="number">82</span><span class="symbol">:f7</span><span class="symbol">:</span><span class="number">4</span><span class="symbol">a:</span><span class="symbol">a5:</span><span class="number">53</span><span class="symbol">:</span><span class="number">12</span><span class="symbol">:</span><span class="number">38</span><span class="symbol">:ee</span><span class="symbol">:f3</span><span class="symbol">:</span><span class="number">49</span><span class="symbol">:</span><span class="number">6</span><span class="symbol">d:</span><span class="number">71</span>:</span><br><span class="line">                    <span class="number">91</span><span class="symbol">:</span><span class="number">7</span><span class="symbol">e:</span><span class="number">63</span><span class="symbol">:b6</span><span class="symbol">:ab</span><span class="symbol">:a6</span><span class="symbol">:</span><span class="number">5</span><span class="symbol">f:</span><span class="symbol">c3:</span><span class="symbol">a4:</span><span class="number">84</span><span class="symbol">:f8</span><span class="symbol">:</span><span class="number">4</span><span class="symbol">f:</span><span class="number">62</span><span class="symbol">:</span><span class="number">51</span><span class="symbol">:be</span>:</span><br><span class="line">                    <span class="symbol">f8:</span><span class="symbol">c5:</span><span class="symbol">ec:</span><span class="symbol">db:</span><span class="number">38</span><span class="symbol">:</span><span class="number">92</span><span class="symbol">:e3</span><span class="symbol">:</span><span class="number">06</span><span class="symbol">:e5</span><span class="symbol">:</span><span class="number">08</span><span class="symbol">:</span><span class="number">91</span><span class="symbol">:</span><span class="number">0</span><span class="symbol">c:</span><span class="symbol">c4:</span><span class="number">28</span><span class="symbol">:</span><span class="number">41</span>:</span><br><span class="line">                    <span class="number">55</span><span class="symbol">:fb</span><span class="symbol">:cb</span><span class="symbol">:</span><span class="number">5</span><span class="symbol">a:</span><span class="number">89</span><span class="symbol">:</span><span class="number">15</span><span class="symbol">:</span><span class="number">7</span><span class="symbol">e:</span><span class="number">71</span><span class="symbol">:e8</span><span class="symbol">:</span><span class="number">35</span><span class="symbol">:bf</span><span class="symbol">:</span><span class="number">4</span><span class="symbol">d:</span><span class="number">72</span><span class="symbol">:</span><span class="number">09</span><span class="symbol">:</span><span class="number">3</span><span class="symbol">d:</span></span><br><span class="line">                    <span class="symbol">be:</span><span class="number">3</span><span class="symbol">a:</span><span class="number">38</span><span class="symbol">:</span><span class="number">50</span><span class="symbol">:</span><span class="number">5</span><span class="symbol">b:</span><span class="number">77</span><span class="symbol">:</span><span class="number">31</span><span class="symbol">:</span><span class="number">1</span><span class="symbol">b:</span><span class="number">8</span><span class="symbol">d:</span><span class="symbol">b3:</span><span class="symbol">c7:</span><span class="number">24</span><span class="symbol">:</span><span class="number">45</span><span class="symbol">:</span><span class="number">9</span><span class="symbol">a:</span><span class="symbol">a7:</span></span><br><span class="line">                    <span class="symbol">ac:</span><span class="number">6</span><span class="symbol">d:</span><span class="number">00</span><span class="symbol">:</span><span class="number">14</span><span class="symbol">:</span><span class="number">5</span><span class="symbol">a:</span><span class="number">04</span><span class="symbol">:b7</span><span class="symbol">:ba</span><span class="symbol">:</span><span class="number">13</span><span class="symbol">:eb</span><span class="symbol">:</span><span class="number">51</span><span class="symbol">:</span><span class="number">0</span><span class="symbol">a:</span><span class="number">98</span><span class="symbol">:</span><span class="number">41</span><span class="symbol">:</span><span class="number">41</span>:</span><br><span class="line">                    <span class="number">22</span><span class="symbol">:</span><span class="number">4</span><span class="symbol">e:</span><span class="number">65</span><span class="symbol">:</span><span class="number">61</span><span class="symbol">:</span><span class="number">87</span><span class="symbol">:</span><span class="number">81</span><span class="symbol">:</span><span class="number">41</span><span class="symbol">:</span><span class="number">50</span><span class="symbol">:a6</span><span class="symbol">:</span><span class="number">79</span><span class="symbol">:</span><span class="number">5</span><span class="symbol">c:</span><span class="number">89</span><span class="symbol">:de</span><span class="symbol">:</span><span class="number">19</span><span class="symbol">:</span><span class="number">4</span><span class="symbol">a:</span></span><br><span class="line">                    <span class="number">57</span><span class="symbol">:d5</span><span class="symbol">:</span><span class="number">2</span><span class="symbol">e:</span><span class="symbol">e6:</span><span class="number">5</span><span class="symbol">d:</span><span class="number">1</span><span class="symbol">c:</span><span class="number">53</span><span class="symbol">:</span><span class="number">2</span><span class="symbol">c:</span><span class="number">7</span><span class="symbol">e:</span><span class="number">98</span><span class="symbol">:cd</span><span class="symbol">:</span><span class="number">1</span><span class="symbol">a:</span><span class="number">06</span><span class="symbol">:</span><span class="number">16</span><span class="symbol">:a4</span>:</span><br><span class="line">                    <span class="number">68</span><span class="symbol">:</span><span class="number">73</span><span class="symbol">:d0</span><span class="symbol">:</span><span class="number">34</span><span class="symbol">:</span><span class="number">04</span><span class="symbol">:</span><span class="number">13</span><span class="symbol">:</span><span class="number">5</span><span class="symbol">c:</span><span class="symbol">a1:</span><span class="number">71</span><span class="symbol">:d3</span><span class="symbol">:</span><span class="number">5</span><span class="symbol">a:</span><span class="number">7</span><span class="symbol">c:</span><span class="number">55</span><span class="symbol">:db</span><span class="symbol">:</span><span class="number">5</span><span class="symbol">e:</span></span><br><span class="line">                    <span class="number">64</span><span class="symbol">:e1</span><span class="symbol">:</span><span class="number">37</span><span class="symbol">:</span><span class="number">87</span><span class="symbol">:</span><span class="number">30</span><span class="symbol">:</span><span class="number">56</span><span class="symbol">:</span><span class="number">04</span><span class="symbol">:e5</span><span class="symbol">:</span><span class="number">11</span><span class="symbol">:b4</span><span class="symbol">:</span><span class="number">29</span><span class="symbol">:</span><span class="number">80</span><span class="symbol">:</span><span class="number">12</span><span class="symbol">:f1</span><span class="symbol">:</span><span class="number">79</span>:</span><br><span class="line">                    <span class="number">39</span><span class="symbol">:</span><span class="number">88</span><span class="symbol">:a2</span><span class="symbol">:</span><span class="number">02</span><span class="symbol">:</span><span class="number">11</span><span class="symbol">:</span><span class="number">7</span><span class="symbol">c:</span><span class="number">27</span><span class="symbol">:</span><span class="number">66</span><span class="symbol">:b7</span><span class="symbol">:</span><span class="number">88</span><span class="symbol">:b7</span><span class="symbol">:</span><span class="number">78</span><span class="symbol">:f2</span><span class="symbol">:ca</span><span class="symbol">:</span><span class="number">0</span><span class="symbol">a:</span></span><br><span class="line">                    <span class="symbol">a8:</span><span class="number">38</span><span class="symbol">:ab</span><span class="symbol">:</span><span class="number">0</span><span class="symbol">a:</span><span class="number">64</span><span class="symbol">:c2</span><span class="symbol">:bf</span><span class="symbol">:</span><span class="number">66</span><span class="symbol">:</span><span class="number">5</span><span class="symbol">d:</span><span class="number">95</span><span class="symbol">:</span><span class="number">84</span><span class="symbol">:c1</span><span class="symbol">:a1</span><span class="symbol">:</span><span class="number">25</span><span class="symbol">:</span><span class="number">1</span><span class="symbol">e:</span></span><br><span class="line">                    <span class="number">87</span><span class="symbol">:</span><span class="number">5</span><span class="symbol">d:</span><span class="number">1</span><span class="symbol">a:</span><span class="number">50</span><span class="symbol">:</span><span class="number">0</span><span class="symbol">b:</span><span class="number">20</span><span class="symbol">:</span><span class="number">12</span><span class="symbol">:cc</span><span class="symbol">:</span><span class="number">41</span><span class="symbol">:bb</span><span class="symbol">:</span><span class="number">6</span><span class="symbol">e:</span><span class="number">0</span><span class="symbol">b:</span><span class="number">51</span><span class="symbol">:</span><span class="number">38</span><span class="symbol">:b8</span>:</span><br><span class="line">                    <span class="number">4</span><span class="symbol">b:</span>cb</span><br><span class="line">                <span class="symbol">Exponent:</span> <span class="number">65537</span> (<span class="number">0x10001</span>)</span><br><span class="line">        // 这部分内容我们忽略</span><br><span class="line">        <span class="title class_">X509v3</span> <span class="symbol">extensions:</span></span><br><span class="line">            <span class="title class_">X509v3</span> <span class="title class_">Key</span> <span class="symbol">Usage:</span> critical</span><br><span class="line">                <span class="title class_">Digital</span> <span class="title class_">Signature</span>, <span class="title class_">Certificate</span> <span class="title class_">Sign</span>, <span class="title class_">CRL</span> <span class="title class_">Sign</span></span><br><span class="line">            <span class="title class_">X509v3</span> <span class="title class_">Basic</span> <span class="symbol">Constraints:</span> critical</span><br><span class="line">                <span class="symbol">CA:</span><span class="title class_">TRUE</span></span><br><span class="line">            <span class="title class_">X509v3</span> <span class="title class_">Subject</span> <span class="title class_">Key</span> <span class="symbol">Identifier:</span> </span><br><span class="line">                <span class="symbol">B1:</span><span class="number">3</span><span class="symbol">E:</span><span class="symbol">C3:</span><span class="number">69</span><span class="symbol">:</span><span class="number">03</span><span class="symbol">:F8</span><span class="symbol">:BF</span><span class="symbol">:</span><span class="number">47</span><span class="symbol">:</span><span class="number">01</span><span class="symbol">:D4</span><span class="symbol">:</span><span class="number">98</span><span class="symbol">:</span><span class="number">26</span><span class="symbol">:</span><span class="number">1</span><span class="symbol">A:</span><span class="number">08</span><span class="symbol">:</span><span class="number">02</span><span class="symbol">:EF</span><span class="symbol">:</span><span class="number">63</span><span class="symbol">:</span><span class="number">64</span><span class="symbol">:</span><span class="number">2</span><span class="symbol">B:</span><span class="title class_">C3</span></span><br><span class="line">            <span class="title class_">X509v3</span> <span class="title class_">Authority</span> <span class="title class_">Key</span> <span class="symbol">Identifier:</span> </span><br><span class="line">                <span class="symbol">keyid:</span><span class="symbol">B1:</span><span class="number">3</span><span class="symbol">E:</span><span class="symbol">C3:</span><span class="number">69</span><span class="symbol">:</span><span class="number">03</span><span class="symbol">:F8</span><span class="symbol">:BF</span><span class="symbol">:</span><span class="number">47</span><span class="symbol">:</span><span class="number">01</span><span class="symbol">:D4</span><span class="symbol">:</span><span class="number">98</span><span class="symbol">:</span><span class="number">26</span><span class="symbol">:</span><span class="number">1</span><span class="symbol">A:</span><span class="number">08</span><span class="symbol">:</span><span class="number">02</span><span class="symbol">:EF</span><span class="symbol">:</span><span class="number">63</span><span class="symbol">:</span><span class="number">64</span><span class="symbol">:</span><span class="number">2</span><span class="symbol">B:</span><span class="title class_">C3</span></span><br><span class="line">    // 签名</span><br><span class="line">    <span class="title class_">Signature</span> <span class="symbol">Algorithm:</span> sha1WithRSAEncryption</span><br><span class="line">         <span class="number">1</span><span class="symbol">c:</span><span class="number">1</span><span class="symbol">a:</span><span class="number">06</span><span class="symbol">:</span><span class="number">97</span><span class="symbol">:dc</span><span class="symbol">:d7</span><span class="symbol">:</span><span class="number">9</span><span class="symbol">c:</span><span class="number">9</span><span class="symbol">f:</span><span class="number">3</span><span class="symbol">c:</span><span class="number">88</span><span class="symbol">:</span><span class="number">66</span><span class="symbol">:</span><span class="number">06</span><span class="symbol">:</span><span class="number">08</span><span class="symbol">:</span><span class="number">57</span><span class="symbol">:</span><span class="number">21</span><span class="symbol">:db</span><span class="symbol">:</span><span class="number">21</span><span class="symbol">:</span><span class="number">47</span>:</span><br><span class="line">         <span class="symbol">f8:</span><span class="number">2</span><span class="symbol">a:</span><span class="number">67</span><span class="symbol">:aa</span><span class="symbol">:bf</span><span class="symbol">:</span><span class="number">18</span><span class="symbol">:</span><span class="number">32</span><span class="symbol">:</span><span class="number">76</span><span class="symbol">:</span><span class="number">40</span><span class="symbol">:</span><span class="number">10</span><span class="symbol">:</span><span class="number">57</span><span class="symbol">:c1</span><span class="symbol">:</span><span class="number">8</span><span class="symbol">a:</span><span class="symbol">f3:</span><span class="number">7</span><span class="symbol">a:</span><span class="symbol">d9:</span><span class="number">11</span><span class="symbol">:</span><span class="number">65</span>:</span><br><span class="line">         <span class="number">8</span><span class="symbol">e:</span><span class="number">35</span><span class="symbol">:fa</span><span class="symbol">:</span><span class="number">9</span><span class="symbol">e:</span><span class="symbol">fc:</span><span class="number">45</span><span class="symbol">:b5</span><span class="symbol">:</span><span class="number">9</span><span class="symbol">e:</span><span class="symbol">d9:</span><span class="number">4</span><span class="symbol">c:</span><span class="number">31</span><span class="symbol">:</span><span class="number">4</span><span class="symbol">b:</span><span class="symbol">b8:</span><span class="number">91</span><span class="symbol">:e8</span><span class="symbol">:</span><span class="number">43</span><span class="symbol">:</span><span class="number">2</span><span class="symbol">c:</span><span class="number">8</span><span class="symbol">e:</span></span><br><span class="line">         <span class="symbol">b3:</span><span class="number">78</span><span class="symbol">:ce</span><span class="symbol">:db</span><span class="symbol">:e3</span><span class="symbol">:</span><span class="number">53</span><span class="symbol">:</span><span class="number">79</span><span class="symbol">:</span><span class="number">71</span><span class="symbol">:d6</span><span class="symbol">:e5</span><span class="symbol">:</span><span class="number">21</span><span class="symbol">:</span><span class="number">94</span><span class="symbol">:</span><span class="number">01</span><span class="symbol">:da</span><span class="symbol">:</span><span class="number">55</span><span class="symbol">:</span><span class="number">87</span><span class="symbol">:</span><span class="number">9</span><span class="symbol">a:</span><span class="number">24</span>:</span><br><span class="line">         <span class="number">64</span><span class="symbol">:f6</span><span class="symbol">:</span><span class="number">8</span><span class="symbol">a:</span><span class="number">66</span><span class="symbol">:cc</span><span class="symbol">:de</span><span class="symbol">:</span><span class="number">9</span><span class="symbol">c:</span><span class="number">37</span><span class="symbol">:cd</span><span class="symbol">:a8</span><span class="symbol">:</span><span class="number">34</span><span class="symbol">:b1</span><span class="symbol">:</span><span class="number">69</span><span class="symbol">:</span><span class="number">9</span><span class="symbol">b:</span><span class="number">23</span><span class="symbol">:c8</span><span class="symbol">:</span><span class="number">9</span><span class="symbol">e:</span><span class="number">78</span>:</span><br><span class="line">         <span class="number">22</span><span class="symbol">:</span><span class="number">2</span><span class="symbol">b:</span><span class="number">70</span><span class="symbol">:</span><span class="number">43</span><span class="symbol">:e3</span><span class="symbol">:</span><span class="number">55</span><span class="symbol">:</span><span class="number">47</span><span class="symbol">:</span><span class="number">31</span><span class="symbol">:</span><span class="number">61</span><span class="symbol">:</span><span class="number">19</span><span class="symbol">:ef</span><span class="symbol">:</span><span class="number">58</span><span class="symbol">:c5</span><span class="symbol">:</span><span class="number">85</span><span class="symbol">:</span><span class="number">2</span><span class="symbol">f:</span><span class="number">4</span><span class="symbol">e:</span><span class="number">30</span><span class="symbol">:f6</span>:</span><br><span class="line">         <span class="symbol">a0:</span><span class="number">31</span><span class="symbol">:</span><span class="number">16</span><span class="symbol">:</span><span class="number">23</span><span class="symbol">:c8</span><span class="symbol">:e7</span><span class="symbol">:e2</span><span class="symbol">:</span><span class="number">65</span><span class="symbol">:</span><span class="number">16</span><span class="symbol">:</span><span class="number">33</span><span class="symbol">:cb</span><span class="symbol">:bf</span><span class="symbol">:</span><span class="number">1</span><span class="symbol">a:</span><span class="number">1</span><span class="symbol">b:</span><span class="symbol">a0:</span><span class="number">3</span><span class="symbol">d:</span><span class="symbol">f8:</span><span class="symbol">ca:</span></span><br><span class="line">         <span class="number">5</span><span class="symbol">e:</span><span class="number">8</span><span class="symbol">b:</span><span class="number">31</span><span class="symbol">:</span><span class="number">8</span><span class="symbol">b:</span><span class="number">60</span><span class="symbol">:</span><span class="number">08</span><span class="symbol">:</span><span class="number">89</span><span class="symbol">:</span><span class="number">2</span><span class="symbol">d:</span><span class="number">0</span><span class="symbol">c:</span><span class="number">06</span><span class="symbol">:</span><span class="number">5</span><span class="symbol">c:</span><span class="number">52</span><span class="symbol">:b7</span><span class="symbol">:c4</span><span class="symbol">:f9</span><span class="symbol">:</span><span class="number">0</span><span class="symbol">a:</span><span class="number">98</span><span class="symbol">:d1</span>:</span><br><span class="line">         <span class="number">15</span><span class="symbol">:</span><span class="number">5</span><span class="symbol">f:</span><span class="number">9</span><span class="symbol">f:</span><span class="number">12</span><span class="symbol">:be</span><span class="symbol">:</span><span class="number">7</span><span class="symbol">c:</span><span class="number">36</span><span class="symbol">:</span><span class="number">63</span><span class="symbol">:</span><span class="number">38</span><span class="symbol">:bd</span><span class="symbol">:</span><span class="number">44</span><span class="symbol">:a4</span><span class="symbol">:</span><span class="number">7</span><span class="symbol">f:</span><span class="symbol">e4:</span><span class="number">26</span><span class="symbol">:</span><span class="number">2</span><span class="symbol">b:</span><span class="number">0</span><span class="symbol">a:</span><span class="symbol">c4:</span></span><br><span class="line">         <span class="number">97</span><span class="symbol">:</span><span class="number">69</span><span class="symbol">:</span><span class="number">0</span><span class="symbol">d:</span><span class="symbol">e9:</span><span class="number">8</span><span class="symbol">c:</span><span class="symbol">e2:</span><span class="symbol">c0:</span><span class="number">10</span><span class="symbol">:</span><span class="number">57</span><span class="symbol">:b8</span><span class="symbol">:c8</span><span class="symbol">:</span><span class="number">76</span><span class="symbol">:</span><span class="number">12</span><span class="symbol">:</span><span class="number">91</span><span class="symbol">:</span><span class="number">55</span><span class="symbol">:f2</span><span class="symbol">:</span><span class="number">48</span><span class="symbol">:</span><span class="number">69</span>:</span><br><span class="line">         <span class="symbol">d8:</span><span class="symbol">bc:</span><span class="number">2</span><span class="symbol">a:</span><span class="number">02</span><span class="symbol">:</span><span class="number">5</span><span class="symbol">b:</span><span class="number">0</span><span class="symbol">f:</span><span class="number">44</span><span class="symbol">:d4</span><span class="symbol">:</span><span class="number">20</span><span class="symbol">:</span><span class="number">31</span><span class="symbol">:db</span><span class="symbol">:f4</span><span class="symbol">:ba</span><span class="symbol">:</span><span class="number">70</span><span class="symbol">:</span><span class="number">26</span><span class="symbol">:</span><span class="number">5</span><span class="symbol">d:</span><span class="number">90</span><span class="symbol">:</span><span class="number">60</span>:</span><br><span class="line">         <span class="number">9</span><span class="symbol">e:</span><span class="symbol">bc:</span><span class="number">4</span><span class="symbol">b:</span><span class="number">17</span><span class="symbol">:</span><span class="number">09</span><span class="symbol">:</span><span class="number">2</span><span class="symbol">f:</span><span class="symbol">b4:</span><span class="symbol">cb:</span><span class="number">1</span><span class="symbol">e:</span><span class="number">43</span><span class="symbol">:</span><span class="number">68</span><span class="symbol">:c9</span><span class="symbol">:</span><span class="number">07</span><span class="symbol">:</span><span class="number">27</span><span class="symbol">:c1</span><span class="symbol">:d2</span><span class="symbol">:</span><span class="number">5</span><span class="symbol">c:</span><span class="symbol">f7:</span></span><br><span class="line">         <span class="symbol">ea:</span><span class="number">21</span><span class="symbol">:b9</span><span class="symbol">:</span><span class="number">68</span><span class="symbol">:</span><span class="number">12</span><span class="symbol">:</span><span class="number">9</span><span class="symbol">c:</span><span class="number">3</span><span class="symbol">c:</span><span class="number">9</span><span class="symbol">c:</span><span class="symbol">bf:</span><span class="number">9</span><span class="symbol">e:</span><span class="symbol">fc:</span><span class="number">80</span><span class="symbol">:</span><span class="number">5</span><span class="symbol">c:</span><span class="number">9</span><span class="symbol">b:</span><span class="number">63</span><span class="symbol">:cd</span><span class="symbol">:ec</span><span class="symbol">:</span><span class="number">47</span>:</span><br><span class="line">         <span class="symbol">aa:</span><span class="number">25</span><span class="symbol">:</span><span class="number">27</span><span class="symbol">:</span><span class="number">67</span><span class="symbol">:a0</span><span class="symbol">:</span><span class="number">37</span><span class="symbol">:f3</span><span class="symbol">:</span><span class="number">00</span><span class="symbol">:</span><span class="number">82</span><span class="symbol">:</span><span class="number">7</span><span class="symbol">d:</span><span class="number">54</span><span class="symbol">:d7</span><span class="symbol">:a9</span><span class="symbol">:f8</span><span class="symbol">:e9</span><span class="symbol">:</span><span class="number">2</span><span class="symbol">e:</span><span class="number">13</span><span class="symbol">:a3</span>:</span><br><span class="line">         <span class="number">77</span><span class="symbol">:e8</span><span class="symbol">:</span><span class="number">1</span><span class="symbol">f:</span><span class="number">4</span>a</span><br></pre></td></tr></table></figure><p>证书中主要包含：</p><ul><li>证书颁发机构：用于寻找链中的下一个验证节点</li><li>证书的有效期：比如浏览器要根据这个值来判断证书是否已过期</li><li>证书申请信息：比如浏览器要判断改证书是否可用于当前访问的域名</li><li>公钥：用于后续和服务端通信的秘钥，这个公钥和当初生成 CSR 时的公钥是一个东西，因为只有它是和服务器的私钥是一对的</li><li>签名：用于验证证书内容没有被篡改</li></ul><p><strong>这里简单说一说这个证书里面的公钥和签名：</strong></p><p>前面在介绍生成 CSR 的时候，我们说过了，签名部分，是服务器使用私钥加密 hash 值得到的，同时在 CSR 中包含了公钥，这样 CA 在收到这个文件后，可以用 CSR 文件中的公钥来解密签名，进而做校验。<br>而这里不一样，这个证书是 CA 给我们的，自然这个签名也是 CA 使用它自己的私钥进行加密的，但是这里的公钥是我们服务器的公钥，显然不能用于解密签名。<br>那对于用户浏览器来说，在收到这个证书以后，怎么校验这个证书的签名呢？显然浏览器需要得到 CA 的公钥。下一节我们就将详细描述这个过程。</p><h1 id="四-HTTPS验证过程"><a href="#四-HTTPS验证过程" class="headerlink" title="四.HTTPS验证过程"></a>四.HTTPS验证过程</h1><p>下面将使用 jinping.xyz 这个域名的证书来分析。</p><img src="/2021/07/20/HTTPS%E5%8E%9F%E7%90%86/3.png" class title="CA"><p>首先，我们可以看到，这个证书链由 3 个证书组成。jinping.xyz 证书由中间证书 R3 签发，中间证书由 DST Root CA X3 签发，而 DST Root CA X3 是一个受信任的根证书。</p><p>流程如下：</p><ol><li>用户访问 <a href="https://jinping.xyz,服务器返回/">https://jinping.xyz，服务器返回</a> CA 给的证书链，其中包含了 jinping.xyz 证书以及中间证书；</li><li>浏览器首先需要判断 jinping.xyz 的证书是不是可信的，关键的一步就是要解密证书的签名部分。因为证书是由中间证书签发的，所以要用中间证书里面的公钥来进行解密；</li><li>第 2 步初步判断了 jinping.xyz 的证书是合法的，但是，这个是基于中间证书合法的基础上来的，所以接下来要判断中间证书是否是合法的；</li><li>根据中间证书里面的信息，可以知道它是由 DST Root CA X3 签发的，由于证书链只有两个节点，所以要到操作系统的根证书库中查找，由于这个证书是一个使用非常广泛的根证书，所以在系统中可以找到它。然后利用根证书的公钥来解密中间证书的签名部分，进而判断中间证书是否合法，如果合法，整个流程就通了</li></ol><p>我们思考一下：</p><ul><li>这个系统要工作好，关键就是最终一定要走到本地根证书库，一环验证一环，实现整个链路证书的可信任；</li><li>中间证书有多少层都可以，只要能一直传递到根证书就行；</li><li>本地的根证书是由操作系统内置的，如果你的使用场景中，根证书不在系统预装里面，需要手动导入根证书；</li><li>另外，我这里使用了操作系统内置这个说法，其实也不准确吧，各大浏览器厂商可以自己内置这个根证书库，这样我想信任谁就信任谁，而不是听 Microsoft、Apple… 这些操作系统厂商的。</li></ul><p>脑洞大开一下，如果你想开一家 CA 公司，技术上是没什么成本的，但是你要说服各大操作系统、浏览器厂商，把你家的根证书内置到里面，这就有点难了。当然，还有另一条路可以走，那就是不要搞根证书，基于某个 CA 搞个中间证书，然后用这个中间证书去签发证书就可以了。</p>]]></content>
    
    
    <summary type="html">&lt;meta name=&quot;referrer&quot; content=&quot;no-referrer&quot;&gt;
HTTP请求都是明文传输的，所谓的明文指的是没有经过加密的信息，如果HTTP请求被黑客拦截，并且里面含有银行卡密码等敏感数据的话，会非常危险。为了解决这个问题，Netscape 公司制定了HTTPS协议，HTTPS可以将数据加密传输，也就是传输的是密文，即便黑客在传输过程中拦截到数据也无法破译，这就保证了网络通信的安全。

&lt;h1 id=&quot;一-密码学基础&quot;&gt;&lt;a href=&quot;#一-密码学基础&quot; class=&quot;headerlink&quot; title=&quot;一.密码学基础&quot;&gt;&lt;/a&gt;一.密码学基础&lt;/h1&gt;&lt;h2 id=&quot;明文&quot;&gt;&lt;a href=&quot;#明文&quot; class=&quot;headerlink&quot; title=&quot;明文&quot;&gt;&lt;/a&gt;明文&lt;/h2&gt;&lt;p&gt;明文指的是未被加密过的原始数据&lt;/p&gt;
&lt;h2 id=&quot;密文&quot;&gt;&lt;a href=&quot;#密文&quot; class=&quot;headerlink&quot; title=&quot;密文&quot;&gt;&lt;/a&gt;密文&lt;/h2&gt;&lt;p&gt;明文被某种加密算法加密之后，会变成密文，从而确保原始数据的安全。密文也可以被解密，得到原始的明文。&lt;/p&gt;
&lt;h2 id=&quot;密钥&quot;&gt;&lt;a href=&quot;#密钥&quot; class=&quot;headerlink&quot; title=&quot;密钥&quot;&gt;&lt;/a&gt;密钥&lt;/h2&gt;&lt;p&gt;密钥是一种参数，它是在明文转换为密文或将密文转换为明文的算法中输入的参数。密钥分为&lt;code&gt;对称密钥&lt;/code&gt;与&lt;code&gt;非对称密钥&lt;/code&gt;，分别应用在对称加密和非对称加密上。&lt;/p&gt;
&lt;h2 id=&quot;对称加密&quot;&gt;&lt;a href=&quot;#对称加密&quot; class=&quot;headerlink&quot; title=&quot;对称加密&quot;&gt;&lt;/a&gt;对称加密&lt;/h2&gt;&lt;p&gt;对称加密又叫做私钥加密，即信息的发送方和接收方使用同一个密钥去加密和解密数据。对称加密的特点是算法公开、加密和解密速度快，适合于对大数据量进行加密，常见的对称加密算法有DES、3DES、TDEA、Blowfish、RC5和IDEA。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;加密：明文+加密算法+私钥—&amp;gt;密文&lt;/li&gt;
&lt;li&gt;解密：密文+解密算法+私钥—&amp;gt;明文&lt;/li&gt;&lt;/ul&gt;</summary>
    
    
    
    <category term="计算机基础" scheme="https://utinner.gitee.io/categories/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/"/>
    
    
    <category term="网络" scheme="https://utinner.gitee.io/tags/%E7%BD%91%E7%BB%9C/"/>
    
    <category term="http，ssl" scheme="https://utinner.gitee.io/tags/http%EF%BC%8Cssl/"/>
    
  </entry>
  
  <entry>
    <title>Java类加载机制</title>
    <link href="https://utinner.gitee.io/2021/07/20/Java%E7%B1%BB%E5%8A%A0%E8%BD%BD%E6%9C%BA%E5%88%B6/"/>
    <id>https://utinner.gitee.io/2021/07/20/Java%E7%B1%BB%E5%8A%A0%E8%BD%BD%E6%9C%BA%E5%88%B6/</id>
    <published>2021-07-20T07:28:25.000Z</published>
    <updated>2021-12-06T09:23:00.732Z</updated>
    
    <content type="html"><![CDATA[<meta name="referrer" content="no-referrer"><hr><h1 id="一-对象的创建"><a href="#一-对象的创建" class="headerlink" title="一.对象的创建"></a>一.对象的创建</h1><p>当Java虚拟机遇到一条字节码new指令的时候，首先将去检查这个指令的参数是否能在常量池中定位到一个类的符号引用，并且检查这个符号引用代表的类是否已被加载、解析和初始化过。如果没有，那必须先执行相应的类加载过程。</p><span id="more"></span><hr><h1 id="二-类加载的时机"><a href="#二-类加载的时机" class="headerlink" title="二.类加载的时机"></a>二.类加载的时机</h1><p>一个类型从被加载到虚拟机内存中开始，到卸载出内存为止，它的整个生命周期将会经历<code>加载（loading）</code>、<code>验证（Verfication）</code>、<code>准备（Preparation）</code>、<code>解析（Resolution）</code>、<code>初始化（Initialization）</code>、<code>使用（Using）</code>、<code>卸载（Unloading）</code>七个阶段，其中<em>验证、准备、解析三个部分统称为连接（Linking）</em>。</p><img src="/2021/07/20/Java%E7%B1%BB%E5%8A%A0%E8%BD%BD%E6%9C%BA%E5%88%B6/1.png" class title="Java类加载机制"><p>加载、验证、准备、初始化和卸载这五个阶段的顺序是确定的，类型加载过程必须按照这种顺序按部就班地开始，而解析阶段则不一定：它在某些情况下可以在初始化阶段之后再开始，这是为了支持Java语言的运行时绑定特性（也称为动态绑定或晚期绑定）。这些阶段通常都是互相交叉地混合进行的，会在一个阶段执行的过程中调用、激活另一个阶段。</p><p><strong>对于初始化阶段，有且只有六种情况必须立即对类进行“初始化”（而加载、验证、准备自然需要在此之前开始）：</strong></p><ol><li><p>遇到new、getstatic、putstatic或invokestatic这四条字节码指令时，如果类型没有进行过初始化，则需要先触发其初始化阶段。能够生成这四条指令的典型Java代码有：</p><ul><li>使用new关键字实例化对象的时候</li><li>读取或设置一个类型的静态字段（被final修饰、已在编译期把结果放入常量池的静态字段除外）的时候</li><li>调用一个类型的静态方法的时候</li></ul></li><li><p>使用java.lang.reflect包的方法对类型进行反射调用的时候，如果类型没有进行过初始化，则需要先触发其初始化</p></li><li><p>当初始化类的时候，如果发现其父类还没有进行过初始化，则需要先触发其父类的初始化</p></li><li><p>当虚拟机启动时，用户需要制定一个要执行的主类（包含main()方法的那个类），虚拟机会先初始化这个主类</p></li><li><p>当使用JDK7新加入的动态语言支持时，如果一个java.lang.invoke.MethodHandle实例最后的解析结果为REF_getStatic、REF_putStatic、REF_invokeStatic、REF_newInvokeSpecial四种类型的方法句柄，并且这个方法句柄对应的类没有进行过初始化，则需要先触发其初始化</p></li><li><p>当一个接口中定义JDK8新加入的默认方法（被default关键字修饰的接口方法）时，如果有这个接口的实现类发生了初始化，那该接口要在其之前被初始化</p></li></ol><p>对于这六种会触发类型进行初始化的场景，这六种场景的行为称为对一个类型进行<strong>主动引用</strong>。除此之外，所有引用类型的方式都不会触发初始化，被称为<strong>被动引用</strong>。</p><h2 id="接口与类的区别"><a href="#接口与类的区别" class="headerlink" title="接口与类的区别"></a>接口与类的区别</h2><p>接口与类真正有所区别的是前面讲述的六种“有且仅有”需要触发初始化场景中的第三种：<br>当一个类在初始化时，要求其父类全部都已经初始化过了，但是一个接口在初始化时，并不要求其父接口全部都完成了初始化，只有在真正使用到父接口（如引用接口中定义的常量）的时候才会初始化。</p><hr><h1 id="三-类加载的过程"><a href="#三-类加载的过程" class="headerlink" title="三.类加载的过程"></a>三.类加载的过程</h1><h2 id="加载"><a href="#加载" class="headerlink" title="加载"></a>加载</h2><p>在加载阶段，Java虚拟机需要完成以下三件事情：</p><ol><li>通过一个类的全限定名来获取定义此类的二进制字节流</li><li>将这个字节流所代表的静态存储结构转化为方法区的运行时数据结构</li><li>在内存中生成一个代表这个类的java.lang.Class对象，作为方法区这个类的各种数据的访问入口</li></ol><p>对于数组类而言，情况有所不同，数组类本身不通过类加载器创建，它是由Java虚拟机直接在内存中动态构造出来的。一个数组类（下面简称为C）创建过程中遵循以下规则：</p><ul><li>如果数组的组件类型（Component Type，指的是数组去掉一个纬度的类型）是引用类型，那就递归采用默认的加载过程去加载这个组件类型，数组C将被标识在加载该组件类型的类加载器的类名称空间上（一个类型必须与类加载器一起确定唯一性）。</li><li>如果数组的组件类型不是引用类型，Java虚拟机将会把数组C标记为与引导类加载器关联。</li><li>数组类的可访问性与它的组件类型的可访问性一致，如果组件类型不是引用类型，它的数组类的可访问性将默认为public，可被所有的类和接口访问</li></ul><p>加载阶段与连接阶段的部分动作（如一部分字节码文件格式验证动作）是交叉进行的，加载阶段尚未完成，连接阶段可能已经开始，但这些夹在加载阶段之中进行的动作，仍然属于连接阶段的一部分，这两个阶段的开始时间仍然保持着固定的先后顺序。</p><h2 id="验证"><a href="#验证" class="headerlink" title="验证"></a>验证</h2><p>验证是连接阶段的第一步，这一阶段的目的是确保Class文件的字节流中包含的信息符合《Java虚拟机规范》的全部约束要求，保证这些信息被当作代码运行后不会危害虚拟机自身的安全。</p><p>验证阶段主要包括：</p><ul><li>文件格式验证，验证字节流是否符合Class文件格式的规范，并且能被当前版本的虚拟机处理</li><li>元数据验证，对字节码描述的信息进行语义分析</li><li>字节码验证，通过数据流分析和控制流分析，确定程序语义是合法的、符合逻辑的。</li><li>符号引用验证，最后一个阶段的校验行为发生在虚拟机将符号引用转化为直接引用的时候，这个转化动作将在<strong>解析</strong>阶段中发生。</li></ul><blockquote><p>在生产环境的实施阶段可以考虑使用-Xverify:none参数来关闭大部分的类验证措施，以缩短虚拟机类加载的时间</p></blockquote><h2 id="准备"><a href="#准备" class="headerlink" title="准备"></a>准备</h2><p>准备阶段是正式为类中定义的变量（即静态变量，被static修饰的变量）分配内存并设置类变量初始值的阶段。</p><ul><li>这个阶段仅对类变量，不包括实例变量，实例变量将会在对象实例化时随着对象一起分配在Java堆中。</li><li>初始值都是各种基础数据类型的默认值，而非程序员声明时的赋值。</li></ul><h2 id="解析"><a href="#解析" class="headerlink" title="解析"></a>解析</h2><p>解析阶段是Java虚拟机将常量池内的符号引用替换为直接引用的过程</p><ul><li>类或接口的解析</li><li>字段解析</li><li>方法解析</li></ul><h2 id="初始化"><a href="#初始化" class="headerlink" title="初始化"></a>初始化</h2><p>类的初始化阶段是类加载过程的最后一个步骤。</p><p>在准备阶段时，变量已经赋过一次系统要求的初始零值，而在初始化阶段，则会根据程序员通过程序编码制定的主观计划去初始化类变量和其他资源。</p><hr><h1 id="4-类加载器"><a href="#4-类加载器" class="headerlink" title="4.类加载器"></a>4.类加载器</h1><h2 id="类与类加载器"><a href="#类与类加载器" class="headerlink" title="类与类加载器"></a>类与类加载器</h2><p>类加载器虽然只用于实现类的加载动作，但是它在Java程序中起到的作用却远超类加载阶段。对于任意一个类，都必须由加载它的类加载器和这个类本身一起共同确立其在Java虚拟机中的唯一性，每一个类加载器，都有一个唯一独立的类名称空间。比较两个类是否“相等”，只有在这两个类是由同一个类加载器加载的前提下才有意义，否则，即使这两个类来源于同一个Class文件，被同一个Java虚拟机加载，只要加载它们的类加载器不同，那么这两个类就必不相等。</p><h2 id="双亲委派模型"><a href="#双亲委派模型" class="headerlink" title="双亲委派模型"></a>双亲委派模型</h2><p>站在Java虚拟机的角度来看，只存在两种不同的类加载器：</p><ol><li>启动类加载器（Bootstrap ClassLoader），这个类加载器使用C++语言实现，是虚拟机自身的一部分</li><li>其他所有的类加载器，这些类加载器都由Java语言实现，独立存在于虚拟机外部，并且全部继承于抽象类java.lang.ClassLoader</li></ol><p>绝大多数的Java程序都会使用以下三个系统提供的类加载器来进行加载：</p><ol><li>启动类加载器（Bootstrap ClassLoader）：这个类加载器负责加载存放在<JAVA_HOME>/lib目录，或者被-Xbootclasspath参数所指定的路径中存放的，而且是Java虚拟机能够识别的（按照文件名识别，如rt.jar、tools.jar，名字不符合的类库即使放在lib目录中也不会被加载）类库加载到虚拟机的内存中。启动类加载器无法被Java程序直接引用，用户在编写自定义类加载器时，如果需要把加载请求委派给引导类加载器去处理，那直接使用null替代即可。</JAVA_HOME></li><li>扩展类加载器（Extension Class Loader）:这个类加载器是在类sun.misc.Launcher$ExtClassLoader中以Java代码的形式实现的。它负责加载<JAVA_HOME>/lib/ext目录中，或者被java.ext.dirs系统变量所指定的路径中所有的类库。这是一种Java系统类库的扩展机制。</JAVA_HOME></li><li>应用程序类加载器（Application Class Loader）：这个类加载器由sun.misc.Launcher$AppClassLoader来实现。由于应用程序类加载器是ClassLoader类中的getSystemClassLoader()方法的返回值，所以有些场合中也称它为“系统类加载器”。它负责加载用户类路径（ClassPath）上所有的类库，开发者同样可以直接在代码中使用这个类加载器。</li></ol><img src="/2021/07/20/Java%E7%B1%BB%E5%8A%A0%E8%BD%BD%E6%9C%BA%E5%88%B6/2.png" class title="双亲委派模型"><p>双亲委派模型要求除了顶层的启动类加载器外，其余的类加载器都应该有自己的父类加载器。不过这里类加载器之间的父子关系一般不是以继承的关系来实现的，而是通常使用组合关系来复用父加载器的代码。</p><h3 id="双亲委派模型的工作过程"><a href="#双亲委派模型的工作过程" class="headerlink" title="双亲委派模型的工作过程"></a>双亲委派模型的工作过程</h3><p>如果一个类加载器收到了类加载器的请求，它首先不会自己去尝试加载这个类，而是把这个请求委派给父类加载器去完成，每一个层次的类加载器都是如此，因此所有的加载请求最终都应该传送到最顶层的启动类加载器中，只有当父类加载器反馈自己无法完成这个加载请求时，子加载器才会尝试自己去完成加载。</p><p>精确到代码：</p><blockquote><p>先检查请求加载的类型是否已被加载过，若没有则调用父加载器的loadClass()当法，若父加载器为空则默认使用启动类加载器作为父加载器。假如父加载器加载失败，抛出ClassNotFoundException异常的话，才调用自己的findClass()方法尝试进行加载。</p></blockquote><h3 id="双亲委派模型的好处"><a href="#双亲委派模型的好处" class="headerlink" title="双亲委派模型的好处"></a>双亲委派模型的好处</h3><p>一个显而易见的好处就是Java中的类随着它的类加载器一起具备了一种带有优先级的层次关系。例如类Object，被存放在rt.jar中，无论哪一个类加载器要加载这个类，最终都是委派给处于模型最顶端的启动类加载器进行加载，因此Object类在程序的各种类加载器环境中都能够保证是同一个类。</p><p>双亲委派模型对于保证Java程序的稳定运作极为重要。</p>]]></content>
    
    
    <summary type="html">&lt;meta name=&quot;referrer&quot; content=&quot;no-referrer&quot;&gt;

&lt;hr&gt;
&lt;h1 id=&quot;一-对象的创建&quot;&gt;&lt;a href=&quot;#一-对象的创建&quot; class=&quot;headerlink&quot; title=&quot;一.对象的创建&quot;&gt;&lt;/a&gt;一.对象的创建&lt;/h1&gt;&lt;p&gt;当Java虚拟机遇到一条字节码new指令的时候，首先将去检查这个指令的参数是否能在常量池中定位到一个类的符号引用，并且检查这个符号引用代表的类是否已被加载、解析和初始化过。如果没有，那必须先执行相应的类加载过程。&lt;/p&gt;</summary>
    
    
    
    <category term="Java" scheme="https://utinner.gitee.io/categories/Java/"/>
    
    
    <category term="Java" scheme="https://utinner.gitee.io/tags/Java/"/>
    
    <category term="JVM" scheme="https://utinner.gitee.io/tags/JVM/"/>
    
  </entry>
  
  <entry>
    <title>HopSpot虚拟机对象</title>
    <link href="https://utinner.gitee.io/2021/07/20/HopSpot%E8%99%9A%E6%8B%9F%E6%9C%BA%E5%AF%B9%E8%B1%A1/"/>
    <id>https://utinner.gitee.io/2021/07/20/HopSpot%E8%99%9A%E6%8B%9F%E6%9C%BA%E5%AF%B9%E8%B1%A1/</id>
    <published>2021-07-20T07:22:01.000Z</published>
    <updated>2021-12-06T09:23:00.723Z</updated>
    
    <content type="html"><![CDATA[<meta name="referrer" content="no-referrer"><hr><h1 id="一-对象的创建"><a href="#一-对象的创建" class="headerlink" title="一.对象的创建"></a>一.对象的创建</h1><p>虚拟机遇到new指令，先检查这个指令的参数是否能在常量池中定位到这个类的符号引用，并检查这个符号引用代表的类是否已经被加载、解析和初始化过。如果没有，那必须先执行相应的<a href="/2021/07/20/Java%E7%B1%BB%E5%8A%A0%E8%BD%BD%E6%9C%BA%E5%88%B6/" title="类加载">类加载</a>过程。</p><h2 id="1-分配内存"><a href="#1-分配内存" class="headerlink" title="1.分配内存"></a>1.分配内存</h2><p>类加载检查通过后，接下来虚拟机将为新生对象分配内存。对象所需内存的大小在类加载完成后便可以完全确定。</p><span id="more"></span><h2 id="2-内存分配方式"><a href="#2-内存分配方式" class="headerlink" title="2.内存分配方式"></a>2.内存分配方式</h2><ul><li>指针碰撞：如果Java堆中的内存规整，用过的内存放在一边，空闲的放在另外一边，中间放一个指针作为分界点的指示器。分配内存就是把指针向空闲空间挪动一段与对象大小相等的距离。</li><li>空闲列表：如果Java堆中的内存不规整，无法使用指针碰撞的方法，需要维护一个表，记录哪些内存块是可用的，在分配时从列表中找到一块足够大的内存块来划分给对象实例，然后更新列表记录。选择哪种分配方式由Java堆是否规整决定，而<strong>Java堆是否规整由所采用的垃圾收集器是否带有压缩整理功能决定。</strong></li></ul><h2 id="3-并发问题"><a href="#3-并发问题" class="headerlink" title="3.并发问题"></a>3.并发问题</h2><p>创建对象是很频繁的行为，虚拟机采用如下两种方式来保证线程安全：</p><ul><li>CAS配上失败重试：CAS是乐观锁的一种实现方式。所谓乐观锁就是，每次不加锁而是假设没有冲突而去完成某项操作，如果因为冲突失败就重试，直到成功为止。虚拟机采用 CAS 配上失败重试的方式保证更新操作的原子性。</li><li>TLAB： 将内存分配安排在每个线程独有的空间进行，每个线程首先在堆内存中分配一小块内存，称为本地分配缓存(TLAB : Thread Local Allocation Buffer)。分配内存时，只需要在自己的分配缓存中分配即可，由于这个内存区域是线程私有的，所以不会出现并发问题。当对象大于TLAB中的剩余内存或TLAB的内存已用尽时，再采用上述的CAS进行内存分配。虚拟机是否使用TLAB，可以通过<code>-XX:+/-UseTLAB</code>参数来设定。</li></ul><h2 id="4-初始化零值"><a href="#4-初始化零值" class="headerlink" title="4.初始化零值"></a>4.初始化零值</h2><p>内存分配完成后，虚拟机将分配到的内存空间初始化为零值（不包括对象头），这一步保证了对象的实例字段在Java代码中可以不赋初始值就使用。</p><h2 id="5-对象头设置"><a href="#5-对象头设置" class="headerlink" title="5.对象头设置"></a>5.对象头设置</h2><p>初始化零值完成之后，虚拟机要对对象进行必要的设置，例如这个对象是那个类的实例、如何才能找到类的元数据信息、对象的哈希吗、对象的 GC 分代年龄等信息。 这些信息存放在对象头中。</p><p>另外，根据虚拟机当前运行状态的不同，如是否启用偏向锁等，对象头会有不同的设置方式。</p><h2 id="6-执行init方法"><a href="#6-执行init方法" class="headerlink" title="6.执行init方法"></a>6.执行init方法</h2><p>从虚拟机的视角来看，一个新的对象已经产生了，但从 Java 程序的视角来看，对象创建才刚开始，init 方法还没有执行，所有的字段都还为零。所以一般来说，执行 new 指令之后会接着执行 init 方法，把对象按照程序员的意愿进行初始化，这样一个真正可用的对象才算完全产生出来。</p><hr><h1 id="二-对象的内存布局"><a href="#二-对象的内存布局" class="headerlink" title="二.对象的内存布局"></a>二.对象的内存布局</h1><p>在 Hotspot 虚拟机中，对象在内存中的布局可以分为3块区域：</p><ul><li>对象头</li><li>实例数据</li><li>对齐填充</li></ul><p>Hotspot虚拟机的对象头包括两部分信息</p><ul><li>第一部分用于存储对象自身的自身运行时数据（哈希码、GC分代年龄、锁状态标志等等）</li><li>另一部分是类型指针，即对象指向它的类元数据的指针，虚拟机通过这个指针来确定这个对象是那个类的实例。</li></ul><p>实例数据部分是对象真正存储的有效信息，也是在程序中所定义的各种类型的字段内容。包括父类继承的内容和子类中定义的内容。</p><p>对齐填充部分不是必然存在的，也没有什么特别的含义，仅仅起占位作用。如果对象实例数据部分没有对齐的话，就需要通过对齐填充来补全。</p><hr><h1 id="三-对象的访问定位"><a href="#三-对象的访问定位" class="headerlink" title="三.对象的访问定位"></a>三.对象的访问定位</h1><p>Java程序通过栈上的reference数据操作堆上的具体对象。主流的访问方式由使用句柄和直接指针两种。</p><ul><li>句柄：如果使用句柄的话，那么Java堆中将会划分出一块内存来作为句柄池，reference 中存储的就是对象的句柄地址，而句柄中包含了对象实例数据与类型数据各自的具体地址信息。</li><li>直接指针： 如果使用直接指针访问，那么 Java 堆对象的布局中就必须考虑如何放置访问类型数据的相关信息，而reference 中存储的直接就是对象的地址。</li></ul><p>这两种对象访问方式各有优势：</p><ul><li>使用句柄来访问的最大好处是 reference 中存储的是稳定的句柄地址，在对象被移动时只会改变句柄中的实例数据指针，而 reference 本身不需要修改</li><li>使用直接指针访问方式最大的好处就是速度快，它节省了一次指针定位的时间开销。（大部分是使用第二种方法来访问的）</li></ul><p><strong>HotSpot使用直接指针的方式进行对象访问。</strong></p>]]></content>
    
    
    <summary type="html">&lt;meta name=&quot;referrer&quot; content=&quot;no-referrer&quot;&gt;

&lt;hr&gt;
&lt;h1 id=&quot;一-对象的创建&quot;&gt;&lt;a href=&quot;#一-对象的创建&quot; class=&quot;headerlink&quot; title=&quot;一.对象的创建&quot;&gt;&lt;/a&gt;一.对象的创建&lt;/h1&gt;&lt;p&gt;虚拟机遇到new指令，先检查这个指令的参数是否能在常量池中定位到这个类的符号引用，并检查这个符号引用代表的类是否已经被加载、解析和初始化过。如果没有，那必须先执行相应的&lt;a href=&quot;/2021/07/20/Java%E7%B1%BB%E5%8A%A0%E8%BD%BD%E6%9C%BA%E5%88%B6/&quot; title=&quot;类加载&quot;&gt;类加载&lt;/a&gt;过程。&lt;/p&gt;
&lt;h2 id=&quot;1-分配内存&quot;&gt;&lt;a href=&quot;#1-分配内存&quot; class=&quot;headerlink&quot; title=&quot;1.分配内存&quot;&gt;&lt;/a&gt;1.分配内存&lt;/h2&gt;&lt;p&gt;类加载检查通过后，接下来虚拟机将为新生对象分配内存。对象所需内存的大小在类加载完成后便可以完全确定。&lt;/p&gt;</summary>
    
    
    
    <category term="Java" scheme="https://utinner.gitee.io/categories/Java/"/>
    
    
    <category term="Java" scheme="https://utinner.gitee.io/tags/Java/"/>
    
    <category term="JVM" scheme="https://utinner.gitee.io/tags/JVM/"/>
    
  </entry>
  
  <entry>
    <title>Java内存区域</title>
    <link href="https://utinner.gitee.io/2021/07/19/Java%E5%86%85%E5%AD%98%E5%8C%BA%E5%9F%9F/"/>
    <id>https://utinner.gitee.io/2021/07/19/Java%E5%86%85%E5%AD%98%E5%8C%BA%E5%9F%9F/</id>
    <published>2021-07-19T07:43:18.000Z</published>
    <updated>2021-12-06T09:23:00.723Z</updated>
    
    <content type="html"><![CDATA[<meta name="referrer" content="no-referrer"><p>Java虚拟机在执行Java程序的过程中会把它管理的内存分为若干个不同的数据区域。这些区域有着各自的用途，一级创建和销毁的时间，有的区域随着虚拟机进程的启动而存在，有些区域则依赖用户线程的启动和结束而建立和销毁。根据《Java虚拟机规范》中规定，jvm所管理的内存大致包括以下几个运行时数据区域，如图所示：</p><img src="/2021/07/19/Java%E5%86%85%E5%AD%98%E5%8C%BA%E5%9F%9F/1.png" class title="Java内存区域"><span id="more"></span><h1 id="一-线程私有的"><a href="#一-线程私有的" class="headerlink" title="一.线程私有的"></a>一.线程私有的</h1><h2 id="1-程序计数器"><a href="#1-程序计数器" class="headerlink" title="1.程序计数器"></a>1.程序计数器</h2><p>占据一块较小的内存空间，可以看做当前线程所执行的字节码的行号指示器。在虚拟机概念模型里，字节码解释器工作时就是通过改变这个计数器的值来选取下一条需要执行的字节码指令，分支，循环，跳转，异常处理，线程恢复等基础功能都需要依赖这个计数器来完成。</p><p>由于jvm的多线程是通过线程轮流切换并分配处理器执行时间的方式来实现的，在任何一个确定的时刻，一个处理器都只会执行一条线程中的指令。因此未来线程切换后能恢复到正确的执行位置，每条线程都需要有一个独立的程序计数器，各条线程之间计数器互不影响，独立存储，我们成这类内存区域为“线程私有”的内存。</p><ul><li>如果线程正在执行的是一个Java方法，这个计数器记录的则是正在执行的虚拟机字节码指令的地址；</li><li>如果正在执行的是Native方法，这个计数器则为空（undefined）。</li></ul><p><strong>此内存区域是唯一一个在Java虚拟机规范中没有规定任何OutOfMemoryError情况的区域。</strong></p><h2 id="2-Java虚拟机栈"><a href="#2-Java虚拟机栈" class="headerlink" title="2.Java虚拟机栈"></a>2.Java虚拟机栈</h2><p>线程私有，生命周期和线程相同，虚拟机栈描述的是Java方法执行的内存模型，每个方法在执行的同时都会创建一个栈帧  用于存储局部变量表，操作数栈，动态链接，方法出口等信息。每一个方法从调用直至完成的过程，就对应着一个栈帧在虚拟机栈中入栈到出栈的过程。</p><p>局部变量表存放了编译期可知的各种基本类型数据（boolean、byte、char、short、int、float、long、double）、对象引用、returnAddress类型（指向了一条字节码指令的地址）。</p><p>其中64位长度的long和double类型的数据会占用2个局部变量表空间（slot），其余的数据类型只占用1个。局部变量表所需的内存空间在编译期完成分配，当进入一个方法时，这个方法所需要在栈帧中分配多大的局部变量空间是完全确定的，在方法运行期间不会改变局部变量表的大小。(大小指的是变量槽的数量)</p><p>在Java虚拟机规范中，对此区域规定了两种异常状况：</p><ul><li>如果线程请求的栈深度大于虚拟机所允许的深度，将会抛出Stack OverflowError异常；</li><li>如果虚拟机栈可以动态扩展时无法申请到足够的内存，就会抛出OutOfMemoryError异常。</li></ul><h2 id="3-本地方法栈"><a href="#3-本地方法栈" class="headerlink" title="3.本地方法栈"></a>3.本地方法栈</h2><p>本地方法栈与虚拟机栈所发挥的作用非常相似，他们之间的区别不过是虚拟机栈为虚拟机执行Java方法（字节码）服务，而本地方法栈则为虚拟机中使用到的native方法服务。在虚拟机规范中对本地方法栈中方法使用的语言、使用方式与数据结构并没有强制规定，因此具体的虚拟机可以自由实现它。甚至有的虚拟机直接把本地方法栈和虚拟机栈合二为一，</p><p>与虚拟机栈一样也会抛出Stack OverflowError异常和OutOfMemoryError异常。</p><h1 id="二-线程共享的"><a href="#二-线程共享的" class="headerlink" title="二.线程共享的"></a>二.线程共享的</h1><h2 id="1-Java堆"><a href="#1-Java堆" class="headerlink" title="1.Java堆"></a>1.Java堆</h2><p>对于大多数应用来说，堆空间是jvm内存中最大的一块。Java堆是被所有线程共享，虚拟机启动时创建，此内存区域唯一的目的就是存放对象实例，几乎所有的对象实例都在这里分配内存。这一点在Java虚拟机规范中的描述是：所有的对象实例以及数组都要在堆上分配，但是随着JIT编译器的发展和逃逸分析技术逐渐成熟，栈上分配，标量替换优化技术将会导致一些微妙的变化发生，所有的对象都分配在堆上也就变得不那么绝对了。</p><p>Java堆是垃圾收集器管理的主要区域，因此很多时候也被称为“GC堆”。从内存回收角度看，由于现在收集器基本都采用分代收集算法，所以Java堆还可以细分为：新生代和老年代；再细致一点的有Eden空间，From Survivor空间，To Survivor空间等。从内存分配的角度来看，线程共享的Java堆中可能划分出多个线程私有的分配缓冲区。不过无论如何划分，都与存放内容无关，无论哪个区域，存储的都仍然是对象实例，进一步划分的目的是为了更好的回收内存，或者更快的分配内存。（如果在堆中没有内存完成实例分配，并且堆也无法再扩展时，将会抛出OutOfMemoryError异常。）</p><h2 id="2-方法区（永久代）"><a href="#2-方法区（永久代）" class="headerlink" title="2.方法区（永久代）"></a>2.方法区（永久代）</h2><p>和堆一样所有线程共享，主要用于存储已被jvm加载的类信息、常量、静态变量、即时编译器编译后的代码等数据。也叫“非堆”。</p><p>（在JDK1.7发布的HotSpot中，已经把字符串常量池移除方法区了。）</p><p>这个区域的内存回收目标主要是针对常量池的回收和对类型的卸载。</p><p>如果方法区无法满足新的内存分配需求时，将抛出OutOfMemoryError异常。</p><h2 id="3-常量池"><a href="#3-常量池" class="headerlink" title="3.常量池"></a>3.常量池</h2><p><strong>运行时常量池是方法区的一部分</strong>。Class文件中除了有类的版本、字段、方法、接口等描述信息外，还有一项信息是常量池，用于存放编译期生成的各种字面量和符号引用，这部分内容将在类加载后进入方法区的运行时常量池中存放。</p><p>Java虚拟机对class文件每一部分的格式都有严格规定，每一个字节用于存储哪种数据都必须符合规范才会被jvm认可。但对于运行时常量池，Java虚拟机规范没做任何细节要求。</p><p>运行时常量池有个重要特性是动态性，Java语言不要求常量一定只在编译期才能产生，也就是并非预置入class文件中常量池的内容才能进入方法区的运行时常量池，运行期间也有可能将新的常量放入池中，这种特性使用最多的是String类的intern()方法。</p><p>既然运行时常量池是方法区的一部分，自然受到方法区内存的限制。当常量池无法再申请到内存时会抛出outOfMemeryError异常。</p><h2 id="4-直接内存"><a href="#4-直接内存" class="headerlink" title="4.直接内存"></a>4.直接内存</h2><p>直接内存并不是虚拟机运行时数据区的一部分。但是这部分也被经常访问，而且也可能导致OOM异常。</p><p>在jdk1.4中新加入了NIO类，引入了一种基于通道（Channel）与缓冲区（Buffer）的I/O方式，它可以使用Native函数直接分配堆外内存，然后通过一个存储在Java堆里面的DirectByteBuffer对象作为这块内存的引用进行操作。这样能在一些场景中显著提高性能，因为避免了在Java堆和Native堆中来回复制数据。</p>]]></content>
    
    
    <summary type="html">&lt;meta name=&quot;referrer&quot; content=&quot;no-referrer&quot;&gt;

&lt;p&gt;Java虚拟机在执行Java程序的过程中会把它管理的内存分为若干个不同的数据区域。这些区域有着各自的用途，一级创建和销毁的时间，有的区域随着虚拟机进程的启动而存在，有些区域则依赖用户线程的启动和结束而建立和销毁。根据《Java虚拟机规范》中规定，jvm所管理的内存大致包括以下几个运行时数据区域，如图所示：&lt;/p&gt;
&lt;img src=&quot;/2021/07/19/Java%E5%86%85%E5%AD%98%E5%8C%BA%E5%9F%9F/1.png&quot; class title=&quot;Java内存区域&quot;&gt;</summary>
    
    
    
    <category term="Java" scheme="https://utinner.gitee.io/categories/Java/"/>
    
    
    <category term="Java" scheme="https://utinner.gitee.io/tags/Java/"/>
    
    <category term="JVM" scheme="https://utinner.gitee.io/tags/JVM/"/>
    
  </entry>
  
  <entry>
    <title>Java内存模型与线程</title>
    <link href="https://utinner.gitee.io/2021/04/04/Java%E5%86%85%E5%AD%98%E6%A8%A1%E5%9E%8B%E4%B8%8E%E7%BA%BF%E7%A8%8B/"/>
    <id>https://utinner.gitee.io/2021/04/04/Java%E5%86%85%E5%AD%98%E6%A8%A1%E5%9E%8B%E4%B8%8E%E7%BA%BF%E7%A8%8B/</id>
    <published>2021-04-04T10:00:46.000Z</published>
    <updated>2021-12-06T09:23:00.725Z</updated>
    
    <content type="html"><![CDATA[<meta name="referrer" content="no-referrer"><h3 id="一、物理机中的效率与一致性"><a href="#一、物理机中的效率与一致性" class="headerlink" title="一、物理机中的效率与一致性"></a>一、物理机中的效率与一致性</h3><h4 id="1-高速缓存（Cache）的引入"><a href="#1-高速缓存（Cache）的引入" class="headerlink" title="1. 高速缓存（Cache）的引入"></a>1. 高速缓存（Cache）的引入</h4><p>“让计算机并发执行若干个运算任务”与“更充分地利用计算机处理器的性能”之间的因果关系，看起来利索当然，实际上他们之间的关系并没有想象中那么简单，其中一个重要的复杂性的来源是绝大多数的运算任务都不可能只靠处理器“计算”就能完成。</p><p>处理器只要要与内存交互，如读取运算数据、存储计算结果等，这个IO操作就是很难消除的（无法仅靠寄存器来完成所有运算任务）。</p><p>由于计算机的存储设备与处理器的运算速度有着几个数量级的差距，所以现代计算机系统都不得不加入一层或多层读写速度尽可能接近处理器运算速度的<code>高速缓存（Cache）</code>来作为内存与处理器之间的缓冲：</p><blockquote><p>将运算需要使用的数据复制到内存中，让运算能快速进行，当运算结束后再从缓存同步到内存之中，这样就无需等待缓慢的内存读写了。</p></blockquote><span id="more"></span><h4 id="2-缓存一致性问题"><a href="#2-缓存一致性问题" class="headerlink" title="2. 缓存一致性问题"></a>2. 缓存一致性问题</h4><p>在多路处理器系统中，每个处理器都有自己的高速缓存，而他们又共享同一主内存（Main Memory），这种系统称为<code>共享内存多核系统</code>。当多个处理器的运算任务都涉及同一块主内存区域时，将可能导致各自的缓存数据不一致。</p><p>为了解决缓存数据一致性的问题，需要各个处理器访问缓存时都遵循一些协议，在读写时要根据协议来操作。比如：MSI、MESI、MOSI等。</p><h4 id="3-乱序执行优化"><a href="#3-乱序执行优化" class="headerlink" title="3.乱序执行优化"></a>3.乱序执行优化</h4><p>除了增加高速缓存之外，为了使处理器内部的运算单元能尽量被充分利用，处理器可能会对输入代码进行乱序执行（Out-Of-Order Execution）优化，处理器会在计算之后将乱序执行的结果重组，保证该结果与顺序执行的结果是一致的，但并不保证程序中各个语句计算的先后顺序与输入代码中的顺序一致。</p><p>与处理器的乱序执行优化类似，Java虚拟机的即使编译器中也有指令重排序优化。</p><h3 id="二、Java内存模型"><a href="#二、Java内存模型" class="headerlink" title="二、Java内存模型"></a>二、Java内存模型</h3><h4 id="1-主内存与工作内存"><a href="#1-主内存与工作内存" class="headerlink" title="1.主内存与工作内存"></a>1.主内存与工作内存</h4>]]></content>
    
    
    <summary type="html">&lt;meta name=&quot;referrer&quot; content=&quot;no-referrer&quot;&gt;

&lt;h3 id=&quot;一、物理机中的效率与一致性&quot;&gt;&lt;a href=&quot;#一、物理机中的效率与一致性&quot; class=&quot;headerlink&quot; title=&quot;一、物理机中的效率与一致性&quot;&gt;&lt;/a&gt;一、物理机中的效率与一致性&lt;/h3&gt;&lt;h4 id=&quot;1-高速缓存（Cache）的引入&quot;&gt;&lt;a href=&quot;#1-高速缓存（Cache）的引入&quot; class=&quot;headerlink&quot; title=&quot;1. 高速缓存（Cache）的引入&quot;&gt;&lt;/a&gt;1. 高速缓存（Cache）的引入&lt;/h4&gt;&lt;p&gt;“让计算机并发执行若干个运算任务”与“更充分地利用计算机处理器的性能”之间的因果关系，看起来利索当然，实际上他们之间的关系并没有想象中那么简单，其中一个重要的复杂性的来源是绝大多数的运算任务都不可能只靠处理器“计算”就能完成。&lt;/p&gt;
&lt;p&gt;处理器只要要与内存交互，如读取运算数据、存储计算结果等，这个IO操作就是很难消除的（无法仅靠寄存器来完成所有运算任务）。&lt;/p&gt;
&lt;p&gt;由于计算机的存储设备与处理器的运算速度有着几个数量级的差距，所以现代计算机系统都不得不加入一层或多层读写速度尽可能接近处理器运算速度的&lt;code&gt;高速缓存（Cache）&lt;/code&gt;来作为内存与处理器之间的缓冲：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;将运算需要使用的数据复制到内存中，让运算能快速进行，当运算结束后再从缓存同步到内存之中，这样就无需等待缓慢的内存读写了。&lt;/p&gt;
&lt;/blockquote&gt;</summary>
    
    
    
    <category term="Java" scheme="https://utinner.gitee.io/categories/Java/"/>
    
    
    <category term="JVM" scheme="https://utinner.gitee.io/tags/JVM/"/>
    
    <category term="多线程" scheme="https://utinner.gitee.io/tags/%E5%A4%9A%E7%BA%BF%E7%A8%8B/"/>
    
    <category term="内存模型" scheme="https://utinner.gitee.io/tags/%E5%86%85%E5%AD%98%E6%A8%A1%E5%9E%8B/"/>
    
  </entry>
  
  <entry>
    <title>Docker(六)DockerCompose</title>
    <link href="https://utinner.gitee.io/2021/02/15/Docker-%E5%85%AD-DockerCompose/"/>
    <id>https://utinner.gitee.io/2021/02/15/Docker-%E5%85%AD-DockerCompose/</id>
    <published>2021-02-15T11:05:39.000Z</published>
    <updated>2021-12-06T09:23:00.680Z</updated>
    
    <content type="html"><![CDATA[<meta name="referrer" content="no-referrer"><h3 id="前言：构建一个wordpress"><a href="#前言：构建一个wordpress" class="headerlink" title="前言：构建一个wordpress"></a>前言：构建一个wordpress</h3><h4 id="1-创建MySQL的container"><a href="#1-创建MySQL的container" class="headerlink" title="1.创建MySQL的container"></a>1.创建MySQL的container</h4><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker <span class="built_in">run</span> -d --name mysql -v mysql-data:/var/lib/mysql -e <span class="attribute">MYSQL_ROOT_PASSWORD</span>=root -e <span class="attribute">MYSQL_DATABASE</span>=wordpress mysql</span><br></pre></td></tr></table></figure><p>声明了我的root用户密码为root，同时创建了一个wordpress的数据库，因为我的mysql是在内部使用的不用对提供服务他们使用的是同一个网络，所以不用做端口映射</p><h4 id="2-创建wordpress"><a href="#2-创建wordpress" class="headerlink" title="2.创建wordpress"></a>2.创建wordpress</h4><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker <span class="built_in">run</span> -d -e <span class="attribute">WORDPRESS_DB_HOST</span>=mysql:3306 --link mysql -p 8080:80 wordpress</span><br></pre></td></tr></table></figure><ul><li>-e 需要去指定我们的数据库的host，指定我刚刚启动的mysql的容器，</li><li>–link 就是link到我们的mysql里面</li><li>-p就是将容器中的80端口映射到我们本地的8080端口</li></ul><p>这个过程就比较复杂，像有些应用有好多个模块我们可能就需要构建好多个container，对它的创建、管理、启动、停止等操作比较繁琐。我们希望可以将多个容器定义成一个组，对这个组进行统一的管理，于是DockerCompose就出现了，DockerCompose就是为了解决这一问题而诞生的。</p><span id="more"></span><h3 id="DockerCompose"><a href="#DockerCompose" class="headerlink" title="DockerCompose"></a>DockerCompose</h3><ul><li>DockerCompose建议用于本地开发去部署</li><li>DockerCompose是一个工具</li><li>这个工具可以通过一个yml文件定义多容器的docker应用</li><li>通过一条命令就可以根据yml文件的定义去创建或管理这多个容器</li></ul><p><img src="/2021/02/15/Docker-%E5%85%AD-DockerCompose/1.png" alt="1"></p><p>现在有三个版本，推荐使用version3，不同的版本文件格式是不一样的，2跟3的区别不是很大，但是2跟3最大的区别就是version2只能用于单机，version3可以用于多机<br><img src="/2021/02/15/Docker-%E5%85%AD-DockerCompose/2.png" alt="2"></p><h4 id="service"><a href="#service" class="headerlink" title="service"></a>service</h4><p>一个service代表一个container，这个container可以从dockerhub的image来创建，或者从本地的<code>Dockerfile</code>build出来的image来创建</p><p>service的启动类似<code>docker run</code>，我们可以给其指定network和volume，所以可以给service指定network和volume的引用</p><h3 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h3><figure class="highlight nestedtext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">version</span><span class="punctuation">:</span> <span class="string">&#x27;3&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="attribute">services</span><span class="punctuation">:</span></span><br><span class="line"><span class="punctuation"></span></span><br><span class="line">  <span class="attribute">wordpress</span><span class="punctuation">:</span></span><br><span class="line">    <span class="attribute">image</span><span class="punctuation">:</span> <span class="string">wordpress</span></span><br><span class="line">    <span class="attribute">ports</span><span class="punctuation">:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">8080:80</span></span><br><span class="line">    <span class="attribute">environment</span><span class="punctuation">:</span></span><br><span class="line">      <span class="attribute">WORDPRESS_DB_HOST</span><span class="punctuation">:</span> <span class="string">mysql</span></span><br><span class="line">      <span class="attribute">WORDPRESS_DB_PASSWORD</span><span class="punctuation">:</span> <span class="string">root</span></span><br><span class="line">    <span class="attribute">networks</span><span class="punctuation">:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">my-bridge</span></span><br><span class="line"></span><br><span class="line">  <span class="attribute">mysql</span><span class="punctuation">:</span></span><br><span class="line">    <span class="attribute">image</span><span class="punctuation">:</span> <span class="string">mysql</span></span><br><span class="line">    <span class="attribute">environment</span><span class="punctuation">:</span></span><br><span class="line">      <span class="attribute">MYSQL_ROOT_PASSWORD</span><span class="punctuation">:</span> <span class="string">root</span></span><br><span class="line">      <span class="attribute">MYSQL_DATABASE</span><span class="punctuation">:</span> <span class="string">wordpress</span></span><br><span class="line">    <span class="attribute">volumes</span><span class="punctuation">:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">mysql-data:/var/lib/mysql</span></span><br><span class="line">    <span class="attribute">networks</span><span class="punctuation">:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">my-bridge</span></span><br><span class="line"></span><br><span class="line"><span class="attribute">volumes</span><span class="punctuation">:</span></span><br><span class="line">  <span class="attribute">mysql-data</span><span class="punctuation">:</span></span><br><span class="line"><span class="punctuation"></span></span><br><span class="line"><span class="attribute">networks</span><span class="punctuation">:</span></span><br><span class="line">  <span class="attribute">my-bridge</span><span class="punctuation">:</span></span><br><span class="line">    <span class="attribute">driver</span><span class="punctuation">:</span> <span class="string">bridge</span></span><br></pre></td></tr></table></figure><h4 id="解释"><a href="#解释" class="headerlink" title="解释"></a>解释</h4><ul><li>第一行声明version的版本是3</li><li>在service中定义了两个服务，一个WordPress，一个mysql</li><li>image属性定义了我们的image</li><li>port做了端口映射</li><li>environment声明了两个环境变量</li><li>networks指定了我们连接的网络是下面自定义的bridge，</li><li>在mysql服务中我引用了自定义mysql-data的volume</li></ul><h3 id="Dockercompose的安装"><a href="#Dockercompose的安装" class="headerlink" title="Dockercompose的安装"></a>Dockercompose的安装</h3><p>如果使用mac或者windows系统，在安装完docker会默认安装上DockerCompose，但是如果是linux系统就需要独立安装</p><p><img src="/2021/02/15/Docker-%E5%85%AD-DockerCompose/3.png" alt="3"></p><p>下载dockercompose的可执行文件然到/usr/local/bin/docker-compose目录下面，命名为docker-compose</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo curl -L <span class="string">&quot;https://github.com/docker/compose/releases/download/1.28.2/docker-compose-$(uname -s)-$(uname -m)&quot;</span> -o <span class="regexp">/usr/</span>local<span class="regexp">/bin/</span>docker-compose</span><br></pre></td></tr></table></figure><p>下载完之后给它一个可执行的权限</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo chmod +x <span class="regexp">/usr/</span>local<span class="regexp">/bin/</span>docker-compose</span><br></pre></td></tr></table></figure><p><img src="/2021/02/15/Docker-%E5%85%AD-DockerCompose/4.png" alt="4"></p><p>下载完成之后就可以根据默认docker-compose命名的yml文件去进行构建了</p><figure class="highlight ebnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">docker-compose up</span></span><br></pre></td></tr></table></figure><p>如果文件不是按照docker-compose.yml命名的，也可以指定yml文件的名称</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker-compose <span class="tag">&lt;<span class="name">yml文件名</span>&gt;</span> up</span><br></pre></td></tr></table></figure><p>查看服务ps，可以看到有两个服务在运行中<br><img src="/2021/02/15/Docker-%E5%85%AD-DockerCompose/5.png" alt="5"></p><p>停止服务：</p><figure class="highlight arduino"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker-compose stop</span><br></pre></td></tr></table></figure><p>也可以进行start启动服务</p><figure class="highlight crmsh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker-compose <span class="literal">start</span></span><br></pre></td></tr></table></figure><p>如果用<code>down</code>命令，则不仅会停止服务，<em>而且会删除里面的所有container</em><br><img src="/2021/02/15/Docker-%E5%85%AD-DockerCompose/6.png" alt="6"></p><p>当我们启动的时候，也可以指定参数-d让其后台启动，不会输出大量的log</p><figure class="highlight ebnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">docker-compose up -d</span></span><br></pre></td></tr></table></figure><p>列举我们compose所定义的image</p><figure class="highlight ebnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">docker-compose images</span></span><br></pre></td></tr></table></figure><p>先build再up，<code>docker-compose build</code>命令可以预先根据dockerfile进行构建，并不会启动，但<code>docker-compose up</code>会在启动之前先构建，构建完成再启动</p><figure class="highlight ebnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">docker-compose build</span></span><br></pre></td></tr></table></figure><p>进入container的bash中</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker-compose <span class="built_in">exec</span> mysql bash</span><br></pre></td></tr></table></figure><h3 id="扩展"><a href="#扩展" class="headerlink" title="扩展"></a>扩展</h3><p>我们根据docker-compose所创建出来的服务只有一个，我们可以通过scale去进行扩展，比我们可以通过scale可以将对应的服务从一个扩展成三个。</p><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker-compose <span class="keyword">up</span> --<span class="keyword">help</span></span><br></pre></td></tr></table></figure><p><img src="/2021/02/15/Docker-%E5%85%AD-DockerCompose/7.png" alt="7"></p><p>对应的命令为：（web应用就是通过redis统计pv访问量的）</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker-compose up --scale <span class="attribute">web</span>=3 -d</span><br></pre></td></tr></table></figure><p><img src="/2021/02/15/Docker-%E5%85%AD-DockerCompose/8.png" alt="8"></p><p>当我们访问的时候，会进行轮询，内部是通过lb进行负载均衡的，有兴趣的可以看看<strong>HAProxy</strong><br><img src="/2021/02/15/Docker-%E5%85%AD-DockerCompose/9.png" alt="9"><br>scale不仅可以支持扩容，还支持缩容， 我们可以控制scale的数量对其进行控制服务实例的数量。</p>]]></content>
    
    
    <summary type="html">&lt;meta name=&quot;referrer&quot; content=&quot;no-referrer&quot;&gt;

&lt;h3 id=&quot;前言：构建一个wordpress&quot;&gt;&lt;a href=&quot;#前言：构建一个wordpress&quot; class=&quot;headerlink&quot; title=&quot;前言：构建一个wordpress&quot;&gt;&lt;/a&gt;前言：构建一个wordpress&lt;/h3&gt;&lt;h4 id=&quot;1-创建MySQL的container&quot;&gt;&lt;a href=&quot;#1-创建MySQL的container&quot; class=&quot;headerlink&quot; title=&quot;1.创建MySQL的container&quot;&gt;&lt;/a&gt;1.创建MySQL的container&lt;/h4&gt;&lt;figure class=&quot;highlight routeros&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;docker &lt;span class=&quot;built_in&quot;&gt;run&lt;/span&gt; -d --name mysql -v mysql-data:/var/lib/mysql -e &lt;span class=&quot;attribute&quot;&gt;MYSQL_ROOT_PASSWORD&lt;/span&gt;=root -e &lt;span class=&quot;attribute&quot;&gt;MYSQL_DATABASE&lt;/span&gt;=wordpress mysql&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;声明了我的root用户密码为root，同时创建了一个wordpress的数据库，因为我的mysql是在内部使用的不用对提供服务他们使用的是同一个网络，所以不用做端口映射&lt;/p&gt;
&lt;h4 id=&quot;2-创建wordpress&quot;&gt;&lt;a href=&quot;#2-创建wordpress&quot; class=&quot;headerlink&quot; title=&quot;2.创建wordpress&quot;&gt;&lt;/a&gt;2.创建wordpress&lt;/h4&gt;&lt;figure class=&quot;highlight routeros&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;docker &lt;span class=&quot;built_in&quot;&gt;run&lt;/span&gt; -d -e &lt;span class=&quot;attribute&quot;&gt;WORDPRESS_DB_HOST&lt;/span&gt;=mysql:3306 --link mysql -p 8080:80 wordpress&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;ul&gt;
&lt;li&gt;-e 需要去指定我们的数据库的host，指定我刚刚启动的mysql的容器，&lt;/li&gt;
&lt;li&gt;–link 就是link到我们的mysql里面&lt;/li&gt;
&lt;li&gt;-p就是将容器中的80端口映射到我们本地的8080端口&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;这个过程就比较复杂，像有些应用有好多个模块我们可能就需要构建好多个container，对它的创建、管理、启动、停止等操作比较繁琐。我们希望可以将多个容器定义成一个组，对这个组进行统一的管理，于是DockerCompose就出现了，DockerCompose就是为了解决这一问题而诞生的。&lt;/p&gt;</summary>
    
    
    
    <category term="运维" scheme="https://utinner.gitee.io/categories/%E8%BF%90%E7%BB%B4/"/>
    
    
    <category term="Docker" scheme="https://utinner.gitee.io/tags/Docker/"/>
    
  </entry>
  
  <entry>
    <title>Docker(五)-Docker的文件存储和数据共享</title>
    <link href="https://utinner.gitee.io/2021/02/12/Docker-%E4%BA%94-Docker%E7%9A%84%E6%96%87%E4%BB%B6%E5%AD%98%E5%82%A8%E5%92%8C%E6%95%B0%E6%8D%AE%E5%85%B1%E4%BA%AB/"/>
    <id>https://utinner.gitee.io/2021/02/12/Docker-%E4%BA%94-Docker%E7%9A%84%E6%96%87%E4%BB%B6%E5%AD%98%E5%82%A8%E5%92%8C%E6%95%B0%E6%8D%AE%E5%85%B1%E4%BA%AB/</id>
    <published>2021-02-11T19:59:13.000Z</published>
    <updated>2021-12-06T09:23:00.674Z</updated>
    
    <content type="html"><![CDATA[<meta name="referrer" content="no-referrer"><p><strong>问题</strong></p><p>当我创建了一个容器，在这个容器中我有个mysql服务，在这个mysql里面我有各种各样的数据。但是有一天我一不小心删除了这个容器，那么这个容器中的相关服务以及数据也都没有了。这个时候就出问题了。</p><p>我们需要一种数据持久化机制来实现我们容器中数据的存储。</p><img src="/2021/02/12/Docker-%E4%BA%94-Docker%E7%9A%84%E6%96%87%E4%BB%B6%E5%AD%98%E5%82%A8%E5%92%8C%E6%95%B0%E6%8D%AE%E5%85%B1%E4%BA%AB/1.png" class width="1"><p>默认情况下docker数据是写在了container里面的，当我们将容器删除掉之后是找不到这个容器里面的文件及恢复的，那么我们可以用一种机制类似于mock的方式去将容器中的数据保存在我们的磁盘上，这样就跟容器隔离开了，进而实现数据持久化。</p><span id="more"></span><h3 id="Docker持久化数据的两种方案"><a href="#Docker持久化数据的两种方案" class="headerlink" title="Docker持久化数据的两种方案"></a>Docker持久化数据的两种方案</h3><ul><li>基于本地文件系统的Volume。可以在执行Docker create或Docker run时，通过-v参数将主机的目录作为容器的数据卷。这部分功能便是基于本地文件系统的volume管理。</li><li>基于plugin的Volume，支持第三方的存储方案，比如NAS、aws</li></ul><h3 id="Volume的类型"><a href="#Volume的类型" class="headerlink" title="Volume的类型"></a>Volume的类型</h3><ul><li>受管理的data Volome，由docker后台自动创建</li><li>绑定挂载的Volome，具体挂载的位置可以由用户指定</li></ul><h4 id="小插曲"><a href="#小插曲" class="headerlink" title="小插曲"></a>小插曲</h4><p>我需要从我本地拷贝几份文件到vagrant的虚拟机中，需要安装vagrant的scp插件<code>vagrant plugin install scp</code>。</p><img src="/2021/02/12/Docker-%E4%BA%94-Docker%E7%9A%84%E6%96%87%E4%BB%B6%E5%AD%98%E5%82%A8%E5%92%8C%E6%95%B0%E6%8D%AE%E5%85%B1%E4%BA%AB/2.png" class width="2"><ul><li>将本地文件拷贝到虚拟机指定目录中<figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vagrant scp <span class="tag">&lt;<span class="name">目标文件夹路径</span>&gt;</span> vmName:<span class="tag">&lt;<span class="name">虚拟机内文件夹路径</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li>注意：&lt;虚拟机内文件夹路径&gt;需要预先开通777权限<figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">sudo</span> chmod <span class="number">777</span> &lt;虚拟机内文件夹路径&gt;</span><br></pre></td></tr></table></figure></li></ul><h3 id="Data-Volume"><a href="#Data-Volume" class="headerlink" title="Data Volume"></a>Data Volume</h3><p>1.进入虚拟机，查看volume：</p><img src="/2021/02/12/Docker-%E4%BA%94-Docker%E7%9A%84%E6%96%87%E4%BB%B6%E5%AD%98%E5%82%A8%E5%92%8C%E6%95%B0%E6%8D%AE%E5%85%B1%E4%BA%AB/3.png" class width="3"><p>2.创建一个不需要密码登录的mysql应用</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo docker <span class="built_in">run</span> -d --name mysql1 -e <span class="attribute">MYSQL_ALLOW_EMPTY_PASSWORD</span>=<span class="literal">true</span> mysql</span><br></pre></td></tr></table></figure><p>3.查看volume相关信息</p><img src="/2021/02/12/Docker-%E4%BA%94-Docker%E7%9A%84%E6%96%87%E4%BB%B6%E5%AD%98%E5%82%A8%E5%92%8C%E6%95%B0%E6%8D%AE%E5%85%B1%E4%BA%AB/4.png" class width="4"><p>可以看到它这个volume映射到了虚拟机内部的路径上去</p><p>4.再去创建另一个mysql</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo docker <span class="built_in">run</span> -d --name mysql2 -e <span class="attribute">MYSQL_ALLOW_EMPTY_PASSWORD</span>=<span class="literal">true</span> mysql</span><br></pre></td></tr></table></figure><p>再去查看volume可以看到多了一个</p><img src="/2021/02/12/Docker-%E4%BA%94-Docker%E7%9A%84%E6%96%87%E4%BB%B6%E5%AD%98%E5%82%A8%E5%92%8C%E6%95%B0%E6%8D%AE%E5%85%B1%E4%BA%AB/5.png" class width="5"><p>5.现在我去停止并且remove掉两个容器</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker <span class="built_in">rm</span> <span class="operator">-f</span> mysql1 mysql2</span><br></pre></td></tr></table></figure><p>可以发现但是他们的volume还在</p><img src="/2021/02/12/Docker-%E4%BA%94-Docker%E7%9A%84%E6%96%87%E4%BB%B6%E5%AD%98%E5%82%A8%E5%92%8C%E6%95%B0%E6%8D%AE%E5%85%B1%E4%BA%AB/5.png" class width="5"><p><strong>但是又有第二个问题，我们的volume的名字并不是特别友好， 我可以给volume起个别名</strong></p><p>6.删除这两个volume</p><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker <span class="keyword">volume</span><span class="language-bash"> <span class="built_in">rm</span> &lt;<span class="built_in">id</span>&gt;</span></span><br></pre></td></tr></table></figure><p>7.重新创建，指定别名为mysql</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo docker <span class="built_in">run</span> -d -v mysql:/var/lib/mysql --name mysql1 -e <span class="attribute">MYSQL_ALLOW_EMPTY_PASSWORD</span>=<span class="literal">true</span> mysql</span><br></pre></td></tr></table></figure><img src="/2021/02/12/Docker-%E4%BA%94-Docker%E7%9A%84%E6%96%87%E4%BB%B6%E5%AD%98%E5%82%A8%E5%92%8C%E6%95%B0%E6%8D%AE%E5%85%B1%E4%BA%AB/6.png" class width="6"><p>可以看到有一个mysql的volume</p><p>我们的数据都会同步到这个volume里面去</p><h5 id="验证"><a href="#验证" class="headerlink" title="验证"></a>验证</h5><ul><li><p>进入到mysql1中</p><figure class="highlight gauss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">sudo docker <span class="built_in">exec</span> -it mysql1 /bin/bash</span><br><span class="line">mysql -u root</span><br><span class="line"><span class="keyword">create</span> database docker;</span><br><span class="line"><span class="keyword">show</span> databases;</span><br></pre></td></tr></table></figure><img src="/2021/02/12/Docker-%E4%BA%94-Docker%E7%9A%84%E6%96%87%E4%BB%B6%E5%AD%98%E5%82%A8%E5%92%8C%E6%95%B0%E6%8D%AE%E5%85%B1%E4%BA%AB/7.png" class width="7"></li><li><p>然后退出容器</p></li><li><p>强制删除mysql1</p></li><li><p>创建mysql3，使用这个volume</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo docker <span class="built_in">run</span> -d -v mysql:/var/lib/mysql --name mysql3 -e <span class="attribute">MYSQL_ALLOW_EMPTY_PASSWORD</span>=<span class="literal">true</span> mysql</span><br></pre></td></tr></table></figure></li><li><p>进入容器，可以看到mysql3中有docker这个数据库</p><img src="/2021/02/12/Docker-%E4%BA%94-Docker%E7%9A%84%E6%96%87%E4%BB%B6%E5%AD%98%E5%82%A8%E5%92%8C%E6%95%B0%E6%8D%AE%E5%85%B1%E4%BA%AB/8.png" class width="8"></li></ul><h3 id="bind-Mounting做地址映射"><a href="#bind-Mounting做地址映射" class="headerlink" title="bind Mounting做地址映射"></a>bind Mounting做地址映射</h3><p>只需要在运行容器的时候去指定我们本地的目录和容器的目录的一一对应关系，通过这种方式可以去同步，让我们本地的目录文件和容器的目录文件是同步的。本质是同一个文件同一个目录做映射。</p><p>我这里有个脚本文件Dockerfile</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># this same shows how we can extend/change an existing official image from Docker Hub</span></span><br><span class="line"></span><br><span class="line">FROM nginx:latest</span><br><span class="line"><span class="comment"># highly recommend you always pin versions for anything beyond dev/learn</span></span><br><span class="line"></span><br><span class="line">WORKDIR <span class="regexp">/usr/</span>share<span class="regexp">/nginx/</span>html</span><br><span class="line"><span class="comment"># change working directory to root of nginx webhost</span></span><br><span class="line"><span class="comment"># using WORKDIR is prefered to using &#x27;RUN cd /some/path&#x27;</span></span><br><span class="line"></span><br><span class="line">COPY index.html index.html</span><br><span class="line"></span><br><span class="line"><span class="comment"># I don&#x27;t have to specify EXPOSE or CMD because they&#x27;re in my FROM</span></span><br></pre></td></tr></table></figure><p>其实就是创建一个nginx服务，然后将我自定义的index.html覆盖到nginx中<br>构建：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker build -t tinner/mynginx .</span><br></pre></td></tr></table></figure><p>做端口映射：</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">docker</span> run -d -p <span class="number">80</span>:<span class="number">80</span> --name web tinner/mynginx</span><br></pre></td></tr></table></figure><p>然后curl 127.0.0.1<br>可以看到首页就是我写的index.html</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!doctype <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;utf-8&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">title</span>&gt;</span>hello<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">h1</span>&gt;</span>Hello Docker! <span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p>在本地输入(我的虚拟机ip)：<a href="http://192.168.205.10/%EF%BC%8C%E5%90%8C%E6%A0%B7%E4%B9%9F%E8%83%BD%E7%9C%8B%E5%88%B0%E8%87%AA%E5%AE%9A%E4%B9%89%E9%A1%B5%E9%9D%A2">http://192.168.205.10/，同样也能看到自定义页面</a></p><img src="/2021/02/12/Docker-%E4%BA%94-Docker%E7%9A%84%E6%96%87%E4%BB%B6%E5%AD%98%E5%82%A8%E5%92%8C%E6%95%B0%E6%8D%AE%E5%85%B1%E4%BA%AB/9.png" class width="9"><p>然后删除这个容器</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker <span class="built_in">rm</span> <span class="operator">-f</span> web</span><br></pre></td></tr></table></figure><h4 id="用bind-Mounting进行映射"><a href="#用bind-Mounting进行映射" class="headerlink" title="用bind Mounting进行映射"></a>用bind Mounting进行映射</h4><figure class="highlight elixir"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker run -d -v <span class="variable">$(</span>pwd)<span class="symbol">:/usr/share/nginx/html</span> -p <span class="number">80</span><span class="symbol">:</span><span class="number">80</span> --name web tinner/mynginx</span><br></pre></td></tr></table></figure><p>主要是-v参数，$(pwd)就是我当前虚拟机的目录，冒号后面就是我创建出来的容器的指定目录要与$(pwd)目录进行映射。</p><p>然后进入容器</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">docker <span class="built_in">exec</span> -it web /bin/bash</span><br><span class="line"><span class="built_in">touch</span> docker.txt</span><br></pre></td></tr></table></figure><p>退出容器，可以看到在虚拟机内部也生成了一个docker.txt文件，同时在我本地也有一份</p><p>这是因为我在构建vagrant的时候指定了</p><figure class="highlight elixir"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="title class_">Vagrant</span>.require_version <span class="string">&quot;&gt;= 1.6.0&quot;</span></span><br><span class="line"></span><br><span class="line">boxes = [</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="symbol">:name</span> =&gt; <span class="string">&quot;docker-host&quot;</span>,</span><br><span class="line">        <span class="symbol">:eth1</span> =&gt; <span class="string">&quot;192.168.205.31&quot;</span>,</span><br><span class="line">        <span class="symbol">:mem</span> =&gt; <span class="string">&quot;1024&quot;</span>,</span><br><span class="line">        <span class="symbol">:cpu</span> =&gt; <span class="string">&quot;1&quot;</span></span><br><span class="line">    &#125;</span><br><span class="line">]</span><br><span class="line"></span><br><span class="line"><span class="title class_">Vagrant</span>.configure(<span class="number">2</span>) <span class="keyword">do</span> |config|</span><br><span class="line"></span><br><span class="line">  config.vm.box = <span class="string">&quot;centos/7&quot;</span></span><br><span class="line">  boxes.each <span class="keyword">do</span> |opts|</span><br><span class="line">    config.vm.define opts[<span class="symbol">:name</span>] <span class="keyword">do</span> |config|</span><br><span class="line">      config.vm.hostname = opts[<span class="symbol">:name</span>]</span><br><span class="line">      config.vm.provider <span class="string">&quot;vmware_fusion&quot;</span> <span class="keyword">do</span> |v|</span><br><span class="line">        v.vmx[<span class="string">&quot;memsize&quot;</span>] = opts[<span class="symbol">:mem</span>]</span><br><span class="line">        v.vmx[<span class="string">&quot;numvcpus&quot;</span>] = opts[<span class="symbol">:cpu</span>]</span><br><span class="line">      <span class="keyword">end</span></span><br><span class="line">      config.vm.provider <span class="string">&quot;virtualbox&quot;</span> <span class="keyword">do</span> |v|</span><br><span class="line">        v.customize [<span class="string">&quot;modifyvm&quot;</span>, <span class="symbol">:id</span>, <span class="string">&quot;--memory&quot;</span>, opts[<span class="symbol">:mem</span>]]</span><br><span class="line">        v.customize [<span class="string">&quot;modifyvm&quot;</span>, <span class="symbol">:id</span>, <span class="string">&quot;--cpus&quot;</span>, opts[<span class="symbol">:cpu</span>]]</span><br><span class="line">      <span class="keyword">end</span></span><br><span class="line">      config.vm.network <span class="symbol">:private_network</span>, <span class="symbol">ip:</span> opts[<span class="symbol">:eth1</span>]</span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line">  config.vm.synced_folder <span class="string">&quot;./labs&quot;</span>, <span class="string">&quot;/home/vagrant/labs&quot;</span></span><br><span class="line">  config.vm.provision <span class="string">&quot;shell&quot;</span>, <span class="symbol">privileged:</span> <span class="literal">true</span>, <span class="symbol">path:</span> <span class="string">&quot;./setup.sh&quot;</span></span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure><p>在倒数第三行，进行了文件的映射，将本地的labs文件夹映射到了我构建出来的虚拟机的”/home/vagrant/labs”目录下，同时，在虚拟机中构建nginx容器的时候，也指定了文件映射，这三处地方实现了映射，进而实现了数据的存储</p><figure class="highlight mipsasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">config</span>.vm.<span class="keyword">synced_folder </span><span class="string">&quot;./labs&quot;</span>, <span class="string">&quot;/home/vagrant/labs&quot;</span></span><br></pre></td></tr></table></figure><p>同时，用这种方式可以实现在我们开发过程中同步查看一些改动</p>]]></content>
    
    
    <summary type="html">&lt;meta name=&quot;referrer&quot; content=&quot;no-referrer&quot;&gt;


&lt;p&gt;&lt;strong&gt;问题&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;当我创建了一个容器，在这个容器中我有个mysql服务，在这个mysql里面我有各种各样的数据。但是有一天我一不小心删除了这个容器，那么这个容器中的相关服务以及数据也都没有了。这个时候就出问题了。&lt;/p&gt;
&lt;p&gt;我们需要一种数据持久化机制来实现我们容器中数据的存储。&lt;/p&gt;
&lt;img src=&quot;/2021/02/12/Docker-%E4%BA%94-Docker%E7%9A%84%E6%96%87%E4%BB%B6%E5%AD%98%E5%82%A8%E5%92%8C%E6%95%B0%E6%8D%AE%E5%85%B1%E4%BA%AB/1.png&quot; class width=&quot;1&quot;&gt;

&lt;p&gt;默认情况下docker数据是写在了container里面的，当我们将容器删除掉之后是找不到这个容器里面的文件及恢复的，那么我们可以用一种机制类似于mock的方式去将容器中的数据保存在我们的磁盘上，这样就跟容器隔离开了，进而实现数据持久化。&lt;/p&gt;</summary>
    
    
    
    <category term="运维" scheme="https://utinner.gitee.io/categories/%E8%BF%90%E7%BB%B4/"/>
    
    
    <category term="Docker" scheme="https://utinner.gitee.io/tags/Docker/"/>
    
  </entry>
  
  <entry>
    <title>Docker(四)Docker的网络空间</title>
    <link href="https://utinner.gitee.io/2021/01/17/Docker-%E5%9B%9B-Docker%E7%9A%84%E7%BD%91%E7%BB%9C%E7%A9%BA%E9%97%B4/"/>
    <id>https://utinner.gitee.io/2021/01/17/Docker-%E5%9B%9B-Docker%E7%9A%84%E7%BD%91%E7%BB%9C%E7%A9%BA%E9%97%B4/</id>
    <published>2021-01-16T17:43:20.000Z</published>
    <updated>2021-12-06T09:23:00.690Z</updated>
    
    <content type="html"><![CDATA[<meta name="referrer" content="no-referrer"><p>在一台linux机器上，不管创建多少个docker容器，他们都有属于自己的ip地址，并且可以相互ping通访问。</p><p>为什么会ping通？其中的原理是什么？</p><span id="more"></span><h2 id="预备工作"><a href="#预备工作" class="headerlink" title="预备工作"></a>预备工作</h2><ul><li>创建一个基于busybox的容器<figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo docker run -d --name test1 busybox <span class="regexp">/bin/</span>sh -c <span class="string">&quot;while true; do sleep 3600; done&quot;</span></span><br></pre></td></tr></table></figure></li><li>输入<code>ip -a </code>命令即可查看当前容器下的网络ip地址和命名空间</li></ul><h2 id="通过实现linux的network-namespace实现两个namespace相通"><a href="#通过实现linux的network-namespace实现两个namespace相通" class="headerlink" title="通过实现linux的network namespace实现两个namespace相通"></a>通过实现linux的network namespace实现两个namespace相通</h2><p><img src="/2021/01/17/Docker-%E5%9B%9B-Docker%E7%9A%84%E7%BD%91%E7%BB%9C%E7%A9%BA%E9%97%B4/1.png" alt="1"></p><h3 id="创建两个network-namespace"><a href="#创建两个network-namespace" class="headerlink" title="创建两个network namespace"></a>创建两个network namespace</h3><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">sudo<span class="built_in"> ip </span>netns <span class="built_in">add</span> test1</span><br><span class="line">sudo<span class="built_in"> ip </span>netns <span class="built_in">add</span> test2</span><br><span class="line">sudo<span class="built_in"> ip </span>link <span class="built_in">add</span> veth-test1<span class="built_in"> type </span>veth<span class="built_in"> peer </span>name veth-test2</span><br></pre></td></tr></table></figure><p><img src="/2021/01/17/Docker-%E5%9B%9B-Docker%E7%9A%84%E7%BD%91%E7%BB%9C%E7%A9%BA%E9%97%B4/2.png" alt="2"></p><h3 id="linux下查看network-namespace"><a href="#linux下查看network-namespace" class="headerlink" title="linux下查看network namespace"></a>linux下查看network namespace</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ip <span class="built_in">link</span></span><br></pre></td></tr></table></figure><p><img src="/2021/01/17/Docker-%E5%9B%9B-Docker%E7%9A%84%E7%BD%91%E7%BB%9C%E7%A9%BA%E9%97%B4/3.png" alt="3"></p><p>可以看到多了两个命名空间，但是只有mac地址，没有ip地址，而且他们现在的状态都是down的</p><h3 id="将veth-test1接口添加到test1上去，同时将veth-test2接口添加到test2上去"><a href="#将veth-test1接口添加到test1上去，同时将veth-test2接口添加到test2上去" class="headerlink" title="将veth-test1接口添加到test1上去，同时将veth-test2接口添加到test2上去"></a>将veth-test1接口添加到test1上去，同时将veth-test2接口添加到test2上去</h3><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo<span class="built_in"> ip </span>link <span class="built_in">set</span> veth-test1 netns test1</span><br></pre></td></tr></table></figure><p>然后可以看到本地的network namespace少了一个<br><img src="/2021/01/17/Docker-%E5%9B%9B-Docker%E7%9A%84%E7%BD%91%E7%BB%9C%E7%A9%BA%E9%97%B4/4.png" alt="4"><br>同时在test1的命名空间里，多了一个<br><img src="/2021/01/17/Docker-%E5%9B%9B-Docker%E7%9A%84%E7%BD%91%E7%BB%9C%E7%A9%BA%E9%97%B4/5.png" alt="5"></p><h3 id="test2同理"><a href="#test2同理" class="headerlink" title="test2同理"></a>test2同理</h3><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo<span class="built_in"> ip </span>link <span class="built_in">set</span> veth-test2 netns test2</span><br></pre></td></tr></table></figure><h3 id="此时两者的状态"><a href="#此时两者的状态" class="headerlink" title="此时两者的状态"></a>此时两者的状态</h3><p><img src="/2021/01/17/Docker-%E5%9B%9B-Docker%E7%9A%84%E7%BD%91%E7%BB%9C%E7%A9%BA%E9%97%B4/6.png" alt="6"><br>还是没有ip地址，只有mac地址</p><h3 id="分配ip地址"><a href="#分配ip地址" class="headerlink" title="分配ip地址"></a>分配ip地址</h3><figure class="highlight armasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="symbol">sudo</span> <span class="built_in">ip</span> netns exec test1 <span class="built_in">ip</span> <span class="keyword">addr</span> <span class="keyword">add</span> <span class="number">192</span>.<span class="number">168</span>.<span class="number">1</span>.<span class="number">1</span>/<span class="number">24</span> dev veth-test1</span><br><span class="line"><span class="symbol">sudo</span> <span class="built_in">ip</span> netns exec test2 <span class="built_in">ip</span> <span class="keyword">addr</span> <span class="keyword">add</span> <span class="number">192</span>.<span class="number">168</span>.<span class="number">1</span>.<span class="number">2</span>/<span class="number">24</span> dev veth-test2</span><br></pre></td></tr></table></figure><h3 id="将两个veth-test端口启动"><a href="#将两个veth-test端口启动" class="headerlink" title="将两个veth-test端口启动"></a>将两个veth-test端口启动</h3><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sudo<span class="built_in"> ip </span>netns exec test1<span class="built_in"> ip </span>link <span class="built_in">set</span> dev veth-test1 up</span><br><span class="line">sudo<span class="built_in"> ip </span>netns exec test2<span class="built_in"> ip </span>link <span class="built_in">set</span> dev veth-test2 up</span><br></pre></td></tr></table></figure><h3 id="查看两个namespace的ip及状态"><a href="#查看两个namespace的ip及状态" class="headerlink" title="查看两个namespace的ip及状态"></a>查看两个namespace的ip及状态</h3><p><img src="/2021/01/17/Docker-%E5%9B%9B-Docker%E7%9A%84%E7%BD%91%E7%BB%9C%E7%A9%BA%E9%97%B4/7.png" alt="7"></p><p>可以看到都有了ip地址，状态都为up。</p><p>可以看到test1能够ping通test2的ip地址</p><p><img src="/2021/01/17/Docker-%E5%9B%9B-Docker%E7%9A%84%E7%BD%91%E7%BB%9C%E7%A9%BA%E9%97%B4/8.png" alt="8"></p><p><strong>这个实验与docker的container网络实现的原理类似。我们创建一个容器，随之也会创建属于这个容器的network namespace</strong></p><h2 id="Docker的网络实现"><a href="#Docker的网络实现" class="headerlink" title="Docker的网络实现"></a>Docker的网络实现</h2><p>我现在有一个容器，基于busybox的一个微型image构建的容器</p><p><img src="/2021/01/17/Docker-%E5%9B%9B-Docker%E7%9A%84%E7%BD%91%E7%BB%9C%E7%A9%BA%E9%97%B4/11.png" alt="11"></p><p>查看docker的network</p><p><img src="/2021/01/17/Docker-%E5%9B%9B-Docker%E7%9A%84%E7%BD%91%E7%BB%9C%E7%A9%BA%E9%97%B4/12.png" alt="12"></p><p>查看docker的network的详细信息</p><figure class="highlight isbl"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">docker</span> <span class="variable">network</span> <span class="variable">inspect</span> <span class="function"><span class="title">a11a8b74c466</span>(<span class="variable">network</span>的<span class="variable">id</span>)</span></span><br></pre></td></tr></table></figure><p>在输出的信息里面会看到关于test1的相关信息</p><p><img src="/2021/01/17/Docker-%E5%9B%9B-Docker%E7%9A%84%E7%BD%91%E7%BB%9C%E7%A9%BA%E9%97%B4/13.png" alt="13"></p><p>我们可以知道test1的container连接到了bridge的网络上面。</p><p>查看本机的ip信息</p><p><img src="/2021/01/17/Docker-%E5%9B%9B-Docker%E7%9A%84%E7%BD%91%E7%BB%9C%E7%A9%BA%E9%97%B4/14.png" alt="14"></p><p>再来查看test1的container的ip相关信息</p><p><img src="/2021/01/17/Docker-%E5%9B%9B-Docker%E7%9A%84%E7%BD%91%E7%BB%9C%E7%A9%BA%E9%97%B4/15.png" alt="15"></p><p>给结论：<strong>test1的eth0@if6与本机的veth821ee0b@if5相对应，container最终要映射到本机的docker0的network namespace上去</strong></p><h3 id="验证"><a href="#验证" class="headerlink" title="验证"></a>验证</h3><h4 id="安装bridge-utils"><a href="#安装bridge-utils" class="headerlink" title="安装bridge-utils"></a>安装bridge-utils</h4><figure class="highlight cmake"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo yum <span class="keyword">install</span> bridge-utils</span><br></pre></td></tr></table></figure><h4 id="运行命令：brctl-show"><a href="#运行命令：brctl-show" class="headerlink" title="运行命令：brctl show"></a>运行命令：<code>brctl show</code></h4><p><img src="/2021/01/17/Docker-%E5%9B%9B-Docker%E7%9A%84%E7%BD%91%E7%BB%9C%E7%A9%BA%E9%97%B4/16.png" alt="16"></p><p>可以看到我们的veth821ee0b接口连接到了docker0的namespace上 </p><h4 id="现在我们再创建一个容器："><a href="#现在我们再创建一个容器：" class="headerlink" title="现在我们再创建一个容器："></a>现在我们再创建一个容器：</h4><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo docker run -d --name test2 busybox <span class="regexp">/bin/</span>sh -c <span class="string">&quot;while true; do sleep 3600; done&quot;</span></span><br></pre></td></tr></table></figure><p>再次查看网络信息，可以看到多了一个接口</p><p><img src="/2021/01/17/Docker-%E5%9B%9B-Docker%E7%9A%84%E7%BD%91%E7%BB%9C%E7%A9%BA%E9%97%B4/17.png" alt="17"></p><p>然后看到bridge可以对应到两个container</p><p><img src="/2021/01/17/Docker-%E5%9B%9B-Docker%E7%9A%84%E7%BD%91%E7%BB%9C%E7%A9%BA%E9%97%B4/18.png" alt="18"></p><p>再来运行命令：<code>brctl show</code></p><p><img src="/2021/01/17/Docker-%E5%9B%9B-Docker%E7%9A%84%E7%BD%91%E7%BB%9C%E7%A9%BA%E9%97%B4/19.png" alt="19"></p><p>可以看到我们的veth821ee0b接口以及vethbbbd3b9都连接到了docker0的namespace上 </p><h4 id="实现原理的拓扑图"><a href="#实现原理的拓扑图" class="headerlink" title="实现原理的拓扑图"></a>实现原理的拓扑图</h4><p><img src="/2021/01/17/Docker-%E5%9B%9B-Docker%E7%9A%84%E7%BD%91%E7%BB%9C%E7%A9%BA%E9%97%B4/21.png" alt="21"></p><p>两个容器分别是两个不同的network namespace，两者通过docker0进行连接。</p><p>单个容器如何访问外网？<strong>通过本机的docker0的network namespace</strong></p><p><img src="/2021/01/17/Docker-%E5%9B%9B-Docker%E7%9A%84%E7%BD%91%E7%BB%9C%E7%A9%BA%E9%97%B4/22.png" alt="22"></p><h2 id="容器之间的link"><a href="#容器之间的link" class="headerlink" title="容器之间的link"></a>容器之间的link</h2><p>在实际项目中我们不能总是依赖于ip地址，如果容器之间需要相互访问还可以通过另外一种方式:<strong>link</strong></p><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo docker <span class="keyword">run</span><span class="language-bash"> -d --name test2 --<span class="built_in">link</span> test1 busybox /bin/sh -c <span class="string">&quot;while true; do sleep 3600; done&quot;</span></span></span><br></pre></td></tr></table></figure><p>在我们创建容器的时候加参数：<code>--link [容器名]</code><br>即可在我们的容器中不仅可以通过ip地址访问我们想要访问的ip，还可以通过容器名访问<br><img src="/2021/01/17/Docker-%E5%9B%9B-Docker%E7%9A%84%E7%BD%91%E7%BB%9C%E7%A9%BA%E9%97%B4/23.png" alt="23"><br>我们在容器创建的时候就已经指定了对应的容器了。<br>反过来，在test1里面，如果想访问test2的话是不行的，link是单向的，不是双向的<br>link用的其实并不多。</p><h2 id="让容器不连接bridge，连接自定义的network-namespace"><a href="#让容器不连接bridge，连接自定义的network-namespace" class="headerlink" title="让容器不连接bridge，连接自定义的network namespace"></a>让容器不连接bridge，连接自定义的network namespace</h2><p>重新构建test2容器</p><p><img src="/2021/01/17/Docker-%E5%9B%9B-Docker%E7%9A%84%E7%BD%91%E7%BB%9C%E7%A9%BA%E9%97%B4/24.png" alt="24"></p><h3 id="新建network"><a href="#新建network" class="headerlink" title="新建network"></a>新建network</h3><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo docker<span class="built_in"> network </span>create -d<span class="built_in"> bridge </span>my-bridge</span><br></pre></td></tr></table></figure><p>可以看到多了一个my-bridge</p><p><img src="/2021/01/17/Docker-%E5%9B%9B-Docker%E7%9A%84%E7%BD%91%E7%BB%9C%E7%A9%BA%E9%97%B4/25.png" alt="25"></p><h3 id="新建容器指定连接我自定义的network"><a href="#新建容器指定连接我自定义的network" class="headerlink" title="新建容器指定连接我自定义的network"></a>新建容器指定连接我自定义的network</h3><figure class="highlight jboss-cli"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo docker run -d <span class="params">--name</span> test3 <span class="params">--network</span> my-bridge busybox <span class="string">/bin/sh</span> -c <span class="string">&quot;while true; do sleep 3600; done&quot;</span></span><br></pre></td></tr></table></figure><p><img src="/2021/01/17/Docker-%E5%9B%9B-Docker%E7%9A%84%E7%BD%91%E7%BB%9C%E7%A9%BA%E9%97%B4/26.png" alt="26"></p><p>可以看到有了interface，在创建test3之前是没有interface的</p><h3 id="修改test1和test2连接的network"><a href="#修改test1和test2连接的network" class="headerlink" title="修改test1和test2连接的network"></a>修改test1和test2连接的network</h3><figure class="highlight perl"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo docker network <span class="keyword">connect</span> <span class="keyword">my</span>-bridge test2</span><br></pre></td></tr></table></figure><p>查看my-bridge的信息<br><img src="/2021/01/17/Docker-%E5%9B%9B-Docker%E7%9A%84%E7%BD%91%E7%BB%9C%E7%A9%BA%E9%97%B4/27.png" alt="27"><br>查看bridge的信息<br><img src="/2021/01/17/Docker-%E5%9B%9B-Docker%E7%9A%84%E7%BD%91%E7%BB%9C%E7%A9%BA%E9%97%B4/28.png" alt="28"><br>可以看到test2既连接到了bridge上，又连接到了my-bridge上<br><img src="/2021/01/17/Docker-%E5%9B%9B-Docker%E7%9A%84%E7%BD%91%E7%BB%9C%E7%A9%BA%E9%97%B4/29.png" alt="29"></p><p>在test2上既可以通过ip地址访问test3，又可以通过test3的名称访问test3，这是因为在用户自定义的bridge上的所有容器之间都是默认加了link去进行相互之间的访问的，而且是双向的。这就是系统默认的bridge和用户自定义bridge的区别，在系统默认的bridge上的container默认是不支持link连接的。</p><h2 id="容器的端口映射"><a href="#容器的端口映射" class="headerlink" title="容器的端口映射"></a>容器的端口映射</h2><h3 id="创建一个nginx容器"><a href="#创建一个nginx容器" class="headerlink" title="创建一个nginx容器"></a>创建一个nginx容器</h3><figure class="highlight applescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo docker <span class="built_in">run</span> <span class="comment">--name web -d nginx</span></span><br></pre></td></tr></table></figure><h3 id="查看ngingx的ip地址"><a href="#查看ngingx的ip地址" class="headerlink" title="查看ngingx的ip地址"></a>查看ngingx的ip地址</h3><figure class="highlight ebnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">sudo docker network inspect bridge</span></span><br></pre></td></tr></table></figure><p><img src="/2021/01/17/Docker-%E5%9B%9B-Docker%E7%9A%84%E7%BD%91%E7%BB%9C%E7%A9%BA%E9%97%B4/31.png" alt="31"></p><p>为172.17.0.4</p><h3 id="访问nginx"><a href="#访问nginx" class="headerlink" title="访问nginx"></a>访问nginx</h3><p><img src="/2021/01/17/Docker-%E5%9B%9B-Docker%E7%9A%84%E7%BD%91%E7%BB%9C%E7%A9%BA%E9%97%B4/32.png" alt="32"></p><p>可以访问到</p><p><strong>如何让我的docker-node1对外提供nginx服务呢？就是端口映射</strong></p><h3 id="停止并删除web（nginx）容器"><a href="#停止并删除web（nginx）容器" class="headerlink" title="停止并删除web（nginx）容器"></a>停止并删除web（nginx）容器</h3><figure class="highlight arduino"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sudo docker stop web</span><br><span class="line">sudo docker rm web</span><br></pre></td></tr></table></figure><h3 id="重新构建，但是要加参数"><a href="#重新构建，但是要加参数" class="headerlink" title="重新构建，但是要加参数"></a>重新构建，但是要加参数</h3><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">sudo</span> docker run --name web -d -p <span class="number">80</span>:<span class="number">80</span> nginx</span><br></pre></td></tr></table></figure><p><img src="/2021/01/17/Docker-%E5%9B%9B-Docker%E7%9A%84%E7%BD%91%E7%BB%9C%E7%A9%BA%E9%97%B4/33.png" alt="33"></p><p>由于我在构建的时候指定了我的docker-node1的ip地址为192.168.205.10，所以在我本地的浏览器中访问<a href="http://192.168.205.10/%EF%BC%8C%E5%8D%B3%E5%8F%AF">http://192.168.205.10/，即可</a></p><p><img src="/2021/01/17/Docker-%E5%9B%9B-Docker%E7%9A%84%E7%BD%91%E7%BB%9C%E7%A9%BA%E9%97%B4/34.png" alt="34"></p><h2 id="none-network"><a href="#none-network" class="headerlink" title="none network"></a>none network</h2><h3 id="新建一个连接到none的network的容器"><a href="#新建一个连接到none的network的容器" class="headerlink" title="新建一个连接到none的network的容器"></a>新建一个连接到none的network的容器</h3><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo docker run -d <span class="attr">--name</span> <span class="attribute">none</span>-test <span class="attr">--network</span> <span class="attribute">none</span> busybox /bin/sh -c &quot;while true;do sleep <span class="number">3600</span>;done&quot;</span><br></pre></td></tr></table></figure><h3 id="查看none的状态"><a href="#查看none的状态" class="headerlink" title="查看none的状态"></a>查看none的状态</h3><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">sudo</span> docker network inspect <span class="literal">none</span></span><br></pre></td></tr></table></figure><p><img src="/2021/01/17/Docker-%E5%9B%9B-Docker%E7%9A%84%E7%BD%91%E7%BB%9C%E7%A9%BA%E9%97%B4/35.png" alt="35"></p><p>可以看到没有任何的mac的地址和IP地址</p><h3 id="进入容器"><a href="#进入容器" class="headerlink" title="进入容器"></a>进入容器</h3><figure class="highlight livecodeserver"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sudo docker exec -<span class="keyword">it</span> <span class="literal">none</span>-test /bin/sh</span><br><span class="line">ip <span class="keyword">a</span></span><br></pre></td></tr></table></figure><p><img src="/2021/01/17/Docker-%E5%9B%9B-Docker%E7%9A%84%E7%BD%91%E7%BB%9C%E7%A9%BA%E9%97%B4/36.png" alt="36"></p><p>没有任何接口和地址</p><h3 id="它的作用？"><a href="#它的作用？" class="headerlink" title="它的作用？"></a>它的作用？</h3><p>可能是在存储一些密码等敏感信息的时候出于安全性考虑只有在容器内部才能进行访问的时候才用这种模式（只是猜测）。对外提供不了服务</p><h2 id="host方式"><a href="#host方式" class="headerlink" title="host方式"></a>host方式</h2><h3 id="新建一个连接到none的network的容器-1"><a href="#新建一个连接到none的network的容器-1" class="headerlink" title="新建一个连接到none的network的容器"></a>新建一个连接到none的network的容器</h3><figure class="highlight jboss-cli"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo docker run -d <span class="params">--name</span> host-test <span class="params">--network</span> host busybox <span class="string">/bin/sh</span> -c <span class="string">&quot;while true;do sleep 3600;done&quot;</span></span><br></pre></td></tr></table></figure><h3 id="查看none的状态-1"><a href="#查看none的状态-1" class="headerlink" title="查看none的状态"></a>查看none的状态</h3><figure class="highlight ebnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">sudo docker network inspect host</span></span><br></pre></td></tr></table></figure><p><img src="/2021/01/17/Docker-%E5%9B%9B-Docker%E7%9A%84%E7%BD%91%E7%BB%9C%E7%A9%BA%E9%97%B4/37.png" alt="37"></p><p>同样，也没有任何ip地址和mac地址</p><h3 id="进入容器-1"><a href="#进入容器-1" class="headerlink" title="进入容器"></a>进入容器</h3><figure class="highlight livecodeserver"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sudo docker exec -<span class="keyword">it</span> <span class="literal">none</span>-test /bin/sh</span><br><span class="line">ip <span class="keyword">a</span></span><br></pre></td></tr></table></figure><p><img src="/2021/01/17/Docker-%E5%9B%9B-Docker%E7%9A%84%E7%BD%91%E7%BB%9C%E7%A9%BA%E9%97%B4/38.png" alt="38"></p><p>可以看到与容器的ip状态是一致的</p><p>这个容器没有自己的独立的network namespace，它是与我的主机所在的network namespace共享一套。</p><p>通过这种方式构建的容器带来的问题：<br><strong>由于是与容器主机共享的network namespace，意味着端口可能会冲突。比如创建两个nginx的container，都绑定到host的network上去，就会出问题</strong></p><h2 id="构建复杂app"><a href="#构建复杂app" class="headerlink" title="构建复杂app"></a>构建复杂app</h2><h3 id="创建一个redis容器"><a href="#创建一个redis容器" class="headerlink" title="创建一个redis容器"></a>创建一个redis容器</h3><figure class="highlight applescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker <span class="built_in">run</span> -d <span class="comment">--name redis redis</span></span><br></pre></td></tr></table></figure><p>为什么没有指定端口映射？</p><ul><li>是因为我这个redis不是对外提供服务的，而是在我的容器内部进行访问的，没必要暴露到外面</li></ul><h3 id="启动服务"><a href="#启动服务" class="headerlink" title="启动服务"></a>启动服务</h3><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo docker <span class="built_in">run</span> -d --link redis -p 5000:5000 --name fast-redis -e <span class="attribute">REDIS_HOST</span>=redis jinping/flask-redis</span><br></pre></td></tr></table></figure><h3 id="进入服务，可以看到环境变量"><a href="#进入服务，可以看到环境变量" class="headerlink" title="进入服务，可以看到环境变量"></a>进入服务，可以看到环境变量</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">docker <span class="built_in">exec</span> -it fast-redis /bin/sh</span><br><span class="line"><span class="built_in">env</span></span><br></pre></td></tr></table></figure><p><strong>-e 是设置环境变量的</strong></p><p><img src="/2021/01/17/Docker-%E5%9B%9B-Docker%E7%9A%84%E7%BD%91%E7%BB%9C%E7%A9%BA%E9%97%B4/39.png" alt="39"></p><p>在我们当前容器的内部，是能够ping通redis的</p><p>所以当我们执行curl 127.0.0.1:5000时，可以输出相应的pv</p><p>当我回到我的vagrant时,由于在容器中指定了端口映射，所以一样可以输出pv</p><p><img src="/2021/01/17/Docker-%E5%9B%9B-Docker%E7%9A%84%E7%BD%91%E7%BB%9C%E7%A9%BA%E9%97%B4/41.png" alt="41"></p><p><strong>推荐：一个模块一个容器，只要搞清楚他们之间的部署关系就可以了</strong><br><img src="/2021/01/17/Docker-%E5%9B%9B-Docker%E7%9A%84%E7%BD%91%E7%BB%9C%E7%A9%BA%E9%97%B4/42.png" alt="42"></p><h2 id="处于不同的linux机器间的docker通信"><a href="#处于不同的linux机器间的docker通信" class="headerlink" title="处于不同的linux机器间的docker通信"></a>处于不同的linux机器间的docker通信</h2><p><img src="/2021/01/17/Docker-%E5%9B%9B-Docker%E7%9A%84%E7%BD%91%E7%BB%9C%E7%A9%BA%E9%97%B4/43.png" alt="43"></p><p>VXLAN的方式<br>分布式存储：etcd<br><a href="https://github.com/docker/labs/blob/master/networking/concepts/06-overlay-networks.md">https://github.com/docker/labs/blob/master/networking/concepts/06-overlay-networks.md</a></p>]]></content>
    
    
    <summary type="html">&lt;meta name=&quot;referrer&quot; content=&quot;no-referrer&quot;&gt;

&lt;p&gt;在一台linux机器上，不管创建多少个docker容器，他们都有属于自己的ip地址，并且可以相互ping通访问。&lt;/p&gt;
&lt;p&gt;为什么会ping通？其中的原理是什么？&lt;/p&gt;</summary>
    
    
    
    <category term="运维" scheme="https://utinner.gitee.io/categories/%E8%BF%90%E7%BB%B4/"/>
    
    
    <category term="Docker" scheme="https://utinner.gitee.io/tags/Docker/"/>
    
  </entry>
  
  <entry>
    <title>Java中的hashcode和equals</title>
    <link href="https://utinner.gitee.io/2020/12/24/Java%E4%B8%AD%E7%9A%84hashcode%E5%92%8Cequals/"/>
    <id>https://utinner.gitee.io/2020/12/24/Java%E4%B8%AD%E7%9A%84hashcode%E5%92%8Cequals/</id>
    <published>2020-12-23T16:18:34.000Z</published>
    <updated>2021-12-06T09:23:00.723Z</updated>
    
    <content type="html"><![CDATA[<meta name="referrer" content="no-referrer"><h2 id="关于hashcode"><a href="#关于hashcode" class="headerlink" title="关于hashcode"></a>关于hashcode</h2><p>1、hashcode的存在主要是用于查找的快捷性，如Hashtable、HashMap等，hashcode是用来在散列存储结构中确定对象的存储地址的。</p><p>2、如果两个对象相同，就是适用于<code>equals(java.lang.Object)</code>方法，那么这两个对象的hashcode方法一定要相同。</p><p>3、如果对象的equals方法被重写，那么对象的hashcode方法也尽量重写，并且产生hashcode使用的对象，一定要和equals方法中使用的一致，否则就会违反上面提到的第2点。</p><p>4、两个对象的hashcode相同，并不一定表示两个对象就相同，也就是不一定适用于<code>equals(java.lang.Object)</code>方法，只能够说明这两个对象在散列存储结构中，如Hashtable，他们“存放在一个篮子中”。</p><span id="more"></span><p><strong>再次归纳一下就是hashCode是用于查找使用的，而equals是用于比较两个对象是否相等的</strong></p><h2 id="关于equals"><a href="#关于equals" class="headerlink" title="关于equals"></a>关于equals</h2><p>1、equals和==</p><ul><li>==用于比较引用和比较基本数据类型时具有不同的功能：<br>  比较基本数据类型，如果两个值相同，则结果为true；<br>  而在比较引用时，如果引用指向内存中的同一对象，结果为true。</li></ul><p>2、equals作为方法，实现对象的比较。由于==运算符不允许我们进行覆盖，也就是说它限制了我们的表达，因此我们复写equals()方法，达到比较对象内容是否相同的目的。而这些通过==运算符是做不到的。</p><p>3、Object类的equals()方法的比较规则为：如果两个对象的类型一致，并且内容一致，则返回true。</p>]]></content>
    
    
    <summary type="html">&lt;meta name=&quot;referrer&quot; content=&quot;no-referrer&quot;&gt;

&lt;h2 id=&quot;关于hashcode&quot;&gt;&lt;a href=&quot;#关于hashcode&quot; class=&quot;headerlink&quot; title=&quot;关于hashcode&quot;&gt;&lt;/a&gt;关于hashcode&lt;/h2&gt;&lt;p&gt;1、hashcode的存在主要是用于查找的快捷性，如Hashtable、HashMap等，hashcode是用来在散列存储结构中确定对象的存储地址的。&lt;/p&gt;
&lt;p&gt;2、如果两个对象相同，就是适用于&lt;code&gt;equals(java.lang.Object)&lt;/code&gt;方法，那么这两个对象的hashcode方法一定要相同。&lt;/p&gt;
&lt;p&gt;3、如果对象的equals方法被重写，那么对象的hashcode方法也尽量重写，并且产生hashcode使用的对象，一定要和equals方法中使用的一致，否则就会违反上面提到的第2点。&lt;/p&gt;
&lt;p&gt;4、两个对象的hashcode相同，并不一定表示两个对象就相同，也就是不一定适用于&lt;code&gt;equals(java.lang.Object)&lt;/code&gt;方法，只能够说明这两个对象在散列存储结构中，如Hashtable，他们“存放在一个篮子中”。&lt;/p&gt;</summary>
    
    
    
    <category term="Java" scheme="https://utinner.gitee.io/categories/Java/"/>
    
    
    <category term="Java基础" scheme="https://utinner.gitee.io/tags/Java%E5%9F%BA%E7%A1%80/"/>
    
  </entry>
  
  <entry>
    <title>mongo分片集</title>
    <link href="https://utinner.gitee.io/2020/12/18/mongo%E5%88%86%E7%89%87%E9%9B%86/"/>
    <id>https://utinner.gitee.io/2020/12/18/mongo%E5%88%86%E7%89%87%E9%9B%86/</id>
    <published>2020-12-18T08:21:51.000Z</published>
    <updated>2021-12-06T09:23:00.860Z</updated>
    
    <content type="html"><![CDATA[<meta name="referrer" content="no-referrer"><h2 id="分片集的架构说明"><a href="#分片集的架构说明" class="headerlink" title="分片集的架构说明"></a>分片集的架构说明</h2><img src="/2020/12/18/mongo%E5%88%86%E7%89%87%E9%9B%86/sharding.png" class title="分片集"><table><thead><tr><th align="center">名称</th><th align="center">解释</th><th align="left">作用</th></tr></thead><tbody><tr><td align="center">Shard</td><td align="center">分片集存储实例</td><td align="left">用于存储实际的数据块，实际生产环境中一个<code>shard server</code>角色可由几台机器组个一个<code>replica set</code>承担，防止单机节点故障</td></tr><tr><td align="center">config server</td><td align="center">分片集配置器</td><td align="left">存储了整个ClusterMetadata，其中包括 chunk信息</td></tr><tr><td align="center">mongos</td><td align="center">分片集路由器</td><td align="left">客户端由此接入，且让整个集群看上去像单一数据库，前端应用可以透明使用</td></tr></tbody></table><h2 id="为什么要使用分片集？"><a href="#为什么要使用分片集？" class="headerlink" title="为什么要使用分片集？"></a>为什么要使用分片集？</h2><p>一般有如下几个原因：</p><ul><li>数据容量日益增大，副本集维护吃力</li><li>增加集群的吞吐量</li><li>单库数据超过10TB</li><li>地理容灾</li></ul><h2 id="使用分片集的优劣势"><a href="#使用分片集的优劣势" class="headerlink" title="使用分片集的优劣势"></a>使用分片集的优劣势</h2><table><thead><tr><th align="left">优势</th><th align="left">劣势</th></tr></thead><tbody><tr><td align="left">1.海量数据存储有方案 <br>2.增加数据库的访问并发和集群的iops <br>3.跨机房灾备<br> 4.单库数据量有限<br></td><td align="left">1.成本高昂，一个高可用的分片集至少需要3台configServer，2个shardServer，每个shardServer都是为副本集，至少2个mongos组成。<br>2.分片集本身结构复杂，运维复杂。</td></tr></tbody></table><h2 id="1-如何进行分片？"><a href="#1-如何进行分片？" class="headerlink" title="1.如何进行分片？"></a>1.如何进行分片？</h2><h3 id="1-1-分片的基本标准"><a href="#1-1-分片的基本标准" class="headerlink" title="1.1 分片的基本标准"></a>1.1 分片的基本标准</h3><ul><li>1.数据角度:数据量不超过3TB，尽可能保持在2TB一个分片</li><li>2.索引角度:常用的索引必须能容纳进系统内存之中</li></ul><h3 id="1-2-分片的预估标准"><a href="#1-2-分片的预估标准" class="headerlink" title="1.2 分片的预估标准"></a>1.2 分片的预估标准</h3><p>A=(所需存储量/单服务可挂载容量)<br>B=(工作集大小/服务器内存<em>MongoDB可用内存率)<br>C=(并发量总数/单服务器</em>损耗系数)<br><strong>分片的数量=max(A,B,C)</strong><br>举个例子：<br>A=30TB/2TB=15<br>B=1TB/(64G<em>0.6)=27<br>C=200000/(8000</em>0.7)=36<br>分片数量=36</p><h3 id="1-3-分片的基本概念"><a href="#1-3-分片的基本概念" class="headerlink" title="1.3 分片的基本概念"></a>1.3 分片的基本概念</h3><table><thead><tr><th align="left">名称</th><th align="left">解释</th></tr></thead><tbody><tr><td align="left">分片键 shardkey</td><td align="left">文档中的一个字段</td></tr><tr><td align="left">文档doc</td><td align="left">包含分片键的一行数据</td></tr><tr><td align="left">块chunk</td><td align="left">包含N个文档</td></tr><tr><td align="left">分片shard</td><td align="left">包含N个chunk</td></tr><tr><td align="left">分片集群Cluster</td><td align="left">包含N个分片shard</td></tr></tbody></table><h3 id="1-4-选择合适的分片键"><a href="#1-4-选择合适的分片键" class="headerlink" title="1.4 选择合适的分片键"></a>1.4 选择合适的分片键</h3><h4 id="基于范围的分片"><a href="#基于范围的分片" class="headerlink" title="基于范围的分片"></a>基于范围的分片</h4><p>MongoDB按照片键的值的范围将数据拆分为不同的块（chunk），每个块包含了一段范围内的数据。</p><ul><li>优点： mongos可以快速定位请求需要的数据，并将请求转发到相应的Shard节点中。</li><li>缺点： 可能导致数据在Shard节点上分布不均衡，容易造成读写热点，且不具备写分散性。</li></ul><p>适用场景：</p><ul><li>片键的值不是单调递增或单调递减、片键的值基数大且重复的频率低、需要范围查询等业务场景。</li></ul><h4 id="基于hash值的分片"><a href="#基于hash值的分片" class="headerlink" title="基于hash值的分片"></a>基于hash值的分片</h4><p>MongoDB计算单个字段的哈希值作为索引值，并以哈希值的范围将数据拆分为不同的块。</p><ul><li>优点：可以将数据更加均衡地分布在各Shard节点中，具备写分散性。</li><li>缺点：不适合进行范围查询，进行范围查询时，需要将读请求分发到所有的Shard节点。</li></ul><p>适用场景：</p><ul><li>片键的值存在单调递增或递减、片键的值基数大且重复的频率低、需要写入的数据随机分发、数据读取随机性较大等业务场景。</li></ul><h4 id="注意"><a href="#注意" class="headerlink" title="注意"></a>注意</h4><ul><li>在4.0之前片键一经设置，不可修改，不可删除。在4.2之后可以对分片完的Collection进行修改分片键</li><li>执行了数据分片操作后，均衡器会对满足条件的数据进行拆分，这将占用实例的资源，请在业务低峰期操作。</li></ul><h3 id="1-5-分片操作"><a href="#1-5-分片操作" class="headerlink" title="1.5 分片操作"></a>1.5 分片操作</h3><p>1&gt;确认使用的实例为分片集群（执行<code>sh.status()</code>）<br>2&gt;切换数据库（执行 <code>use 数据库名</code>&gt;<br>3&gt;允许此库进行分片(执行 sh.enableSharding(“数据库名”))<br>4&gt;创建或使用已有的collection<br>5&gt;对collection中已创建索引的字段进行分片</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">sh</span>.shardCollection(<span class="string">&quot;数据库名.表名&quot;</span>,&#123;<span class="string">&quot;_id&quot;</span>:<span class="number">1</span>&#125;)</span><br></pre></td></tr></table></figure><p>6.经过一段时间查看一下数据在每个节点的分布</p><figure class="highlight gcode"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">db.stats<span class="comment">()</span></span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;meta name=&quot;referrer&quot; content=&quot;no-referrer&quot;&gt;


&lt;h2 id=&quot;分片集的架构说明&quot;&gt;&lt;a href=&quot;#分片集的架构说明&quot; class=&quot;headerlink&quot; title=&quot;分片集的架构说明&quot;&gt;&lt;/a&gt;分片集的架构说明&lt;/h2&gt;&lt;i</summary>
      
    
    
    
    <category term="数据库" scheme="https://utinner.gitee.io/categories/%E6%95%B0%E6%8D%AE%E5%BA%93/"/>
    
    
    <category term="MongoDB" scheme="https://utinner.gitee.io/tags/MongoDB/"/>
    
  </entry>
  
</feed>
